
LCD_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000021a2  00002216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001794  00000000  00000000  00002230  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b57  00000000  00000000  000039c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000451b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000467b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000480a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000684f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00007950  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000088d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00008a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00008d16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000095a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 71 06 	call	0xce2	; 0xce2 <main>
      7a:	0c 94 cf 10 	jmp	0x219e	; 0x219e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 98 10 	jmp	0x2130	; 0x2130 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	af e6       	ldi	r26, 0x6F	; 111
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 b4 10 	jmp	0x2168	; 0x2168 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 98 10 	jmp	0x2130	; 0x2130 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8f e6       	ldi	r24, 0x6F	; 111
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 b4 10 	jmp	0x2168	; 0x2168 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6f e6       	ldi	r22, 0x6F	; 111
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <delay>:
#include "../5-LIBRARIES/ES.h"
#include"../1-MCAL/1-DIO/DIO_interface.h"
#include "../2-HAL/1-LCD/LCD_Interface.h"

void delay(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <delay+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <delay+0x8>
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
	for(int x=0;x<500;x++)
     c9a:	1c 82       	std	Y+4, r1	; 0x04
     c9c:	1b 82       	std	Y+3, r1	; 0x03
     c9e:	14 c0       	rjmp	.+40     	; 0xcc8 <delay+0x3a>
		for(int y=0;y<500;y++)
     ca0:	1a 82       	std	Y+2, r1	; 0x02
     ca2:	19 82       	std	Y+1, r1	; 0x01
     ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <delay+0x24>
			__asm("NOP");
     ca6:	00 00       	nop
#include "../2-HAL/1-LCD/LCD_Interface.h"

void delay(void)
{
	for(int x=0;x<500;x++)
		for(int y=0;y<500;y++)
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	9a 83       	std	Y+2, r25	; 0x02
     cb0:	89 83       	std	Y+1, r24	; 0x01
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	9a 81       	ldd	r25, Y+2	; 0x02
     cb6:	21 e0       	ldi	r18, 0x01	; 1
     cb8:	84 3f       	cpi	r24, 0xF4	; 244
     cba:	92 07       	cpc	r25, r18
     cbc:	a4 f3       	brlt	.-24     	; 0xca6 <delay+0x18>
#include"../1-MCAL/1-DIO/DIO_interface.h"
#include "../2-HAL/1-LCD/LCD_Interface.h"

void delay(void)
{
	for(int x=0;x<500;x++)
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	9c 81       	ldd	r25, Y+4	; 0x04
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	9c 83       	std	Y+4, r25	; 0x04
     cc6:	8b 83       	std	Y+3, r24	; 0x03
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	9c 81       	ldd	r25, Y+4	; 0x04
     ccc:	21 e0       	ldi	r18, 0x01	; 1
     cce:	84 3f       	cpi	r24, 0xF4	; 244
     cd0:	92 07       	cpc	r25, r18
     cd2:	34 f3       	brlt	.-52     	; 0xca0 <delay+0x12>
		for(int y=0;y<500;y++)
			__asm("NOP");
}
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <main>:
int main(void) {
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_OUTPUT);
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	41 e0       	ldi	r20, 0x01	; 1
     cf0:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_OUTPUT);
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	61 e0       	ldi	r22, 0x01	; 1
     cf8:	41 e0       	ldi	r20, 0x01	; 1
     cfa:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_OUTPUT);
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	62 e0       	ldi	r22, 0x02	; 2
     d02:	41 e0       	ldi	r20, 0x01	; 1
     d04:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN0,DIO_u8_LOW);
     d08:	83 e0       	ldi	r24, 0x03	; 3
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	40 e0       	ldi	r20, 0x00	; 0
     d0e:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN1,DIO_u8_LOW);
     d12:	83 e0       	ldi	r24, 0x03	; 3
     d14:	61 e0       	ldi	r22, 0x01	; 1
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN2,DIO_u8_LOW);
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	62 e0       	ldi	r22, 0x02	; 2
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN3,DIO_u8_LOW);
     d26:	83 e0       	ldi	r24, 0x03	; 3
     d28:	63 e0       	ldi	r22, 0x03	; 3
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN4,DIO_u8_LOW);
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	64 e0       	ldi	r22, 0x04	; 4
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN5,DIO_u8_LOW);
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	65 e0       	ldi	r22, 0x05	; 5
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN6,DIO_u8_LOW);
     d44:	83 e0       	ldi	r24, 0x03	; 3
     d46:	66 e0       	ldi	r22, 0x06	; 6
     d48:	40 e0       	ldi	r20, 0x00	; 0
     d4a:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN7,DIO_u8_LOW);
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	67 e0       	ldi	r22, 0x07	; 7
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_u8SetPinValue>

	LCD_enuInit();
     d58:	0e 94 aa 07 	call	0xf54	; 0xf54 <LCD_enuInit>

	LCD_enuSetAc(1,0);
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <LCD_enuSetAc>
	LCD_enuSendString("IEEE_RAS_");
     d68:	80 e6       	ldi	r24, 0x60	; 96
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 8f 0b 	call	0x171e	; 0x171e <LCD_enuSendString>
	LCD_enuSendString("2023");
     d70:	8a e6       	ldi	r24, 0x6A	; 106
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 8f 0b 	call	0x171e	; 0x171e <LCD_enuSendString>
	delay();
     d78:	0e 94 47 06 	call	0xc8e	; 0xc8e <delay>
     d7c:	ff cf       	rjmp	.-2      	; 0xd7c <main+0x9a>

00000d7e <LCD_enuSendCmnd>:
#define F_CPU 8000000UL
#include<util/delay.h>

/************************************************/
 ERROR LCD_enuSendCmnd(u8 Copy_u8Cmdn)
{
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	69 97       	sbiw	r28, 0x19	; 25
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	f8 94       	cli
     d8c:	de bf       	out	0x3e, r29	; 62
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	cd bf       	out	0x3d, r28	; 61
     d92:	89 8f       	std	Y+25, r24	; 0x19
	/* RS = 0 */
	DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	62 e0       	ldi	r22, 0x02	; 2
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_u8SetPinValue>

	/* RW = 0 */
    DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	61 e0       	ldi	r22, 0x01	; 1
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_u8SetPinValue>
   
    /*Write Command*/
    DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmdn);
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	69 8d       	ldd	r22, Y+25	; 0x19
     dac:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <DIO_u8SetPortValue>

    /* E = 1 */
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	41 e0       	ldi	r20, 0x01	; 1
     db6:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_u8SetPinValue>
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	a0 e8       	ldi	r26, 0x80	; 128
     dc0:	bf e3       	ldi	r27, 0x3F	; 63
     dc2:	8d 8b       	std	Y+21, r24	; 0x15
     dc4:	9e 8b       	std	Y+22, r25	; 0x16
     dc6:	af 8b       	std	Y+23, r26	; 0x17
     dc8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     dca:	6d 89       	ldd	r22, Y+21	; 0x15
     dcc:	7e 89       	ldd	r23, Y+22	; 0x16
     dce:	8f 89       	ldd	r24, Y+23	; 0x17
     dd0:	98 8d       	ldd	r25, Y+24	; 0x18
     dd2:	2b ea       	ldi	r18, 0xAB	; 171
     dd4:	3a ea       	ldi	r19, 0xAA	; 170
     dd6:	4a e2       	ldi	r20, 0x2A	; 42
     dd8:	50 e4       	ldi	r21, 0x40	; 64
     dda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	89 8b       	std	Y+17, r24	; 0x11
     de4:	9a 8b       	std	Y+18, r25	; 0x12
     de6:	ab 8b       	std	Y+19, r26	; 0x13
     de8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     dea:	69 89       	ldd	r22, Y+17	; 0x11
     dec:	7a 89       	ldd	r23, Y+18	; 0x12
     dee:	8b 89       	ldd	r24, Y+19	; 0x13
     df0:	9c 89       	ldd	r25, Y+20	; 0x14
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e8       	ldi	r20, 0x80	; 128
     df8:	5f e3       	ldi	r21, 0x3F	; 63
     dfa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     dfe:	88 23       	and	r24, r24
     e00:	1c f4       	brge	.+6      	; 0xe08 <LCD_enuSendCmnd+0x8a>
		__ticks = 1;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	88 8b       	std	Y+16, r24	; 0x10
     e06:	91 c0       	rjmp	.+290    	; 0xf2a <LCD_enuSendCmnd+0x1ac>
	else if (__tmp > 255)
     e08:	69 89       	ldd	r22, Y+17	; 0x11
     e0a:	7a 89       	ldd	r23, Y+18	; 0x12
     e0c:	8b 89       	ldd	r24, Y+19	; 0x13
     e0e:	9c 89       	ldd	r25, Y+20	; 0x14
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	4f e7       	ldi	r20, 0x7F	; 127
     e16:	53 e4       	ldi	r21, 0x43	; 67
     e18:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e1c:	18 16       	cp	r1, r24
     e1e:	0c f0       	brlt	.+2      	; 0xe22 <LCD_enuSendCmnd+0xa4>
     e20:	7b c0       	rjmp	.+246    	; 0xf18 <LCD_enuSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
     e22:	6d 89       	ldd	r22, Y+21	; 0x15
     e24:	7e 89       	ldd	r23, Y+22	; 0x16
     e26:	8f 89       	ldd	r24, Y+23	; 0x17
     e28:	98 8d       	ldd	r25, Y+24	; 0x18
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	4a e7       	ldi	r20, 0x7A	; 122
     e30:	54 e4       	ldi	r21, 0x44	; 68
     e32:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	8c 87       	std	Y+12, r24	; 0x0c
     e3c:	9d 87       	std	Y+13, r25	; 0x0d
     e3e:	ae 87       	std	Y+14, r26	; 0x0e
     e40:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e42:	6c 85       	ldd	r22, Y+12	; 0x0c
     e44:	7d 85       	ldd	r23, Y+13	; 0x0d
     e46:	8e 85       	ldd	r24, Y+14	; 0x0e
     e48:	9f 85       	ldd	r25, Y+15	; 0x0f
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	4a ef       	ldi	r20, 0xFA	; 250
     e50:	54 e4       	ldi	r21, 0x44	; 68
     e52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	88 87       	std	Y+8, r24	; 0x08
     e5c:	99 87       	std	Y+9, r25	; 0x09
     e5e:	aa 87       	std	Y+10, r26	; 0x0a
     e60:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     e62:	68 85       	ldd	r22, Y+8	; 0x08
     e64:	79 85       	ldd	r23, Y+9	; 0x09
     e66:	8a 85       	ldd	r24, Y+10	; 0x0a
     e68:	9b 85       	ldd	r25, Y+11	; 0x0b
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e8       	ldi	r20, 0x80	; 128
     e70:	5f e3       	ldi	r21, 0x3F	; 63
     e72:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e76:	88 23       	and	r24, r24
     e78:	2c f4       	brge	.+10     	; 0xe84 <LCD_enuSendCmnd+0x106>
		__ticks = 1;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	9f 83       	std	Y+7, r25	; 0x07
     e80:	8e 83       	std	Y+6, r24	; 0x06
     e82:	3f c0       	rjmp	.+126    	; 0xf02 <LCD_enuSendCmnd+0x184>
	else if (__tmp > 65535)
     e84:	68 85       	ldd	r22, Y+8	; 0x08
     e86:	79 85       	ldd	r23, Y+9	; 0x09
     e88:	8a 85       	ldd	r24, Y+10	; 0x0a
     e8a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	3f ef       	ldi	r19, 0xFF	; 255
     e90:	4f e7       	ldi	r20, 0x7F	; 127
     e92:	57 e4       	ldi	r21, 0x47	; 71
     e94:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e98:	18 16       	cp	r1, r24
     e9a:	4c f5       	brge	.+82     	; 0xeee <LCD_enuSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e9c:	6c 85       	ldd	r22, Y+12	; 0x0c
     e9e:	7d 85       	ldd	r23, Y+13	; 0x0d
     ea0:	8e 85       	ldd	r24, Y+14	; 0x0e
     ea2:	9f 85       	ldd	r25, Y+15	; 0x0f
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	40 e2       	ldi	r20, 0x20	; 32
     eaa:	51 e4       	ldi	r21, 0x41	; 65
     eac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	bc 01       	movw	r22, r24
     eb6:	cd 01       	movw	r24, r26
     eb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	9f 83       	std	Y+7, r25	; 0x07
     ec2:	8e 83       	std	Y+6, r24	; 0x06
     ec4:	0f c0       	rjmp	.+30     	; 0xee4 <LCD_enuSendCmnd+0x166>
     ec6:	88 ec       	ldi	r24, 0xC8	; 200
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	9d 83       	std	Y+5, r25	; 0x05
     ecc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <LCD_enuSendCmnd+0x154>
     ed6:	9d 83       	std	Y+5, r25	; 0x05
     ed8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eda:	8e 81       	ldd	r24, Y+6	; 0x06
     edc:	9f 81       	ldd	r25, Y+7	; 0x07
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	9f 83       	std	Y+7, r25	; 0x07
     ee2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee4:	8e 81       	ldd	r24, Y+6	; 0x06
     ee6:	9f 81       	ldd	r25, Y+7	; 0x07
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	69 f7       	brne	.-38     	; 0xec6 <LCD_enuSendCmnd+0x148>
     eec:	24 c0       	rjmp	.+72     	; 0xf36 <LCD_enuSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eee:	68 85       	ldd	r22, Y+8	; 0x08
     ef0:	79 85       	ldd	r23, Y+9	; 0x09
     ef2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ef4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ef6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	9f 83       	std	Y+7, r25	; 0x07
     f00:	8e 83       	std	Y+6, r24	; 0x06
     f02:	8e 81       	ldd	r24, Y+6	; 0x06
     f04:	9f 81       	ldd	r25, Y+7	; 0x07
     f06:	9b 83       	std	Y+3, r25	; 0x03
     f08:	8a 83       	std	Y+2, r24	; 0x02
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	9b 81       	ldd	r25, Y+3	; 0x03
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <LCD_enuSendCmnd+0x190>
     f12:	9b 83       	std	Y+3, r25	; 0x03
     f14:	8a 83       	std	Y+2, r24	; 0x02
     f16:	0f c0       	rjmp	.+30     	; 0xf36 <LCD_enuSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f18:	69 89       	ldd	r22, Y+17	; 0x11
     f1a:	7a 89       	ldd	r23, Y+18	; 0x12
     f1c:	8b 89       	ldd	r24, Y+19	; 0x13
     f1e:	9c 89       	ldd	r25, Y+20	; 0x14
     f20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	88 8b       	std	Y+16, r24	; 0x10
     f2a:	88 89       	ldd	r24, Y+16	; 0x10
     f2c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	8a 95       	dec	r24
     f32:	f1 f7       	brne	.-4      	; 0xf30 <LCD_enuSendCmnd+0x1b2>
     f34:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);

    /* E = 0 */
    DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_u8SetPinValue>

    return STD_OK;
     f40:	80 e0       	ldi	r24, 0x00	; 0
}
     f42:	69 96       	adiw	r28, 0x19	; 25
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	08 95       	ret

00000f54 <LCD_enuInit>:
/************************************************/

 ERROR LCD_enuInit(void)
 {
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	cc 54       	subi	r28, 0x4C	; 76
     f62:	d0 40       	sbci	r29, 0x00	; 0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	fe 01       	movw	r30, r28
     f70:	e7 5b       	subi	r30, 0xB7	; 183
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	ac e0       	ldi	r26, 0x0C	; 12
     f7a:	b2 e4       	ldi	r27, 0x42	; 66
     f7c:	80 83       	st	Z, r24
     f7e:	91 83       	std	Z+1, r25	; 0x01
     f80:	a2 83       	std	Z+2, r26	; 0x02
     f82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f84:	8e 01       	movw	r16, r28
     f86:	0b 5b       	subi	r16, 0xBB	; 187
     f88:	1f 4f       	sbci	r17, 0xFF	; 255
     f8a:	fe 01       	movw	r30, r28
     f8c:	e7 5b       	subi	r30, 0xB7	; 183
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	60 81       	ld	r22, Z
     f92:	71 81       	ldd	r23, Z+1	; 0x01
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	4a ef       	ldi	r20, 0xFA	; 250
     f9e:	54 e4       	ldi	r21, 0x44	; 68
     fa0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	f8 01       	movw	r30, r16
     faa:	80 83       	st	Z, r24
     fac:	91 83       	std	Z+1, r25	; 0x01
     fae:	a2 83       	std	Z+2, r26	; 0x02
     fb0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fb2:	fe 01       	movw	r30, r28
     fb4:	eb 5b       	subi	r30, 0xBB	; 187
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	60 81       	ld	r22, Z
     fba:	71 81       	ldd	r23, Z+1	; 0x01
     fbc:	82 81       	ldd	r24, Z+2	; 0x02
     fbe:	93 81       	ldd	r25, Z+3	; 0x03
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e8       	ldi	r20, 0x80	; 128
     fc6:	5f e3       	ldi	r21, 0x3F	; 63
     fc8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     fcc:	88 23       	and	r24, r24
     fce:	44 f4       	brge	.+16     	; 0xfe0 <LCD_enuInit+0x8c>
		__ticks = 1;
     fd0:	fe 01       	movw	r30, r28
     fd2:	ed 5b       	subi	r30, 0xBD	; 189
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	80 83       	st	Z, r24
     fde:	64 c0       	rjmp	.+200    	; 0x10a8 <LCD_enuInit+0x154>
	else if (__tmp > 65535)
     fe0:	fe 01       	movw	r30, r28
     fe2:	eb 5b       	subi	r30, 0xBB	; 187
     fe4:	ff 4f       	sbci	r31, 0xFF	; 255
     fe6:	60 81       	ld	r22, Z
     fe8:	71 81       	ldd	r23, Z+1	; 0x01
     fea:	82 81       	ldd	r24, Z+2	; 0x02
     fec:	93 81       	ldd	r25, Z+3	; 0x03
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	3f ef       	ldi	r19, 0xFF	; 255
     ff2:	4f e7       	ldi	r20, 0x7F	; 127
     ff4:	57 e4       	ldi	r21, 0x47	; 71
     ff6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     ffa:	18 16       	cp	r1, r24
     ffc:	0c f0       	brlt	.+2      	; 0x1000 <LCD_enuInit+0xac>
     ffe:	43 c0       	rjmp	.+134    	; 0x1086 <LCD_enuInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1000:	fe 01       	movw	r30, r28
    1002:	e7 5b       	subi	r30, 0xB7	; 183
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	60 81       	ld	r22, Z
    1008:	71 81       	ldd	r23, Z+1	; 0x01
    100a:	82 81       	ldd	r24, Z+2	; 0x02
    100c:	93 81       	ldd	r25, Z+3	; 0x03
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e2       	ldi	r20, 0x20	; 32
    1014:	51 e4       	ldi	r21, 0x41	; 65
    1016:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	8e 01       	movw	r16, r28
    1020:	0d 5b       	subi	r16, 0xBD	; 189
    1022:	1f 4f       	sbci	r17, 0xFF	; 255
    1024:	bc 01       	movw	r22, r24
    1026:	cd 01       	movw	r24, r26
    1028:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	f8 01       	movw	r30, r16
    1032:	91 83       	std	Z+1, r25	; 0x01
    1034:	80 83       	st	Z, r24
    1036:	1f c0       	rjmp	.+62     	; 0x1076 <LCD_enuInit+0x122>
    1038:	fe 01       	movw	r30, r28
    103a:	ef 5b       	subi	r30, 0xBF	; 191
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	88 ec       	ldi	r24, 0xC8	; 200
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	91 83       	std	Z+1, r25	; 0x01
    1044:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1046:	fe 01       	movw	r30, r28
    1048:	ef 5b       	subi	r30, 0xBF	; 191
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	80 81       	ld	r24, Z
    104e:	91 81       	ldd	r25, Z+1	; 0x01
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	f1 f7       	brne	.-4      	; 0x1050 <LCD_enuInit+0xfc>
    1054:	fe 01       	movw	r30, r28
    1056:	ef 5b       	subi	r30, 0xBF	; 191
    1058:	ff 4f       	sbci	r31, 0xFF	; 255
    105a:	91 83       	std	Z+1, r25	; 0x01
    105c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105e:	de 01       	movw	r26, r28
    1060:	ad 5b       	subi	r26, 0xBD	; 189
    1062:	bf 4f       	sbci	r27, 0xFF	; 255
    1064:	fe 01       	movw	r30, r28
    1066:	ed 5b       	subi	r30, 0xBD	; 189
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	80 81       	ld	r24, Z
    106c:	91 81       	ldd	r25, Z+1	; 0x01
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	11 96       	adiw	r26, 0x01	; 1
    1072:	9c 93       	st	X, r25
    1074:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1076:	fe 01       	movw	r30, r28
    1078:	ed 5b       	subi	r30, 0xBD	; 189
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	80 81       	ld	r24, Z
    107e:	91 81       	ldd	r25, Z+1	; 0x01
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	d1 f6       	brne	.-76     	; 0x1038 <LCD_enuInit+0xe4>
    1084:	24 c0       	rjmp	.+72     	; 0x10ce <LCD_enuInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1086:	8e 01       	movw	r16, r28
    1088:	0d 5b       	subi	r16, 0xBD	; 189
    108a:	1f 4f       	sbci	r17, 0xFF	; 255
    108c:	fe 01       	movw	r30, r28
    108e:	eb 5b       	subi	r30, 0xBB	; 187
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	60 81       	ld	r22, Z
    1094:	71 81       	ldd	r23, Z+1	; 0x01
    1096:	82 81       	ldd	r24, Z+2	; 0x02
    1098:	93 81       	ldd	r25, Z+3	; 0x03
    109a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	f8 01       	movw	r30, r16
    10a4:	91 83       	std	Z+1, r25	; 0x01
    10a6:	80 83       	st	Z, r24
    10a8:	fe 01       	movw	r30, r28
    10aa:	ed 5b       	subi	r30, 0xBD	; 189
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	80 81       	ld	r24, Z
    10b0:	91 81       	ldd	r25, Z+1	; 0x01
    10b2:	fe 01       	movw	r30, r28
    10b4:	ff 96       	adiw	r30, 0x3f	; 63
    10b6:	91 83       	std	Z+1, r25	; 0x01
    10b8:	80 83       	st	Z, r24
    10ba:	fe 01       	movw	r30, r28
    10bc:	ff 96       	adiw	r30, 0x3f	; 63
    10be:	80 81       	ld	r24, Z
    10c0:	91 81       	ldd	r25, Z+1	; 0x01
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <LCD_enuInit+0x16e>
    10c6:	fe 01       	movw	r30, r28
    10c8:	ff 96       	adiw	r30, 0x3f	; 63
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	80 83       	st	Z, r24
 	_delay_ms(35);
 	LCD_enuSendCmnd(FUN_SET);
    10ce:	88 e3       	ldi	r24, 0x38	; 56
    10d0:	0e 94 bf 06 	call	0xd7e	; 0xd7e <LCD_enuSendCmnd>
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a0 e2       	ldi	r26, 0x20	; 32
    10da:	b2 e4       	ldi	r27, 0x42	; 66
    10dc:	8b af       	std	Y+59, r24	; 0x3b
    10de:	9c af       	std	Y+60, r25	; 0x3c
    10e0:	ad af       	std	Y+61, r26	; 0x3d
    10e2:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10e4:	6b ad       	ldd	r22, Y+59	; 0x3b
    10e6:	7c ad       	ldd	r23, Y+60	; 0x3c
    10e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    10ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    10ec:	2b ea       	ldi	r18, 0xAB	; 171
    10ee:	3a ea       	ldi	r19, 0xAA	; 170
    10f0:	4a e2       	ldi	r20, 0x2A	; 42
    10f2:	50 e4       	ldi	r21, 0x40	; 64
    10f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	8f ab       	std	Y+55, r24	; 0x37
    10fe:	98 af       	std	Y+56, r25	; 0x38
    1100:	a9 af       	std	Y+57, r26	; 0x39
    1102:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1104:	6f a9       	ldd	r22, Y+55	; 0x37
    1106:	78 ad       	ldd	r23, Y+56	; 0x38
    1108:	89 ad       	ldd	r24, Y+57	; 0x39
    110a:	9a ad       	ldd	r25, Y+58	; 0x3a
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e8       	ldi	r20, 0x80	; 128
    1112:	5f e3       	ldi	r21, 0x3F	; 63
    1114:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1118:	88 23       	and	r24, r24
    111a:	1c f4       	brge	.+6      	; 0x1122 <LCD_enuInit+0x1ce>
		__ticks = 1;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	8e ab       	std	Y+54, r24	; 0x36
    1120:	91 c0       	rjmp	.+290    	; 0x1244 <LCD_enuInit+0x2f0>
	else if (__tmp > 255)
    1122:	6f a9       	ldd	r22, Y+55	; 0x37
    1124:	78 ad       	ldd	r23, Y+56	; 0x38
    1126:	89 ad       	ldd	r24, Y+57	; 0x39
    1128:	9a ad       	ldd	r25, Y+58	; 0x3a
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	4f e7       	ldi	r20, 0x7F	; 127
    1130:	53 e4       	ldi	r21, 0x43	; 67
    1132:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1136:	18 16       	cp	r1, r24
    1138:	0c f0       	brlt	.+2      	; 0x113c <LCD_enuInit+0x1e8>
    113a:	7b c0       	rjmp	.+246    	; 0x1232 <LCD_enuInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    113c:	6b ad       	ldd	r22, Y+59	; 0x3b
    113e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1140:	8d ad       	ldd	r24, Y+61	; 0x3d
    1142:	9e ad       	ldd	r25, Y+62	; 0x3e
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	4a e7       	ldi	r20, 0x7A	; 122
    114a:	54 e4       	ldi	r21, 0x44	; 68
    114c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	8a ab       	std	Y+50, r24	; 0x32
    1156:	9b ab       	std	Y+51, r25	; 0x33
    1158:	ac ab       	std	Y+52, r26	; 0x34
    115a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115c:	6a a9       	ldd	r22, Y+50	; 0x32
    115e:	7b a9       	ldd	r23, Y+51	; 0x33
    1160:	8c a9       	ldd	r24, Y+52	; 0x34
    1162:	9d a9       	ldd	r25, Y+53	; 0x35
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	4a ef       	ldi	r20, 0xFA	; 250
    116a:	54 e4       	ldi	r21, 0x44	; 68
    116c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	8e a7       	std	Y+46, r24	; 0x2e
    1176:	9f a7       	std	Y+47, r25	; 0x2f
    1178:	a8 ab       	std	Y+48, r26	; 0x30
    117a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    117c:	6e a5       	ldd	r22, Y+46	; 0x2e
    117e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1180:	88 a9       	ldd	r24, Y+48	; 0x30
    1182:	99 a9       	ldd	r25, Y+49	; 0x31
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e8       	ldi	r20, 0x80	; 128
    118a:	5f e3       	ldi	r21, 0x3F	; 63
    118c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1190:	88 23       	and	r24, r24
    1192:	2c f4       	brge	.+10     	; 0x119e <LCD_enuInit+0x24a>
		__ticks = 1;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9d a7       	std	Y+45, r25	; 0x2d
    119a:	8c a7       	std	Y+44, r24	; 0x2c
    119c:	3f c0       	rjmp	.+126    	; 0x121c <LCD_enuInit+0x2c8>
	else if (__tmp > 65535)
    119e:	6e a5       	ldd	r22, Y+46	; 0x2e
    11a0:	7f a5       	ldd	r23, Y+47	; 0x2f
    11a2:	88 a9       	ldd	r24, Y+48	; 0x30
    11a4:	99 a9       	ldd	r25, Y+49	; 0x31
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	3f ef       	ldi	r19, 0xFF	; 255
    11aa:	4f e7       	ldi	r20, 0x7F	; 127
    11ac:	57 e4       	ldi	r21, 0x47	; 71
    11ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11b2:	18 16       	cp	r1, r24
    11b4:	4c f5       	brge	.+82     	; 0x1208 <LCD_enuInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b6:	6a a9       	ldd	r22, Y+50	; 0x32
    11b8:	7b a9       	ldd	r23, Y+51	; 0x33
    11ba:	8c a9       	ldd	r24, Y+52	; 0x34
    11bc:	9d a9       	ldd	r25, Y+53	; 0x35
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e2       	ldi	r20, 0x20	; 32
    11c4:	51 e4       	ldi	r21, 0x41	; 65
    11c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	bc 01       	movw	r22, r24
    11d0:	cd 01       	movw	r24, r26
    11d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	9d a7       	std	Y+45, r25	; 0x2d
    11dc:	8c a7       	std	Y+44, r24	; 0x2c
    11de:	0f c0       	rjmp	.+30     	; 0x11fe <LCD_enuInit+0x2aa>
    11e0:	88 ec       	ldi	r24, 0xC8	; 200
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	9b a7       	std	Y+43, r25	; 0x2b
    11e6:	8a a7       	std	Y+42, r24	; 0x2a
    11e8:	8a a5       	ldd	r24, Y+42	; 0x2a
    11ea:	9b a5       	ldd	r25, Y+43	; 0x2b
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <LCD_enuInit+0x298>
    11f0:	9b a7       	std	Y+43, r25	; 0x2b
    11f2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f4:	8c a5       	ldd	r24, Y+44	; 0x2c
    11f6:	9d a5       	ldd	r25, Y+45	; 0x2d
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	9d a7       	std	Y+45, r25	; 0x2d
    11fc:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fe:	8c a5       	ldd	r24, Y+44	; 0x2c
    1200:	9d a5       	ldd	r25, Y+45	; 0x2d
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	69 f7       	brne	.-38     	; 0x11e0 <LCD_enuInit+0x28c>
    1206:	24 c0       	rjmp	.+72     	; 0x1250 <LCD_enuInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1208:	6e a5       	ldd	r22, Y+46	; 0x2e
    120a:	7f a5       	ldd	r23, Y+47	; 0x2f
    120c:	88 a9       	ldd	r24, Y+48	; 0x30
    120e:	99 a9       	ldd	r25, Y+49	; 0x31
    1210:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	9d a7       	std	Y+45, r25	; 0x2d
    121a:	8c a7       	std	Y+44, r24	; 0x2c
    121c:	8c a5       	ldd	r24, Y+44	; 0x2c
    121e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1220:	99 a7       	std	Y+41, r25	; 0x29
    1222:	88 a7       	std	Y+40, r24	; 0x28
    1224:	88 a5       	ldd	r24, Y+40	; 0x28
    1226:	99 a5       	ldd	r25, Y+41	; 0x29
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	f1 f7       	brne	.-4      	; 0x1228 <LCD_enuInit+0x2d4>
    122c:	99 a7       	std	Y+41, r25	; 0x29
    122e:	88 a7       	std	Y+40, r24	; 0x28
    1230:	0f c0       	rjmp	.+30     	; 0x1250 <LCD_enuInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1232:	6f a9       	ldd	r22, Y+55	; 0x37
    1234:	78 ad       	ldd	r23, Y+56	; 0x38
    1236:	89 ad       	ldd	r24, Y+57	; 0x39
    1238:	9a ad       	ldd	r25, Y+58	; 0x3a
    123a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	8e ab       	std	Y+54, r24	; 0x36
    1244:	8e a9       	ldd	r24, Y+54	; 0x36
    1246:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1248:	8f a1       	ldd	r24, Y+39	; 0x27
    124a:	8a 95       	dec	r24
    124c:	f1 f7       	brne	.-4      	; 0x124a <LCD_enuInit+0x2f6>
    124e:	8f a3       	std	Y+39, r24	; 0x27
 	_delay_us(40);
 	LCD_enuSendCmnd(DISPLAY_ON_OFF);
    1250:	8f e0       	ldi	r24, 0x0F	; 15
    1252:	0e 94 bf 06 	call	0xd7e	; 0xd7e <LCD_enuSendCmnd>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a0 e2       	ldi	r26, 0x20	; 32
    125c:	b2 e4       	ldi	r27, 0x42	; 66
    125e:	8b a3       	std	Y+35, r24	; 0x23
    1260:	9c a3       	std	Y+36, r25	; 0x24
    1262:	ad a3       	std	Y+37, r26	; 0x25
    1264:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1266:	6b a1       	ldd	r22, Y+35	; 0x23
    1268:	7c a1       	ldd	r23, Y+36	; 0x24
    126a:	8d a1       	ldd	r24, Y+37	; 0x25
    126c:	9e a1       	ldd	r25, Y+38	; 0x26
    126e:	2b ea       	ldi	r18, 0xAB	; 171
    1270:	3a ea       	ldi	r19, 0xAA	; 170
    1272:	4a e2       	ldi	r20, 0x2A	; 42
    1274:	50 e4       	ldi	r21, 0x40	; 64
    1276:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	8f 8f       	std	Y+31, r24	; 0x1f
    1280:	98 a3       	std	Y+32, r25	; 0x20
    1282:	a9 a3       	std	Y+33, r26	; 0x21
    1284:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1286:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1288:	78 a1       	ldd	r23, Y+32	; 0x20
    128a:	89 a1       	ldd	r24, Y+33	; 0x21
    128c:	9a a1       	ldd	r25, Y+34	; 0x22
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e8       	ldi	r20, 0x80	; 128
    1294:	5f e3       	ldi	r21, 0x3F	; 63
    1296:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    129a:	88 23       	and	r24, r24
    129c:	1c f4       	brge	.+6      	; 0x12a4 <LCD_enuInit+0x350>
		__ticks = 1;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	8e 8f       	std	Y+30, r24	; 0x1e
    12a2:	91 c0       	rjmp	.+290    	; 0x13c6 <LCD_enuInit+0x472>
	else if (__tmp > 255)
    12a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    12a6:	78 a1       	ldd	r23, Y+32	; 0x20
    12a8:	89 a1       	ldd	r24, Y+33	; 0x21
    12aa:	9a a1       	ldd	r25, Y+34	; 0x22
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	4f e7       	ldi	r20, 0x7F	; 127
    12b2:	53 e4       	ldi	r21, 0x43	; 67
    12b4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12b8:	18 16       	cp	r1, r24
    12ba:	0c f0       	brlt	.+2      	; 0x12be <LCD_enuInit+0x36a>
    12bc:	7b c0       	rjmp	.+246    	; 0x13b4 <LCD_enuInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    12be:	6b a1       	ldd	r22, Y+35	; 0x23
    12c0:	7c a1       	ldd	r23, Y+36	; 0x24
    12c2:	8d a1       	ldd	r24, Y+37	; 0x25
    12c4:	9e a1       	ldd	r25, Y+38	; 0x26
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	4a e7       	ldi	r20, 0x7A	; 122
    12cc:	54 e4       	ldi	r21, 0x44	; 68
    12ce:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	8a 8f       	std	Y+26, r24	; 0x1a
    12d8:	9b 8f       	std	Y+27, r25	; 0x1b
    12da:	ac 8f       	std	Y+28, r26	; 0x1c
    12dc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12de:	6a 8d       	ldd	r22, Y+26	; 0x1a
    12e0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    12e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12e4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	4a ef       	ldi	r20, 0xFA	; 250
    12ec:	54 e4       	ldi	r21, 0x44	; 68
    12ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	8e 8b       	std	Y+22, r24	; 0x16
    12f8:	9f 8b       	std	Y+23, r25	; 0x17
    12fa:	a8 8f       	std	Y+24, r26	; 0x18
    12fc:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    12fe:	6e 89       	ldd	r22, Y+22	; 0x16
    1300:	7f 89       	ldd	r23, Y+23	; 0x17
    1302:	88 8d       	ldd	r24, Y+24	; 0x18
    1304:	99 8d       	ldd	r25, Y+25	; 0x19
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e8       	ldi	r20, 0x80	; 128
    130c:	5f e3       	ldi	r21, 0x3F	; 63
    130e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1312:	88 23       	and	r24, r24
    1314:	2c f4       	brge	.+10     	; 0x1320 <LCD_enuInit+0x3cc>
		__ticks = 1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	9d 8b       	std	Y+21, r25	; 0x15
    131c:	8c 8b       	std	Y+20, r24	; 0x14
    131e:	3f c0       	rjmp	.+126    	; 0x139e <LCD_enuInit+0x44a>
	else if (__tmp > 65535)
    1320:	6e 89       	ldd	r22, Y+22	; 0x16
    1322:	7f 89       	ldd	r23, Y+23	; 0x17
    1324:	88 8d       	ldd	r24, Y+24	; 0x18
    1326:	99 8d       	ldd	r25, Y+25	; 0x19
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	3f ef       	ldi	r19, 0xFF	; 255
    132c:	4f e7       	ldi	r20, 0x7F	; 127
    132e:	57 e4       	ldi	r21, 0x47	; 71
    1330:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1334:	18 16       	cp	r1, r24
    1336:	4c f5       	brge	.+82     	; 0x138a <LCD_enuInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1338:	6a 8d       	ldd	r22, Y+26	; 0x1a
    133a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    133c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    133e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e2       	ldi	r20, 0x20	; 32
    1346:	51 e4       	ldi	r21, 0x41	; 65
    1348:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9d 8b       	std	Y+21, r25	; 0x15
    135e:	8c 8b       	std	Y+20, r24	; 0x14
    1360:	0f c0       	rjmp	.+30     	; 0x1380 <LCD_enuInit+0x42c>
    1362:	88 ec       	ldi	r24, 0xC8	; 200
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9b 8b       	std	Y+19, r25	; 0x13
    1368:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    136a:	8a 89       	ldd	r24, Y+18	; 0x12
    136c:	9b 89       	ldd	r25, Y+19	; 0x13
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <LCD_enuInit+0x41a>
    1372:	9b 8b       	std	Y+19, r25	; 0x13
    1374:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1376:	8c 89       	ldd	r24, Y+20	; 0x14
    1378:	9d 89       	ldd	r25, Y+21	; 0x15
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	9d 8b       	std	Y+21, r25	; 0x15
    137e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1380:	8c 89       	ldd	r24, Y+20	; 0x14
    1382:	9d 89       	ldd	r25, Y+21	; 0x15
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	69 f7       	brne	.-38     	; 0x1362 <LCD_enuInit+0x40e>
    1388:	24 c0       	rjmp	.+72     	; 0x13d2 <LCD_enuInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138a:	6e 89       	ldd	r22, Y+22	; 0x16
    138c:	7f 89       	ldd	r23, Y+23	; 0x17
    138e:	88 8d       	ldd	r24, Y+24	; 0x18
    1390:	99 8d       	ldd	r25, Y+25	; 0x19
    1392:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	9d 8b       	std	Y+21, r25	; 0x15
    139c:	8c 8b       	std	Y+20, r24	; 0x14
    139e:	8c 89       	ldd	r24, Y+20	; 0x14
    13a0:	9d 89       	ldd	r25, Y+21	; 0x15
    13a2:	99 8b       	std	Y+17, r25	; 0x11
    13a4:	88 8b       	std	Y+16, r24	; 0x10
    13a6:	88 89       	ldd	r24, Y+16	; 0x10
    13a8:	99 89       	ldd	r25, Y+17	; 0x11
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <LCD_enuInit+0x456>
    13ae:	99 8b       	std	Y+17, r25	; 0x11
    13b0:	88 8b       	std	Y+16, r24	; 0x10
    13b2:	0f c0       	rjmp	.+30     	; 0x13d2 <LCD_enuInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13b4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    13b6:	78 a1       	ldd	r23, Y+32	; 0x20
    13b8:	89 a1       	ldd	r24, Y+33	; 0x21
    13ba:	9a a1       	ldd	r25, Y+34	; 0x22
    13bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	8e 8f       	std	Y+30, r24	; 0x1e
    13c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13c8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    13cc:	8a 95       	dec	r24
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <LCD_enuInit+0x478>
    13d0:	8f 87       	std	Y+15, r24	; 0x0f
 	_delay_us(40);
 	LCD_enuSendCmnd(DISPLAY_CLEAR);
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <LCD_enuSendCmnd>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	a0 e0       	ldi	r26, 0x00	; 0
    13de:	b0 e4       	ldi	r27, 0x40	; 64
    13e0:	8b 87       	std	Y+11, r24	; 0x0b
    13e2:	9c 87       	std	Y+12, r25	; 0x0c
    13e4:	ad 87       	std	Y+13, r26	; 0x0d
    13e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	4a ef       	ldi	r20, 0xFA	; 250
    13f6:	54 e4       	ldi	r21, 0x44	; 68
    13f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	8f 83       	std	Y+7, r24	; 0x07
    1402:	98 87       	std	Y+8, r25	; 0x08
    1404:	a9 87       	std	Y+9, r26	; 0x09
    1406:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1408:	6f 81       	ldd	r22, Y+7	; 0x07
    140a:	78 85       	ldd	r23, Y+8	; 0x08
    140c:	89 85       	ldd	r24, Y+9	; 0x09
    140e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e8       	ldi	r20, 0x80	; 128
    1416:	5f e3       	ldi	r21, 0x3F	; 63
    1418:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    141c:	88 23       	and	r24, r24
    141e:	2c f4       	brge	.+10     	; 0x142a <LCD_enuInit+0x4d6>
		__ticks = 1;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	9e 83       	std	Y+6, r25	; 0x06
    1426:	8d 83       	std	Y+5, r24	; 0x05
    1428:	3f c0       	rjmp	.+126    	; 0x14a8 <LCD_enuInit+0x554>
	else if (__tmp > 65535)
    142a:	6f 81       	ldd	r22, Y+7	; 0x07
    142c:	78 85       	ldd	r23, Y+8	; 0x08
    142e:	89 85       	ldd	r24, Y+9	; 0x09
    1430:	9a 85       	ldd	r25, Y+10	; 0x0a
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	3f ef       	ldi	r19, 0xFF	; 255
    1436:	4f e7       	ldi	r20, 0x7F	; 127
    1438:	57 e4       	ldi	r21, 0x47	; 71
    143a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    143e:	18 16       	cp	r1, r24
    1440:	4c f5       	brge	.+82     	; 0x1494 <LCD_enuInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1442:	6b 85       	ldd	r22, Y+11	; 0x0b
    1444:	7c 85       	ldd	r23, Y+12	; 0x0c
    1446:	8d 85       	ldd	r24, Y+13	; 0x0d
    1448:	9e 85       	ldd	r25, Y+14	; 0x0e
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e2       	ldi	r20, 0x20	; 32
    1450:	51 e4       	ldi	r21, 0x41	; 65
    1452:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	bc 01       	movw	r22, r24
    145c:	cd 01       	movw	r24, r26
    145e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	9e 83       	std	Y+6, r25	; 0x06
    1468:	8d 83       	std	Y+5, r24	; 0x05
    146a:	0f c0       	rjmp	.+30     	; 0x148a <LCD_enuInit+0x536>
    146c:	88 ec       	ldi	r24, 0xC8	; 200
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	9c 83       	std	Y+4, r25	; 0x04
    1472:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <LCD_enuInit+0x524>
    147c:	9c 83       	std	Y+4, r25	; 0x04
    147e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	9e 81       	ldd	r25, Y+6	; 0x06
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	9e 83       	std	Y+6, r25	; 0x06
    1488:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	69 f7       	brne	.-38     	; 0x146c <LCD_enuInit+0x518>
    1492:	14 c0       	rjmp	.+40     	; 0x14bc <LCD_enuInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1494:	6f 81       	ldd	r22, Y+7	; 0x07
    1496:	78 85       	ldd	r23, Y+8	; 0x08
    1498:	89 85       	ldd	r24, Y+9	; 0x09
    149a:	9a 85       	ldd	r25, Y+10	; 0x0a
    149c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	9e 83       	std	Y+6, r25	; 0x06
    14a6:	8d 83       	std	Y+5, r24	; 0x05
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	9a 83       	std	Y+2, r25	; 0x02
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	9a 81       	ldd	r25, Y+2	; 0x02
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <LCD_enuInit+0x560>
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01
 	_delay_ms(2);
 	LCD_enuSendCmnd(ENTRY_MOOD_SET);
    14bc:	86 e0       	ldi	r24, 0x06	; 6
    14be:	0e 94 bf 06 	call	0xd7e	; 0xd7e <LCD_enuSendCmnd>
 	return STD_OK;
    14c2:	80 e0       	ldi	r24, 0x00	; 0

  }
    14c4:	c4 5b       	subi	r28, 0xB4	; 180
    14c6:	df 4f       	sbci	r29, 0xFF	; 255
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	08 95       	ret

000014dc <LCD_enuSendChar>:
/************************************************/

 ERROR LCD_enuSendChar(u8 Copy_u8Char)
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	69 97       	sbiw	r28, 0x19	; 25
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	89 8f       	std	Y+25, r24	; 0x19
	/* RS = 1 */
       DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	62 e0       	ldi	r22, 0x02	; 2
    14f6:	41 e0       	ldi	r20, 0x01	; 1
    14f8:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_u8SetPinValue>

    /* RW = 0 */
      DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	61 e0       	ldi	r22, 0x01	; 1
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_u8SetPinValue>
   
    /* Write char */
      DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    1506:	83 e0       	ldi	r24, 0x03	; 3
    1508:	69 8d       	ldd	r22, Y+25	; 0x19
    150a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <DIO_u8SetPortValue>

    /* E = 1 */
      DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	41 e0       	ldi	r20, 0x01	; 1
    1514:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_u8SetPinValue>
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	a0 e8       	ldi	r26, 0x80	; 128
    151e:	bf e3       	ldi	r27, 0x3F	; 63
    1520:	8d 8b       	std	Y+21, r24	; 0x15
    1522:	9e 8b       	std	Y+22, r25	; 0x16
    1524:	af 8b       	std	Y+23, r26	; 0x17
    1526:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1528:	6d 89       	ldd	r22, Y+21	; 0x15
    152a:	7e 89       	ldd	r23, Y+22	; 0x16
    152c:	8f 89       	ldd	r24, Y+23	; 0x17
    152e:	98 8d       	ldd	r25, Y+24	; 0x18
    1530:	2b ea       	ldi	r18, 0xAB	; 171
    1532:	3a ea       	ldi	r19, 0xAA	; 170
    1534:	4a e2       	ldi	r20, 0x2A	; 42
    1536:	50 e4       	ldi	r21, 0x40	; 64
    1538:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	89 8b       	std	Y+17, r24	; 0x11
    1542:	9a 8b       	std	Y+18, r25	; 0x12
    1544:	ab 8b       	std	Y+19, r26	; 0x13
    1546:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1548:	69 89       	ldd	r22, Y+17	; 0x11
    154a:	7a 89       	ldd	r23, Y+18	; 0x12
    154c:	8b 89       	ldd	r24, Y+19	; 0x13
    154e:	9c 89       	ldd	r25, Y+20	; 0x14
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e8       	ldi	r20, 0x80	; 128
    1556:	5f e3       	ldi	r21, 0x3F	; 63
    1558:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    155c:	88 23       	and	r24, r24
    155e:	1c f4       	brge	.+6      	; 0x1566 <LCD_enuSendChar+0x8a>
		__ticks = 1;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	88 8b       	std	Y+16, r24	; 0x10
    1564:	91 c0       	rjmp	.+290    	; 0x1688 <LCD_enuSendChar+0x1ac>
	else if (__tmp > 255)
    1566:	69 89       	ldd	r22, Y+17	; 0x11
    1568:	7a 89       	ldd	r23, Y+18	; 0x12
    156a:	8b 89       	ldd	r24, Y+19	; 0x13
    156c:	9c 89       	ldd	r25, Y+20	; 0x14
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	4f e7       	ldi	r20, 0x7F	; 127
    1574:	53 e4       	ldi	r21, 0x43	; 67
    1576:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    157a:	18 16       	cp	r1, r24
    157c:	0c f0       	brlt	.+2      	; 0x1580 <LCD_enuSendChar+0xa4>
    157e:	7b c0       	rjmp	.+246    	; 0x1676 <LCD_enuSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1580:	6d 89       	ldd	r22, Y+21	; 0x15
    1582:	7e 89       	ldd	r23, Y+22	; 0x16
    1584:	8f 89       	ldd	r24, Y+23	; 0x17
    1586:	98 8d       	ldd	r25, Y+24	; 0x18
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	4a e7       	ldi	r20, 0x7A	; 122
    158e:	54 e4       	ldi	r21, 0x44	; 68
    1590:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	8c 87       	std	Y+12, r24	; 0x0c
    159a:	9d 87       	std	Y+13, r25	; 0x0d
    159c:	ae 87       	std	Y+14, r26	; 0x0e
    159e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    15a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    15a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    15a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	4a ef       	ldi	r20, 0xFA	; 250
    15ae:	54 e4       	ldi	r21, 0x44	; 68
    15b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	88 87       	std	Y+8, r24	; 0x08
    15ba:	99 87       	std	Y+9, r25	; 0x09
    15bc:	aa 87       	std	Y+10, r26	; 0x0a
    15be:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    15c0:	68 85       	ldd	r22, Y+8	; 0x08
    15c2:	79 85       	ldd	r23, Y+9	; 0x09
    15c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    15c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e8       	ldi	r20, 0x80	; 128
    15ce:	5f e3       	ldi	r21, 0x3F	; 63
    15d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15d4:	88 23       	and	r24, r24
    15d6:	2c f4       	brge	.+10     	; 0x15e2 <LCD_enuSendChar+0x106>
		__ticks = 1;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	9f 83       	std	Y+7, r25	; 0x07
    15de:	8e 83       	std	Y+6, r24	; 0x06
    15e0:	3f c0       	rjmp	.+126    	; 0x1660 <LCD_enuSendChar+0x184>
	else if (__tmp > 65535)
    15e2:	68 85       	ldd	r22, Y+8	; 0x08
    15e4:	79 85       	ldd	r23, Y+9	; 0x09
    15e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    15e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	3f ef       	ldi	r19, 0xFF	; 255
    15ee:	4f e7       	ldi	r20, 0x7F	; 127
    15f0:	57 e4       	ldi	r21, 0x47	; 71
    15f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15f6:	18 16       	cp	r1, r24
    15f8:	4c f5       	brge	.+82     	; 0x164c <LCD_enuSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    15fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    15fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1600:	9f 85       	ldd	r25, Y+15	; 0x0f
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e2       	ldi	r20, 0x20	; 32
    1608:	51 e4       	ldi	r21, 0x41	; 65
    160a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	bc 01       	movw	r22, r24
    1614:	cd 01       	movw	r24, r26
    1616:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	9f 83       	std	Y+7, r25	; 0x07
    1620:	8e 83       	std	Y+6, r24	; 0x06
    1622:	0f c0       	rjmp	.+30     	; 0x1642 <LCD_enuSendChar+0x166>
    1624:	88 ec       	ldi	r24, 0xC8	; 200
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	9d 83       	std	Y+5, r25	; 0x05
    162a:	8c 83       	std	Y+4, r24	; 0x04
    162c:	8c 81       	ldd	r24, Y+4	; 0x04
    162e:	9d 81       	ldd	r25, Y+5	; 0x05
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <LCD_enuSendChar+0x154>
    1634:	9d 83       	std	Y+5, r25	; 0x05
    1636:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1638:	8e 81       	ldd	r24, Y+6	; 0x06
    163a:	9f 81       	ldd	r25, Y+7	; 0x07
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	9f 83       	std	Y+7, r25	; 0x07
    1640:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1642:	8e 81       	ldd	r24, Y+6	; 0x06
    1644:	9f 81       	ldd	r25, Y+7	; 0x07
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	69 f7       	brne	.-38     	; 0x1624 <LCD_enuSendChar+0x148>
    164a:	24 c0       	rjmp	.+72     	; 0x1694 <LCD_enuSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164c:	68 85       	ldd	r22, Y+8	; 0x08
    164e:	79 85       	ldd	r23, Y+9	; 0x09
    1650:	8a 85       	ldd	r24, Y+10	; 0x0a
    1652:	9b 85       	ldd	r25, Y+11	; 0x0b
    1654:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	9f 83       	std	Y+7, r25	; 0x07
    165e:	8e 83       	std	Y+6, r24	; 0x06
    1660:	8e 81       	ldd	r24, Y+6	; 0x06
    1662:	9f 81       	ldd	r25, Y+7	; 0x07
    1664:	9b 83       	std	Y+3, r25	; 0x03
    1666:	8a 83       	std	Y+2, r24	; 0x02
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	9b 81       	ldd	r25, Y+3	; 0x03
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <LCD_enuSendChar+0x190>
    1670:	9b 83       	std	Y+3, r25	; 0x03
    1672:	8a 83       	std	Y+2, r24	; 0x02
    1674:	0f c0       	rjmp	.+30     	; 0x1694 <LCD_enuSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1676:	69 89       	ldd	r22, Y+17	; 0x11
    1678:	7a 89       	ldd	r23, Y+18	; 0x12
    167a:	8b 89       	ldd	r24, Y+19	; 0x13
    167c:	9c 89       	ldd	r25, Y+20	; 0x14
    167e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	88 8b       	std	Y+16, r24	; 0x10
    1688:	88 89       	ldd	r24, Y+16	; 0x10
    168a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	8a 95       	dec	r24
    1690:	f1 f7       	brne	.-4      	; 0x168e <LCD_enuSendChar+0x1b2>
    1692:	89 83       	std	Y+1, r24	; 0x01
      _delay_us(1);

    /* E = 0 */
      DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	40 e0       	ldi	r20, 0x00	; 0
    169a:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <DIO_u8SetPinValue>

    return STD_OK;
    169e:	80 e0       	ldi	r24, 0x00	; 0

}
    16a0:	69 96       	adiw	r28, 0x19	; 25
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <LCD_enuSetAc>:
/***************************************************/
 ERROR LCD_enuSetAc(u8 Copy_u8LineNum,u8 Copy_u8Location)
 	 {
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <LCD_enuSetAc+0x6>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <LCD_enuSetAc+0x8>
    16ba:	0f 92       	push	r0
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	6a 83       	std	Y+2, r22	; 0x02
	 if(Copy_u8Location<=39){
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	88 32       	cpi	r24, 0x28	; 40
    16c8:	f8 f4       	brcc	.+62     	; 0x1708 <LCD_enuSetAc+0x56>
	     switch (Copy_u8LineNum)
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	3d 83       	std	Y+5, r19	; 0x05
    16d2:	2c 83       	std	Y+4, r18	; 0x04
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	9d 81       	ldd	r25, Y+5	; 0x05
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	91 05       	cpc	r25, r1
    16dc:	31 f0       	breq	.+12     	; 0x16ea <LCD_enuSetAc+0x38>
    16de:	2c 81       	ldd	r18, Y+4	; 0x04
    16e0:	3d 81       	ldd	r19, Y+5	; 0x05
    16e2:	22 30       	cpi	r18, 0x02	; 2
    16e4:	31 05       	cpc	r19, r1
    16e6:	31 f0       	breq	.+12     	; 0x16f4 <LCD_enuSetAc+0x42>
    16e8:	0a c0       	rjmp	.+20     	; 0x16fe <LCD_enuSetAc+0x4c>
	     {
	     case 1:LCD_enuSendCmnd(0x80 + Copy_u8Location); break;
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	80 58       	subi	r24, 0x80	; 128
    16ee:	0e 94 bf 06 	call	0xd7e	; 0xd7e <LCD_enuSendCmnd>
    16f2:	08 c0       	rjmp	.+16     	; 0x1704 <LCD_enuSetAc+0x52>
	     case 2 :LCD_enuSendCmnd(0xC0 + Copy_u8Location); break;
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	80 54       	subi	r24, 0x40	; 64
    16f8:	0e 94 bf 06 	call	0xd7e	; 0xd7e <LCD_enuSendCmnd>
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <LCD_enuSetAc+0x52>
	     default:return STD_NOTOK;break;
    16fe:	31 e0       	ldi	r19, 0x01	; 1
    1700:	3b 83       	std	Y+3, r19	; 0x03
    1702:	04 c0       	rjmp	.+8      	; 0x170c <LCD_enuSetAc+0x5a>
	     }
	     }
	     else{
	         return STD_NOTOK;
	     }
	     return STD_OK;
    1704:	1b 82       	std	Y+3, r1	; 0x03
    1706:	02 c0       	rjmp	.+4      	; 0x170c <LCD_enuSetAc+0x5a>
	     case 2 :LCD_enuSendCmnd(0xC0 + Copy_u8Location); break;
	     default:return STD_NOTOK;break;
	     }
	     }
	     else{
	         return STD_NOTOK;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	8b 83       	std	Y+3, r24	; 0x03
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
	     }
	     return STD_OK;
	 }
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <LCD_enuSendString>:

/*******************************************************/
 ERROR LCD_enuSendString(u8 * Copy_pu8String)
 {
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	00 d0       	rcall	.+0      	; 0x1724 <LCD_enuSendString+0x6>
    1724:	0f 92       	push	r0
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	9b 83       	std	Y+3, r25	; 0x03
    172c:	8a 83       	std	Y+2, r24	; 0x02
    172e:	0e c0       	rjmp	.+28     	; 0x174c <LCD_enuSendString+0x2e>
     for(u8 i ; Copy_pu8String[i] != '\0' ; i++ ){
         LCD_enuSendChar(Copy_pu8String[i]);
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	9b 81       	ldd	r25, Y+3	; 0x03
    173a:	fc 01       	movw	r30, r24
    173c:	e2 0f       	add	r30, r18
    173e:	f3 1f       	adc	r31, r19
    1740:	80 81       	ld	r24, Z
    1742:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_enuSendChar>
	 }

/*******************************************************/
 ERROR LCD_enuSendString(u8 * Copy_pu8String)
 {
     for(u8 i ; Copy_pu8String[i] != '\0' ; i++ ){
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	8f 5f       	subi	r24, 0xFF	; 255
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	9b 81       	ldd	r25, Y+3	; 0x03
    1756:	fc 01       	movw	r30, r24
    1758:	e2 0f       	add	r30, r18
    175a:	f3 1f       	adc	r31, r19
    175c:	80 81       	ld	r24, Z
    175e:	88 23       	and	r24, r24
    1760:	39 f7       	brne	.-50     	; 0x1730 <LCD_enuSendString+0x12>
         LCD_enuSendChar(Copy_pu8String[i]);
     }
     return  STD_OK;
    1762:	80 e0       	ldi	r24, 0x00	; 0
 }
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <LCD_enu_SendNum>:
 /*******************************************************/
 ERROR  LCD_enu_SendNum(u32 Copy_u32Num){
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <LCD_enu_SendNum+0x6>
    1776:	00 d0       	rcall	.+0      	; 0x1778 <LCD_enu_SendNum+0x8>
    1778:	00 d0       	rcall	.+0      	; 0x177a <LCD_enu_SendNum+0xa>
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	6b 83       	std	Y+3, r22	; 0x03
    1780:	7c 83       	std	Y+4, r23	; 0x04
    1782:	8d 83       	std	Y+5, r24	; 0x05
    1784:	9e 83       	std	Y+6, r25	; 0x06
     u8 Local_u8_Division ;
     u8 Local_u8_ReverseNum = 0;
    1786:	19 82       	std	Y+1, r1	; 0x01
    1788:	32 c0       	rjmp	.+100    	; 0x17ee <LCD_enu_SendNum+0x7e>
     while(Copy_u32Num != 0){
    	 Local_u8_Division = Copy_u32Num % 10;
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	ad 81       	ldd	r26, Y+5	; 0x05
    1790:	be 81       	ldd	r27, Y+6	; 0x06
    1792:	2a e0       	ldi	r18, 0x0A	; 10
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	bc 01       	movw	r22, r24
    179c:	cd 01       	movw	r24, r26
    179e:	0e 94 76 10 	call	0x20ec	; 0x20ec <__udivmodsi4>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	8a 83       	std	Y+2, r24	; 0x02
         Local_u8_ReverseNum = Local_u8_ReverseNum * 10 + Local_u8_Division;
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9c 01       	movw	r18, r24
    17b0:	22 0f       	add	r18, r18
    17b2:	33 1f       	adc	r19, r19
    17b4:	c9 01       	movw	r24, r18
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	82 0f       	add	r24, r18
    17c0:	93 1f       	adc	r25, r19
    17c2:	98 2f       	mov	r25, r24
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	89 0f       	add	r24, r25
    17c8:	89 83       	std	Y+1, r24	; 0x01
         Copy_u32Num /= 10;
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	9c 81       	ldd	r25, Y+4	; 0x04
    17ce:	ad 81       	ldd	r26, Y+5	; 0x05
    17d0:	be 81       	ldd	r27, Y+6	; 0x06
    17d2:	2a e0       	ldi	r18, 0x0A	; 10
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e0       	ldi	r20, 0x00	; 0
    17d8:	50 e0       	ldi	r21, 0x00	; 0
    17da:	bc 01       	movw	r22, r24
    17dc:	cd 01       	movw	r24, r26
    17de:	0e 94 76 10 	call	0x20ec	; 0x20ec <__udivmodsi4>
    17e2:	da 01       	movw	r26, r20
    17e4:	c9 01       	movw	r24, r18
    17e6:	8b 83       	std	Y+3, r24	; 0x03
    17e8:	9c 83       	std	Y+4, r25	; 0x04
    17ea:	ad 83       	std	Y+5, r26	; 0x05
    17ec:	be 83       	std	Y+6, r27	; 0x06
 }
 /*******************************************************/
 ERROR  LCD_enu_SendNum(u32 Copy_u32Num){
     u8 Local_u8_Division ;
     u8 Local_u8_ReverseNum = 0;
     while(Copy_u32Num != 0){
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	ad 81       	ldd	r26, Y+5	; 0x05
    17f4:	be 81       	ldd	r27, Y+6	; 0x06
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	a1 05       	cpc	r26, r1
    17fa:	b1 05       	cpc	r27, r1
    17fc:	31 f6       	brne	.-116    	; 0x178a <LCD_enu_SendNum+0x1a>
    17fe:	0f c0       	rjmp	.+30     	; 0x181e <LCD_enu_SendNum+0xae>
    	 Local_u8_Division = Copy_u32Num % 10;
         Local_u8_ReverseNum = Local_u8_ReverseNum * 10 + Local_u8_Division;
         Copy_u32Num /= 10;
     }
     while(Local_u8_ReverseNum != 0){
         LCD_enuSendChar((Local_u8_ReverseNum % 10)+'0');
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	9a e0       	ldi	r25, 0x0A	; 10
    1804:	69 2f       	mov	r22, r25
    1806:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
    180a:	89 2f       	mov	r24, r25
    180c:	80 5d       	subi	r24, 0xD0	; 208
    180e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <LCD_enuSendChar>
         Local_u8_ReverseNum /= 10;
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	9a e0       	ldi	r25, 0x0A	; 10
    1816:	69 2f       	mov	r22, r25
    1818:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
    181c:	89 83       	std	Y+1, r24	; 0x01
     while(Copy_u32Num != 0){
    	 Local_u8_Division = Copy_u32Num % 10;
         Local_u8_ReverseNum = Local_u8_ReverseNum * 10 + Local_u8_Division;
         Copy_u32Num /= 10;
     }
     while(Local_u8_ReverseNum != 0){
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	88 23       	and	r24, r24
    1822:	71 f7       	brne	.-36     	; 0x1800 <LCD_enu_SendNum+0x90>
         LCD_enuSendChar((Local_u8_ReverseNum % 10)+'0');
         Local_u8_ReverseNum /= 10;
     }
     return STD_OK;
    1824:	80 e0       	ldi	r24, 0x00	; 0

 }
    1826:	26 96       	adiw	r28, 0x06	; 6
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <DIO_u8SetPinDirection>:
	DIO_u8_PORTC_REG = Conc (DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);

	DIO_u8_PORTD_REG = Conc (DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);
}
*/
u8 DIO_u8SetPinDirection (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinDirection ) {
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	2e 97       	sbiw	r28, 0x0e	; 14
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	8a 83       	std	Y+2, r24	; 0x02
    184e:	6b 83       	std	Y+3, r22	; 0x03
    1850:	4c 83       	std	Y+4, r20	; 0x04

		u8 Local_u8_ErrorState = STD_TYPES_OK   ;
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	89 83       	std	Y+1, r24	; 0x01
        /*check */
if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinDirection == DIO_u8_OUTPUT) ||( Copy_u8PinDirection == DIO_u8_INPUT))
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	84 30       	cpi	r24, 0x04	; 4
    185a:	30 f4       	brcc	.+12     	; 0x1868 <DIO_u8SetPinDirection+0x30>
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	88 30       	cpi	r24, 0x08	; 8
    1860:	18 f4       	brcc	.+6      	; 0x1868 <DIO_u8SetPinDirection+0x30>
    1862:	8c 81       	ldd	r24, Y+4	; 0x04
    1864:	81 30       	cpi	r24, 0x01	; 1
    1866:	21 f0       	breq	.+8      	; 0x1870 <DIO_u8SetPinDirection+0x38>
    1868:	8c 81       	ldd	r24, Y+4	; 0x04
    186a:	88 23       	and	r24, r24
    186c:	09 f0       	breq	.+2      	; 0x1870 <DIO_u8SetPinDirection+0x38>
    186e:	01 c1       	rjmp	.+514    	; 0x1a72 <DIO_u8SetPinDirection+0x23a>
{
	switch (Copy_u8PortId){
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	3e 87       	std	Y+14, r19	; 0x0e
    1878:	2d 87       	std	Y+13, r18	; 0x0d
    187a:	8d 85       	ldd	r24, Y+13	; 0x0d
    187c:	9e 85       	ldd	r25, Y+14	; 0x0e
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	91 05       	cpc	r25, r1
    1882:	09 f4       	brne	.+2      	; 0x1886 <DIO_u8SetPinDirection+0x4e>
    1884:	4f c0       	rjmp	.+158    	; 0x1924 <DIO_u8SetPinDirection+0xec>
    1886:	2d 85       	ldd	r18, Y+13	; 0x0d
    1888:	3e 85       	ldd	r19, Y+14	; 0x0e
    188a:	22 30       	cpi	r18, 0x02	; 2
    188c:	31 05       	cpc	r19, r1
    188e:	2c f4       	brge	.+10     	; 0x189a <DIO_u8SetPinDirection+0x62>
    1890:	8d 85       	ldd	r24, Y+13	; 0x0d
    1892:	9e 85       	ldd	r25, Y+14	; 0x0e
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	71 f0       	breq	.+28     	; 0x18b4 <DIO_u8SetPinDirection+0x7c>
    1898:	ed c0       	rjmp	.+474    	; 0x1a74 <DIO_u8SetPinDirection+0x23c>
    189a:	2d 85       	ldd	r18, Y+13	; 0x0d
    189c:	3e 85       	ldd	r19, Y+14	; 0x0e
    189e:	22 30       	cpi	r18, 0x02	; 2
    18a0:	31 05       	cpc	r19, r1
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <DIO_u8SetPinDirection+0x6e>
    18a4:	77 c0       	rjmp	.+238    	; 0x1994 <DIO_u8SetPinDirection+0x15c>
    18a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18aa:	83 30       	cpi	r24, 0x03	; 3
    18ac:	91 05       	cpc	r25, r1
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <DIO_u8SetPinDirection+0x7a>
    18b0:	a9 c0       	rjmp	.+338    	; 0x1a04 <DIO_u8SetPinDirection+0x1cc>
    18b2:	e0 c0       	rjmp	.+448    	; 0x1a74 <DIO_u8SetPinDirection+0x23c>
		case DIO_u8_PORTA :
			switch (Copy_u8PinDirection ){
    18b4:	8c 81       	ldd	r24, Y+4	; 0x04
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	3c 87       	std	Y+12, r19	; 0x0c
    18bc:	2b 87       	std	Y+11, r18	; 0x0b
    18be:	8b 85       	ldd	r24, Y+11	; 0x0b
    18c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	d1 f0       	breq	.+52     	; 0x18fa <DIO_u8SetPinDirection+0xc2>
    18c6:	2b 85       	ldd	r18, Y+11	; 0x0b
    18c8:	3c 85       	ldd	r19, Y+12	; 0x0c
    18ca:	21 30       	cpi	r18, 0x01	; 1
    18cc:	31 05       	cpc	r19, r1
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <DIO_u8SetPinDirection+0x9a>
    18d0:	d1 c0       	rjmp	.+418    	; 0x1a74 <DIO_u8SetPinDirection+0x23c>
			case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    18d2:	aa e3       	ldi	r26, 0x3A	; 58
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	ea e3       	ldi	r30, 0x3A	; 58
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <DIO_u8SetPinDirection+0xb8>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <DIO_u8SetPinDirection+0xb4>
    18f4:	84 2b       	or	r24, r20
    18f6:	8c 93       	st	X, r24
    18f8:	bd c0       	rjmp	.+378    	; 0x1a74 <DIO_u8SetPinDirection+0x23c>
				case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRA_REG , Copy_u8PinId);break; } break ;
    18fa:	aa e3       	ldi	r26, 0x3A	; 58
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	ea e3       	ldi	r30, 0x3A	; 58
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 2e       	mov	r0, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <DIO_u8SetPinDirection+0xe0>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	0a 94       	dec	r0
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <DIO_u8SetPinDirection+0xdc>
    191c:	80 95       	com	r24
    191e:	84 23       	and	r24, r20
    1920:	8c 93       	st	X, r24
    1922:	a8 c0       	rjmp	.+336    	; 0x1a74 <DIO_u8SetPinDirection+0x23c>

		case DIO_u8_PORTB :
		switch (Copy_u8PinDirection ){
    1924:	8c 81       	ldd	r24, Y+4	; 0x04
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	3a 87       	std	Y+10, r19	; 0x0a
    192c:	29 87       	std	Y+9, r18	; 0x09
    192e:	89 85       	ldd	r24, Y+9	; 0x09
    1930:	9a 85       	ldd	r25, Y+10	; 0x0a
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	d1 f0       	breq	.+52     	; 0x196a <DIO_u8SetPinDirection+0x132>
    1936:	29 85       	ldd	r18, Y+9	; 0x09
    1938:	3a 85       	ldd	r19, Y+10	; 0x0a
    193a:	21 30       	cpi	r18, 0x01	; 1
    193c:	31 05       	cpc	r19, r1
    193e:	09 f0       	breq	.+2      	; 0x1942 <DIO_u8SetPinDirection+0x10a>
    1940:	99 c0       	rjmp	.+306    	; 0x1a74 <DIO_u8SetPinDirection+0x23c>
			case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    1942:	a7 e3       	ldi	r26, 0x37	; 55
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e7 e3       	ldi	r30, 0x37	; 55
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_u8SetPinDirection+0x128>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_u8SetPinDirection+0x124>
    1964:	84 2b       	or	r24, r20
    1966:	8c 93       	st	X, r24
    1968:	85 c0       	rjmp	.+266    	; 0x1a74 <DIO_u8SetPinDirection+0x23c>
			case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break; } break ;
    196a:	a7 e3       	ldi	r26, 0x37	; 55
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e7 e3       	ldi	r30, 0x37	; 55
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	48 2f       	mov	r20, r24
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	02 2e       	mov	r0, r18
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <DIO_u8SetPinDirection+0x150>
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	0a 94       	dec	r0
    198a:	e2 f7       	brpl	.-8      	; 0x1984 <DIO_u8SetPinDirection+0x14c>
    198c:	80 95       	com	r24
    198e:	84 23       	and	r24, r20
    1990:	8c 93       	st	X, r24
    1992:	70 c0       	rjmp	.+224    	; 0x1a74 <DIO_u8SetPinDirection+0x23c>

		case DIO_u8_PORTC :
	   switch (Copy_u8PinDirection ){
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	38 87       	std	Y+8, r19	; 0x08
    199c:	2f 83       	std	Y+7, r18	; 0x07
    199e:	8f 81       	ldd	r24, Y+7	; 0x07
    19a0:	98 85       	ldd	r25, Y+8	; 0x08
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	d1 f0       	breq	.+52     	; 0x19da <DIO_u8SetPinDirection+0x1a2>
    19a6:	2f 81       	ldd	r18, Y+7	; 0x07
    19a8:	38 85       	ldd	r19, Y+8	; 0x08
    19aa:	21 30       	cpi	r18, 0x01	; 1
    19ac:	31 05       	cpc	r19, r1
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <DIO_u8SetPinDirection+0x17a>
    19b0:	61 c0       	rjmp	.+194    	; 0x1a74 <DIO_u8SetPinDirection+0x23c>
	   	   case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    19b2:	a4 e3       	ldi	r26, 0x34	; 52
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e4 e3       	ldi	r30, 0x34	; 52
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	48 2f       	mov	r20, r24
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <DIO_u8SetPinDirection+0x198>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <DIO_u8SetPinDirection+0x194>
    19d4:	84 2b       	or	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	4d c0       	rjmp	.+154    	; 0x1a74 <DIO_u8SetPinDirection+0x23c>
	   	   case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break; } break ;
    19da:	a7 e3       	ldi	r26, 0x37	; 55
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e7 e3       	ldi	r30, 0x37	; 55
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <DIO_u8SetPinDirection+0x1c0>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <DIO_u8SetPinDirection+0x1bc>
    19fc:	80 95       	com	r24
    19fe:	84 23       	and	r24, r20
    1a00:	8c 93       	st	X, r24
    1a02:	38 c0       	rjmp	.+112    	; 0x1a74 <DIO_u8SetPinDirection+0x23c>

	   case DIO_u8_PORTD :
		   switch (Copy_u8PinDirection ){
    1a04:	8c 81       	ldd	r24, Y+4	; 0x04
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	3e 83       	std	Y+6, r19	; 0x06
    1a0c:	2d 83       	std	Y+5, r18	; 0x05
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	c9 f0       	breq	.+50     	; 0x1a48 <DIO_u8SetPinDirection+0x210>
    1a16:	2d 81       	ldd	r18, Y+5	; 0x05
    1a18:	3e 81       	ldd	r19, Y+6	; 0x06
    1a1a:	21 30       	cpi	r18, 0x01	; 1
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	51 f5       	brne	.+84     	; 0x1a74 <DIO_u8SetPinDirection+0x23c>
		   	   	  case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    1a20:	a1 e3       	ldi	r26, 0x31	; 49
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e1 e3       	ldi	r30, 0x31	; 49
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <DIO_u8SetPinDirection+0x206>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <DIO_u8SetPinDirection+0x202>
    1a42:	84 2b       	or	r24, r20
    1a44:	8c 93       	st	X, r24
    1a46:	16 c0       	rjmp	.+44     	; 0x1a74 <DIO_u8SetPinDirection+0x23c>
		   	   	  case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break; } break ;
    1a48:	a1 e3       	ldi	r26, 0x31	; 49
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e1 e3       	ldi	r30, 0x31	; 49
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	48 2f       	mov	r20, r24
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	02 2e       	mov	r0, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <DIO_u8SetPinDirection+0x22e>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	0a 94       	dec	r0
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <DIO_u8SetPinDirection+0x22a>
    1a6a:	80 95       	com	r24
    1a6c:	84 23       	and	r24, r20
    1a6e:	8c 93       	st	X, r24
    1a70:	01 c0       	rjmp	.+2      	; 0x1a74 <DIO_u8SetPinDirection+0x23c>

}

}
else { 
        Local_u8_ErrorState = STD_TYPES_NOTOK   ;
    1a72:	19 82       	std	Y+1, r1	; 0x01
}

        return Local_u8_ErrorState  ;
    1a74:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a76:	2e 96       	adiw	r28, 0x0e	; 14
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <DIO_u8SetPinValue>:
/***************************************************/

u8 DIO_u8SetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinValue ) 
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	2e 97       	sbiw	r28, 0x0e	; 14
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	8a 83       	std	Y+2, r24	; 0x02
    1a9e:	6b 83       	std	Y+3, r22	; 0x03
    1aa0:	4c 83       	std	Y+4, r20	; 0x04
u8 Local_u8Errorstate = STD_TYPES_OK ;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	89 83       	std	Y+1, r24	; 0x01
if (Copy_u8PinId <= DIO_u8_PIN7 ) {
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	88 30       	cpi	r24, 0x08	; 8
    1aaa:	08 f0       	brcs	.+2      	; 0x1aae <DIO_u8SetPinValue+0x26>
    1aac:	08 c1       	rjmp	.+528    	; 0x1cbe <DIO_u8SetPinValue+0x236>
	switch  (Copy_u8PortId )
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	3e 87       	std	Y+14, r19	; 0x0e
    1ab6:	2d 87       	std	Y+13, r18	; 0x0d
    1ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	91 05       	cpc	r25, r1
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <DIO_u8SetPinValue+0x3c>
    1ac2:	50 c0       	rjmp	.+160    	; 0x1b64 <DIO_u8SetPinValue+0xdc>
    1ac4:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ac6:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ac8:	22 30       	cpi	r18, 0x02	; 2
    1aca:	31 05       	cpc	r19, r1
    1acc:	2c f4       	brge	.+10     	; 0x1ad8 <DIO_u8SetPinValue+0x50>
    1ace:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	71 f0       	breq	.+28     	; 0x1af2 <DIO_u8SetPinValue+0x6a>
    1ad6:	f1 c0       	rjmp	.+482    	; 0x1cba <DIO_u8SetPinValue+0x232>
    1ad8:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ada:	3e 85       	ldd	r19, Y+14	; 0x0e
    1adc:	22 30       	cpi	r18, 0x02	; 2
    1ade:	31 05       	cpc	r19, r1
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <DIO_u8SetPinValue+0x5c>
    1ae2:	79 c0       	rjmp	.+242    	; 0x1bd6 <DIO_u8SetPinValue+0x14e>
    1ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae8:	83 30       	cpi	r24, 0x03	; 3
    1aea:	91 05       	cpc	r25, r1
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <DIO_u8SetPinValue+0x68>
    1aee:	ac c0       	rjmp	.+344    	; 0x1c48 <DIO_u8SetPinValue+0x1c0>
    1af0:	e4 c0       	rjmp	.+456    	; 0x1cba <DIO_u8SetPinValue+0x232>
	{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue )
    1af2:	8c 81       	ldd	r24, Y+4	; 0x04
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	3c 87       	std	Y+12, r19	; 0x0c
    1afa:	2b 87       	std	Y+11, r18	; 0x0b
    1afc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1afe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	c9 f0       	breq	.+50     	; 0x1b36 <DIO_u8SetPinValue+0xae>
    1b04:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b06:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b08:	21 30       	cpi	r18, 0x01	; 1
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	49 f5       	brne	.+82     	; 0x1b60 <DIO_u8SetPinValue+0xd8>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG ,Copy_u8PinId );break ;
    1b0e:	ab e3       	ldi	r26, 0x3B	; 59
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	eb e3       	ldi	r30, 0x3B	; 59
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 2e       	mov	r0, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <DIO_u8SetPinValue+0xa4>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	0a 94       	dec	r0
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <DIO_u8SetPinValue+0xa0>
    1b30:	84 2b       	or	r24, r20
    1b32:	8c 93       	st	X, r24
    1b34:	c5 c0       	rjmp	.+394    	; 0x1cc0 <DIO_u8SetPinValue+0x238>
				case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTA_REG ,Copy_u8PinId );break ;
    1b36:	ab e3       	ldi	r26, 0x3B	; 59
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	eb e3       	ldi	r30, 0x3B	; 59
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	48 2f       	mov	r20, r24
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	02 2e       	mov	r0, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <DIO_u8SetPinValue+0xcc>
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	0a 94       	dec	r0
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <DIO_u8SetPinValue+0xc8>
    1b58:	80 95       	com	r24
    1b5a:	84 23       	and	r24, r20
    1b5c:	8c 93       	st	X, r24
    1b5e:	b0 c0       	rjmp	.+352    	; 0x1cc0 <DIO_u8SetPinValue+0x238>
				default : Local_u8Errorstate = STD_TYPES_NOTOK;
    1b60:	19 82       	std	Y+1, r1	; 0x01
    1b62:	ae c0       	rjmp	.+348    	; 0x1cc0 <DIO_u8SetPinValue+0x238>
				}
			break ;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue )
    1b64:	8c 81       	ldd	r24, Y+4	; 0x04
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	3a 87       	std	Y+10, r19	; 0x0a
    1b6c:	29 87       	std	Y+9, r18	; 0x09
    1b6e:	89 85       	ldd	r24, Y+9	; 0x09
    1b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	c9 f0       	breq	.+50     	; 0x1ba8 <DIO_u8SetPinValue+0x120>
    1b76:	29 85       	ldd	r18, Y+9	; 0x09
    1b78:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b7a:	21 30       	cpi	r18, 0x01	; 1
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	49 f5       	brne	.+82     	; 0x1bd2 <DIO_u8SetPinValue+0x14a>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG ,Copy_u8PinId );break ;
    1b80:	a8 e3       	ldi	r26, 0x38	; 56
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e8 e3       	ldi	r30, 0x38	; 56
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	02 2e       	mov	r0, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <DIO_u8SetPinValue+0x116>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	0a 94       	dec	r0
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <DIO_u8SetPinValue+0x112>
    1ba2:	84 2b       	or	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	8c c0       	rjmp	.+280    	; 0x1cc0 <DIO_u8SetPinValue+0x238>
				case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTB_REG ,Copy_u8PinId );break ;
    1ba8:	a8 e3       	ldi	r26, 0x38	; 56
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e8 e3       	ldi	r30, 0x38	; 56
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 2e       	mov	r0, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <DIO_u8SetPinValue+0x13e>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <DIO_u8SetPinValue+0x13a>
    1bca:	80 95       	com	r24
    1bcc:	84 23       	and	r24, r20
    1bce:	8c 93       	st	X, r24
    1bd0:	77 c0       	rjmp	.+238    	; 0x1cc0 <DIO_u8SetPinValue+0x238>
				default : Local_u8Errorstate = STD_TYPES_NOTOK;
    1bd2:	19 82       	std	Y+1, r1	; 0x01
    1bd4:	75 c0       	rjmp	.+234    	; 0x1cc0 <DIO_u8SetPinValue+0x238>
			}
			break ;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue )
    1bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	38 87       	std	Y+8, r19	; 0x08
    1bde:	2f 83       	std	Y+7, r18	; 0x07
    1be0:	8f 81       	ldd	r24, Y+7	; 0x07
    1be2:	98 85       	ldd	r25, Y+8	; 0x08
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	c9 f0       	breq	.+50     	; 0x1c1a <DIO_u8SetPinValue+0x192>
    1be8:	2f 81       	ldd	r18, Y+7	; 0x07
    1bea:	38 85       	ldd	r19, Y+8	; 0x08
    1bec:	21 30       	cpi	r18, 0x01	; 1
    1bee:	31 05       	cpc	r19, r1
    1bf0:	49 f5       	brne	.+82     	; 0x1c44 <DIO_u8SetPinValue+0x1bc>
			{
			case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG ,Copy_u8PinId );break ;
    1bf2:	a5 e3       	ldi	r26, 0x35	; 53
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e5 e3       	ldi	r30, 0x35	; 53
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	02 2e       	mov	r0, r18
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <DIO_u8SetPinValue+0x188>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	0a 94       	dec	r0
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <DIO_u8SetPinValue+0x184>
    1c14:	84 2b       	or	r24, r20
    1c16:	8c 93       	st	X, r24
    1c18:	53 c0       	rjmp	.+166    	; 0x1cc0 <DIO_u8SetPinValue+0x238>
			case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTC_REG ,Copy_u8PinId );break ;
    1c1a:	a5 e3       	ldi	r26, 0x35	; 53
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e5 e3       	ldi	r30, 0x35	; 53
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	48 2f       	mov	r20, r24
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 2e       	mov	r0, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <DIO_u8SetPinValue+0x1b0>
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	0a 94       	dec	r0
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <DIO_u8SetPinValue+0x1ac>
    1c3c:	80 95       	com	r24
    1c3e:	84 23       	and	r24, r20
    1c40:	8c 93       	st	X, r24
    1c42:	3e c0       	rjmp	.+124    	; 0x1cc0 <DIO_u8SetPinValue+0x238>
			default : Local_u8Errorstate = STD_TYPES_NOTOK;}
    1c44:	19 82       	std	Y+1, r1	; 0x01
    1c46:	3c c0       	rjmp	.+120    	; 0x1cc0 <DIO_u8SetPinValue+0x238>
			break ;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue )
    1c48:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	3e 83       	std	Y+6, r19	; 0x06
    1c50:	2d 83       	std	Y+5, r18	; 0x05
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	9e 81       	ldd	r25, Y+6	; 0x06
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	c9 f0       	breq	.+50     	; 0x1c8c <DIO_u8SetPinValue+0x204>
    1c5a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c5c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c5e:	21 30       	cpi	r18, 0x01	; 1
    1c60:	31 05       	cpc	r19, r1
    1c62:	49 f5       	brne	.+82     	; 0x1cb6 <DIO_u8SetPinValue+0x22e>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG ,Copy_u8PinId );break ;
    1c64:	a2 e3       	ldi	r26, 0x32	; 50
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e2 e3       	ldi	r30, 0x32	; 50
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	48 2f       	mov	r20, r24
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	02 2e       	mov	r0, r18
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <DIO_u8SetPinValue+0x1fa>
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	0a 94       	dec	r0
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <DIO_u8SetPinValue+0x1f6>
    1c86:	84 2b       	or	r24, r20
    1c88:	8c 93       	st	X, r24
    1c8a:	1a c0       	rjmp	.+52     	; 0x1cc0 <DIO_u8SetPinValue+0x238>
				case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTD_REG ,Copy_u8PinId );break ;
    1c8c:	a2 e3       	ldi	r26, 0x32	; 50
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e2 e3       	ldi	r30, 0x32	; 50
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	48 2f       	mov	r20, r24
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 2e       	mov	r0, r18
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <DIO_u8SetPinValue+0x222>
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	0a 94       	dec	r0
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <DIO_u8SetPinValue+0x21e>
    1cae:	80 95       	com	r24
    1cb0:	84 23       	and	r24, r20
    1cb2:	8c 93       	st	X, r24
    1cb4:	05 c0       	rjmp	.+10     	; 0x1cc0 <DIO_u8SetPinValue+0x238>
				default : Local_u8Errorstate = STD_TYPES_NOTOK;}
    1cb6:	19 82       	std	Y+1, r1	; 0x01
    1cb8:	03 c0       	rjmp	.+6      	; 0x1cc0 <DIO_u8SetPinValue+0x238>
				break ;

		default :
			Local_u8Errorstate = STD_TYPES_NOTOK;
    1cba:	19 82       	std	Y+1, r1	; 0x01
    1cbc:	01 c0       	rjmp	.+2      	; 0x1cc0 <DIO_u8SetPinValue+0x238>
		}
        }
else {Local_u8Errorstate = STD_TYPES_NOTOK;
    1cbe:	19 82       	std	Y+1, r1	; 0x01
}
 return Local_u8Errorstate  ;      
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
   }
    1cc2:	2e 96       	adiw	r28, 0x0e	; 14
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <DIO_u8GetPinValue>:

/************************************************/

u8 DIO_u8GetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 *Copy_pu8ReturndPinValue ) 
{
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	28 97       	sbiw	r28, 0x08	; 8
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	8b 83       	std	Y+3, r24	; 0x03
    1cea:	6c 83       	std	Y+4, r22	; 0x04
    1cec:	5e 83       	std	Y+6, r21	; 0x06
    1cee:	4d 83       	std	Y+5, r20	; 0x05
u8 Local_u8Errorstate = STD_TYPES_OK ;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	8a 83       	std	Y+2, r24	; 0x02
u8 Local_u8PinValue;
if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ( *Copy_pu8ReturndPinValue != NULL))
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	84 30       	cpi	r24, 0x04	; 4
    1cf8:	08 f0       	brcs	.+2      	; 0x1cfc <DIO_u8GetPinValue+0x28>
    1cfa:	a2 c0       	rjmp	.+324    	; 0x1e40 <DIO_u8GetPinValue+0x16c>
    1cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfe:	88 30       	cpi	r24, 0x08	; 8
    1d00:	08 f0       	brcs	.+2      	; 0x1d04 <DIO_u8GetPinValue+0x30>
    1d02:	9e c0       	rjmp	.+316    	; 0x1e40 <DIO_u8GetPinValue+0x16c>
    1d04:	ed 81       	ldd	r30, Y+5	; 0x05
    1d06:	fe 81       	ldd	r31, Y+6	; 0x06
    1d08:	80 81       	ld	r24, Z
    1d0a:	88 2f       	mov	r24, r24
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <DIO_u8GetPinValue+0x40>
    1d12:	96 c0       	rjmp	.+300    	; 0x1e40 <DIO_u8GetPinValue+0x16c>
{
	switch (Copy_u8PortId)
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	38 87       	std	Y+8, r19	; 0x08
    1d1c:	2f 83       	std	Y+7, r18	; 0x07
    1d1e:	4f 81       	ldd	r20, Y+7	; 0x07
    1d20:	58 85       	ldd	r21, Y+8	; 0x08
    1d22:	41 30       	cpi	r20, 0x01	; 1
    1d24:	51 05       	cpc	r21, r1
    1d26:	a9 f1       	breq	.+106    	; 0x1d92 <DIO_u8GetPinValue+0xbe>
    1d28:	8f 81       	ldd	r24, Y+7	; 0x07
    1d2a:	98 85       	ldd	r25, Y+8	; 0x08
    1d2c:	82 30       	cpi	r24, 0x02	; 2
    1d2e:	91 05       	cpc	r25, r1
    1d30:	34 f4       	brge	.+12     	; 0x1d3e <DIO_u8GetPinValue+0x6a>
    1d32:	2f 81       	ldd	r18, Y+7	; 0x07
    1d34:	38 85       	ldd	r19, Y+8	; 0x08
    1d36:	21 15       	cp	r18, r1
    1d38:	31 05       	cpc	r19, r1
    1d3a:	71 f0       	breq	.+28     	; 0x1d58 <DIO_u8GetPinValue+0x84>
    1d3c:	82 c0       	rjmp	.+260    	; 0x1e42 <DIO_u8GetPinValue+0x16e>
    1d3e:	4f 81       	ldd	r20, Y+7	; 0x07
    1d40:	58 85       	ldd	r21, Y+8	; 0x08
    1d42:	42 30       	cpi	r20, 0x02	; 2
    1d44:	51 05       	cpc	r21, r1
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <DIO_u8GetPinValue+0x76>
    1d48:	41 c0       	rjmp	.+130    	; 0x1dcc <DIO_u8GetPinValue+0xf8>
    1d4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d4c:	98 85       	ldd	r25, Y+8	; 0x08
    1d4e:	83 30       	cpi	r24, 0x03	; 3
    1d50:	91 05       	cpc	r25, r1
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <DIO_u8GetPinValue+0x82>
    1d54:	58 c0       	rjmp	.+176    	; 0x1e06 <DIO_u8GetPinValue+0x132>
    1d56:	75 c0       	rjmp	.+234    	; 0x1e42 <DIO_u8GetPinValue+0x16e>
	{
		case DIO_u8_PORTA:Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId );
    1d58:	e9 e3       	ldi	r30, 0x39	; 57
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	8c 81       	ldd	r24, Y+4	; 0x04
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a9 01       	movw	r20, r18
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <DIO_u8GetPinValue+0x9c>
    1d6c:	55 95       	asr	r21
    1d6e:	47 95       	ror	r20
    1d70:	8a 95       	dec	r24
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <DIO_u8GetPinValue+0x98>
    1d74:	ca 01       	movw	r24, r20
    1d76:	81 70       	andi	r24, 0x01	; 1
    1d78:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == STD_TYPES_NOTOK )
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	88 23       	and	r24, r24
    1d7e:	21 f4       	brne	.+8      	; 0x1d88 <DIO_u8GetPinValue+0xb4>
			{
				*Copy_pu8ReturndPinValue = DIO_u8_LOW;}
    1d80:	ed 81       	ldd	r30, Y+5	; 0x05
    1d82:	fe 81       	ldd	r31, Y+6	; 0x06
    1d84:	10 82       	st	Z, r1
    1d86:	5d c0       	rjmp	.+186    	; 0x1e42 <DIO_u8GetPinValue+0x16e>
			else{*Copy_pu8ReturndPinValue = DIO_u8_HIGH;
    1d88:	ed 81       	ldd	r30, Y+5	; 0x05
    1d8a:	fe 81       	ldd	r31, Y+6	; 0x06
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	80 83       	st	Z, r24
    1d90:	58 c0       	rjmp	.+176    	; 0x1e42 <DIO_u8GetPinValue+0x16e>
			}break ;

	    case DIO_u8_PORTB:Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG , Copy_u8PinId);
    1d92:	e6 e3       	ldi	r30, 0x36	; 54
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9e:	88 2f       	mov	r24, r24
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	a9 01       	movw	r20, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <DIO_u8GetPinValue+0xd6>
    1da6:	55 95       	asr	r21
    1da8:	47 95       	ror	r20
    1daa:	8a 95       	dec	r24
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <DIO_u8GetPinValue+0xd2>
    1dae:	ca 01       	movw	r24, r20
    1db0:	81 70       	andi	r24, 0x01	; 1
    1db2:	89 83       	std	Y+1, r24	; 0x01
	    	if (Local_u8PinValue == STD_TYPES_NOTOK )
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	88 23       	and	r24, r24
    1db8:	21 f4       	brne	.+8      	; 0x1dc2 <DIO_u8GetPinValue+0xee>
	    	{
	    		*Copy_pu8ReturndPinValue = DIO_u8_LOW;}
    1dba:	ed 81       	ldd	r30, Y+5	; 0x05
    1dbc:	fe 81       	ldd	r31, Y+6	; 0x06
    1dbe:	10 82       	st	Z, r1
    1dc0:	40 c0       	rjmp	.+128    	; 0x1e42 <DIO_u8GetPinValue+0x16e>
	    	else{*Copy_pu8ReturndPinValue = DIO_u8_HIGH;
    1dc2:	ed 81       	ldd	r30, Y+5	; 0x05
    1dc4:	fe 81       	ldd	r31, Y+6	; 0x06
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	80 83       	st	Z, r24
    1dca:	3b c0       	rjmp	.+118    	; 0x1e42 <DIO_u8GetPinValue+0x16e>
	    	}break;

	    case DIO_u8_PORTC:Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    1dcc:	e3 e3       	ldi	r30, 0x33	; 51
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd8:	88 2f       	mov	r24, r24
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a9 01       	movw	r20, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <DIO_u8GetPinValue+0x110>
    1de0:	55 95       	asr	r21
    1de2:	47 95       	ror	r20
    1de4:	8a 95       	dec	r24
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <DIO_u8GetPinValue+0x10c>
    1de8:	ca 01       	movw	r24, r20
    1dea:	81 70       	andi	r24, 0x01	; 1
    1dec:	89 83       	std	Y+1, r24	; 0x01
	    	if (Local_u8PinValue == STD_TYPES_NOTOK )
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	88 23       	and	r24, r24
    1df2:	21 f4       	brne	.+8      	; 0x1dfc <DIO_u8GetPinValue+0x128>
	    	{
	    		*Copy_pu8ReturndPinValue = DIO_u8_LOW;}
    1df4:	ed 81       	ldd	r30, Y+5	; 0x05
    1df6:	fe 81       	ldd	r31, Y+6	; 0x06
    1df8:	10 82       	st	Z, r1
    1dfa:	23 c0       	rjmp	.+70     	; 0x1e42 <DIO_u8GetPinValue+0x16e>
	    	else{*Copy_pu8ReturndPinValue = DIO_u8_HIGH;
    1dfc:	ed 81       	ldd	r30, Y+5	; 0x05
    1dfe:	fe 81       	ldd	r31, Y+6	; 0x06
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	80 83       	st	Z, r24
    1e04:	1e c0       	rjmp	.+60     	; 0x1e42 <DIO_u8GetPinValue+0x16e>
	    	}break;

	    case DIO_u8_PORTD:Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    1e06:	e0 e3       	ldi	r30, 0x30	; 48
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	8c 81       	ldd	r24, Y+4	; 0x04
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	a9 01       	movw	r20, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <DIO_u8GetPinValue+0x14a>
    1e1a:	55 95       	asr	r21
    1e1c:	47 95       	ror	r20
    1e1e:	8a 95       	dec	r24
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <DIO_u8GetPinValue+0x146>
    1e22:	ca 01       	movw	r24, r20
    1e24:	81 70       	andi	r24, 0x01	; 1
    1e26:	89 83       	std	Y+1, r24	; 0x01
	    	if (Local_u8PinValue == STD_TYPES_NOTOK )
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	88 23       	and	r24, r24
    1e2c:	21 f4       	brne	.+8      	; 0x1e36 <DIO_u8GetPinValue+0x162>
	    	{
	    		*Copy_pu8ReturndPinValue = DIO_u8_LOW;}
    1e2e:	ed 81       	ldd	r30, Y+5	; 0x05
    1e30:	fe 81       	ldd	r31, Y+6	; 0x06
    1e32:	10 82       	st	Z, r1
    1e34:	06 c0       	rjmp	.+12     	; 0x1e42 <DIO_u8GetPinValue+0x16e>
	    	else{*Copy_pu8ReturndPinValue = DIO_u8_HIGH;
    1e36:	ed 81       	ldd	r30, Y+5	; 0x05
    1e38:	fe 81       	ldd	r31, Y+6	; 0x06
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	80 83       	st	Z, r24
    1e3e:	01 c0       	rjmp	.+2      	; 0x1e42 <DIO_u8GetPinValue+0x16e>
	    	}break;
  }
}
else {
Local_u8Errorstate = STD_TYPES_NOTOK;
    1e40:	1a 82       	std	Y+2, r1	; 0x02
}
return Local_u8Errorstate  ;      
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1e44:	28 96       	adiw	r28, 0x08	; 8
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <DIO_u8SetPortDirection>:
/******************************************************/ 

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId ,u8 Copy_u8PortDirection )
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	2d 97       	sbiw	r28, 0x0d	; 13
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
    1e6a:	8a 83       	std	Y+2, r24	; 0x02
    1e6c:	6b 83       	std	Y+3, r22	; 0x03
u8 Local_u8Errorstate = STD_TYPES_OK ;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	89 83       	std	Y+1, r24	; 0x01
if ((Copy_u8PortDirection == DIO_u8_OUTPUT) ||( Copy_u8PortDirection == DIO_u8_INPUT))
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	81 30       	cpi	r24, 0x01	; 1
    1e76:	21 f0       	breq	.+8      	; 0x1e80 <DIO_u8SetPortDirection+0x2a>
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	88 23       	and	r24, r24
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <DIO_u8SetPortDirection+0x2a>
    1e7e:	7f c0       	rjmp	.+254    	; 0x1f7e <DIO_u8SetPortDirection+0x128>
{
	switch (Copy_u8PortId){
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	3d 87       	std	Y+13, r19	; 0x0d
    1e88:	2c 87       	std	Y+12, r18	; 0x0c
    1e8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	91 05       	cpc	r25, r1
    1e92:	71 f1       	breq	.+92     	; 0x1ef0 <DIO_u8SetPortDirection+0x9a>
    1e94:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e96:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e98:	22 30       	cpi	r18, 0x02	; 2
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <DIO_u8SetPortDirection+0x52>
    1e9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ea0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	69 f0       	breq	.+26     	; 0x1ec0 <DIO_u8SetPortDirection+0x6a>
    1ea6:	69 c0       	rjmp	.+210    	; 0x1f7a <DIO_u8SetPortDirection+0x124>
    1ea8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eaa:	3d 85       	ldd	r19, Y+13	; 0x0d
    1eac:	22 30       	cpi	r18, 0x02	; 2
    1eae:	31 05       	cpc	r19, r1
    1eb0:	b1 f1       	breq	.+108    	; 0x1f1e <DIO_u8SetPortDirection+0xc8>
    1eb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1eb4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1eb6:	83 30       	cpi	r24, 0x03	; 3
    1eb8:	91 05       	cpc	r25, r1
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <DIO_u8SetPortDirection+0x68>
    1ebc:	47 c0       	rjmp	.+142    	; 0x1f4c <DIO_u8SetPortDirection+0xf6>
    1ebe:	5d c0       	rjmp	.+186    	; 0x1f7a <DIO_u8SetPortDirection+0x124>
		case DIO_u8_PORTA :
			switch (Copy_u8PortDirection) {
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	3b 87       	std	Y+11, r19	; 0x0b
    1ec8:	2a 87       	std	Y+10, r18	; 0x0a
    1eca:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ecc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	59 f0       	breq	.+22     	; 0x1ee8 <DIO_u8SetPortDirection+0x92>
    1ed2:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ed4:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ed6:	21 30       	cpi	r18, 0x01	; 1
    1ed8:	31 05       	cpc	r19, r1
    1eda:	09 f0       	breq	.+2      	; 0x1ede <DIO_u8SetPortDirection+0x88>
    1edc:	51 c0       	rjmp	.+162    	; 0x1f80 <DIO_u8SetPortDirection+0x12a>
				case DIO_u8_OUTPUT :DIO_u8_DDRA_REG = 0xff;break;
    1ede:	ea e3       	ldi	r30, 0x3A	; 58
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	8f ef       	ldi	r24, 0xFF	; 255
    1ee4:	80 83       	st	Z, r24
    1ee6:	4c c0       	rjmp	.+152    	; 0x1f80 <DIO_u8SetPortDirection+0x12a>
				case DIO_u8_INPUT :DIO_u8_DDRA_REG = 0x00;break ;
    1ee8:	ea e3       	ldi	r30, 0x3A	; 58
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	10 82       	st	Z, r1
    1eee:	48 c0       	rjmp	.+144    	; 0x1f80 <DIO_u8SetPortDirection+0x12a>
				}break ;

		case DIO_u8_PORTB :
			switch (Copy_u8PortDirection ){
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	39 87       	std	Y+9, r19	; 0x09
    1ef8:	28 87       	std	Y+8, r18	; 0x08
    1efa:	88 85       	ldd	r24, Y+8	; 0x08
    1efc:	99 85       	ldd	r25, Y+9	; 0x09
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	51 f0       	breq	.+20     	; 0x1f16 <DIO_u8SetPortDirection+0xc0>
    1f02:	28 85       	ldd	r18, Y+8	; 0x08
    1f04:	39 85       	ldd	r19, Y+9	; 0x09
    1f06:	21 30       	cpi	r18, 0x01	; 1
    1f08:	31 05       	cpc	r19, r1
    1f0a:	d1 f5       	brne	.+116    	; 0x1f80 <DIO_u8SetPortDirection+0x12a>
				case DIO_u8_OUTPUT :DIO_u8_DDRB_REG = 0xff;break;
    1f0c:	e7 e3       	ldi	r30, 0x37	; 55
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	8f ef       	ldi	r24, 0xFF	; 255
    1f12:	80 83       	st	Z, r24
    1f14:	35 c0       	rjmp	.+106    	; 0x1f80 <DIO_u8SetPortDirection+0x12a>
				case DIO_u8_INPUT :DIO_u8_DDRB_REG = 0x00;break ;
    1f16:	e7 e3       	ldi	r30, 0x37	; 55
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	10 82       	st	Z, r1
    1f1c:	31 c0       	rjmp	.+98     	; 0x1f80 <DIO_u8SetPortDirection+0x12a>
				}break ;

	   case DIO_u8_PORTC :
		   switch (Copy_u8PortDirection ){
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	3f 83       	std	Y+7, r19	; 0x07
    1f26:	2e 83       	std	Y+6, r18	; 0x06
    1f28:	8e 81       	ldd	r24, Y+6	; 0x06
    1f2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	51 f0       	breq	.+20     	; 0x1f44 <DIO_u8SetPortDirection+0xee>
    1f30:	2e 81       	ldd	r18, Y+6	; 0x06
    1f32:	3f 81       	ldd	r19, Y+7	; 0x07
    1f34:	21 30       	cpi	r18, 0x01	; 1
    1f36:	31 05       	cpc	r19, r1
    1f38:	19 f5       	brne	.+70     	; 0x1f80 <DIO_u8SetPortDirection+0x12a>
		   case DIO_u8_OUTPUT :DIO_u8_DDRC_REG = 0xff;break;
    1f3a:	e4 e3       	ldi	r30, 0x34	; 52
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	8f ef       	ldi	r24, 0xFF	; 255
    1f40:	80 83       	st	Z, r24
    1f42:	1e c0       	rjmp	.+60     	; 0x1f80 <DIO_u8SetPortDirection+0x12a>
		   case DIO_u8_INPUT :DIO_u8_DDRC_REG = 0x00;break ;
    1f44:	e4 e3       	ldi	r30, 0x34	; 52
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	10 82       	st	Z, r1
    1f4a:	1a c0       	rjmp	.+52     	; 0x1f80 <DIO_u8SetPortDirection+0x12a>
		   }break ;

	  case DIO_u8_PORTD :
		  switch (Copy_u8PortDirection ){
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	3d 83       	std	Y+5, r19	; 0x05
    1f54:	2c 83       	std	Y+4, r18	; 0x04
    1f56:	8c 81       	ldd	r24, Y+4	; 0x04
    1f58:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	51 f0       	breq	.+20     	; 0x1f72 <DIO_u8SetPortDirection+0x11c>
    1f5e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f60:	3d 81       	ldd	r19, Y+5	; 0x05
    1f62:	21 30       	cpi	r18, 0x01	; 1
    1f64:	31 05       	cpc	r19, r1
    1f66:	61 f4       	brne	.+24     	; 0x1f80 <DIO_u8SetPortDirection+0x12a>
		  case DIO_u8_OUTPUT :DIO_u8_DDRD_REG = 0xff;break;
    1f68:	e1 e3       	ldi	r30, 0x31	; 49
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	8f ef       	ldi	r24, 0xFF	; 255
    1f6e:	80 83       	st	Z, r24
    1f70:	07 c0       	rjmp	.+14     	; 0x1f80 <DIO_u8SetPortDirection+0x12a>
		  case DIO_u8_INPUT :DIO_u8_DDRD_REG = 0x00;break ;
    1f72:	e1 e3       	ldi	r30, 0x31	; 49
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	10 82       	st	Z, r1
    1f78:	03 c0       	rjmp	.+6      	; 0x1f80 <DIO_u8SetPortDirection+0x12a>
		  }break ;

     default :Local_u8Errorstate = STD_TYPES_NOTOK;
    1f7a:	19 82       	std	Y+1, r1	; 0x01
    1f7c:	01 c0       	rjmp	.+2      	; 0x1f80 <DIO_u8SetPortDirection+0x12a>
}
}
else {
Local_u8Errorstate = STD_TYPES_NOTOK;
    1f7e:	19 82       	std	Y+1, r1	; 0x01
} 
return Local_u8Errorstate  ;      
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f82:	2d 96       	adiw	r28, 0x0d	; 13
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	08 95       	ret

00001f94 <DIO_u8SetPortValue>:
/********************************************************/


u8 DIO_u8SetPortValue (u8 Copy_u8PortId ,u8 Copy_u8PortValue )
{
    1f94:	df 93       	push	r29
    1f96:	cf 93       	push	r28
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <DIO_u8SetPortValue+0x6>
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <DIO_u8SetPortValue+0x8>
    1f9c:	0f 92       	push	r0
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	8a 83       	std	Y+2, r24	; 0x02
    1fa4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Errorstate = STD_TYPES_OK ;
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	3d 83       	std	Y+5, r19	; 0x05
    1fb2:	2c 83       	std	Y+4, r18	; 0x04
    1fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	91 05       	cpc	r25, r1
    1fbc:	d1 f0       	breq	.+52     	; 0x1ff2 <DIO_u8SetPortValue+0x5e>
    1fbe:	2c 81       	ldd	r18, Y+4	; 0x04
    1fc0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fc2:	22 30       	cpi	r18, 0x02	; 2
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	2c f4       	brge	.+10     	; 0x1fd2 <DIO_u8SetPortValue+0x3e>
    1fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fca:	9d 81       	ldd	r25, Y+5	; 0x05
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	61 f0       	breq	.+24     	; 0x1fe8 <DIO_u8SetPortValue+0x54>
    1fd0:	1f c0       	rjmp	.+62     	; 0x2010 <DIO_u8SetPortValue+0x7c>
    1fd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd4:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd6:	22 30       	cpi	r18, 0x02	; 2
    1fd8:	31 05       	cpc	r19, r1
    1fda:	81 f0       	breq	.+32     	; 0x1ffc <DIO_u8SetPortValue+0x68>
    1fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fde:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe0:	83 30       	cpi	r24, 0x03	; 3
    1fe2:	91 05       	cpc	r25, r1
    1fe4:	81 f0       	breq	.+32     	; 0x2006 <DIO_u8SetPortValue+0x72>
    1fe6:	14 c0       	rjmp	.+40     	; 0x2010 <DIO_u8SetPortValue+0x7c>
{
	case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8PortValue ; break ;
    1fe8:	eb e3       	ldi	r30, 0x3B	; 59
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	80 83       	st	Z, r24
    1ff0:	10 c0       	rjmp	.+32     	; 0x2012 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8PortValue ; break ;
    1ff2:	e8 e3       	ldi	r30, 0x38	; 56
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	80 83       	st	Z, r24
    1ffa:	0b c0       	rjmp	.+22     	; 0x2012 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTC:DIO_u8_PORTC_REG =Copy_u8PortValue ; break ;
    1ffc:	e5 e3       	ldi	r30, 0x35	; 53
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	80 83       	st	Z, r24
    2004:	06 c0       	rjmp	.+12     	; 0x2012 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTD:DIO_u8_PORTD_REG =Copy_u8PortValue ; break ;
    2006:	e2 e3       	ldi	r30, 0x32	; 50
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	80 83       	st	Z, r24
    200e:	01 c0       	rjmp	.+2      	; 0x2012 <DIO_u8SetPortValue+0x7e>
	default :Local_u8Errorstate = STD_TYPES_NOTOK;
    2010:	19 82       	std	Y+1, r1	; 0x01
}
return Local_u8Errorstate  ;
    2012:	89 81       	ldd	r24, Y+1	; 0x01
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	cf 91       	pop	r28
    2020:	df 91       	pop	r29
    2022:	08 95       	ret

00002024 <DIO_u8GetPortValue>:
/*********************************************/

u8 DIO_u8GetPortValue (u8 Copy_u8PortId ,u8 *Copy_pu8ReturndPortValue )
{
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	00 d0       	rcall	.+0      	; 0x202a <DIO_u8GetPortValue+0x6>
    202a:	00 d0       	rcall	.+0      	; 0x202c <DIO_u8GetPortValue+0x8>
    202c:	00 d0       	rcall	.+0      	; 0x202e <DIO_u8GetPortValue+0xa>
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	8a 83       	std	Y+2, r24	; 0x02
    2034:	7c 83       	std	Y+4, r23	; 0x04
    2036:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Errorstate = STD_TYPES_OK ;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pu8ReturndPortValue!= NULL)
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	9c 81       	ldd	r25, Y+4	; 0x04
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	e9 f1       	breq	.+122    	; 0x20be <DIO_u8GetPortValue+0x9a>
{
	switch (Copy_u8PortId)
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
    2046:	28 2f       	mov	r18, r24
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	3e 83       	std	Y+6, r19	; 0x06
    204c:	2d 83       	std	Y+5, r18	; 0x05
    204e:	8d 81       	ldd	r24, Y+5	; 0x05
    2050:	9e 81       	ldd	r25, Y+6	; 0x06
    2052:	81 30       	cpi	r24, 0x01	; 1
    2054:	91 05       	cpc	r25, r1
    2056:	e1 f0       	breq	.+56     	; 0x2090 <DIO_u8GetPortValue+0x6c>
    2058:	2d 81       	ldd	r18, Y+5	; 0x05
    205a:	3e 81       	ldd	r19, Y+6	; 0x06
    205c:	22 30       	cpi	r18, 0x02	; 2
    205e:	31 05       	cpc	r19, r1
    2060:	2c f4       	brge	.+10     	; 0x206c <DIO_u8GetPortValue+0x48>
    2062:	8d 81       	ldd	r24, Y+5	; 0x05
    2064:	9e 81       	ldd	r25, Y+6	; 0x06
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	61 f0       	breq	.+24     	; 0x2082 <DIO_u8GetPortValue+0x5e>
    206a:	27 c0       	rjmp	.+78     	; 0x20ba <DIO_u8GetPortValue+0x96>
    206c:	2d 81       	ldd	r18, Y+5	; 0x05
    206e:	3e 81       	ldd	r19, Y+6	; 0x06
    2070:	22 30       	cpi	r18, 0x02	; 2
    2072:	31 05       	cpc	r19, r1
    2074:	a1 f0       	breq	.+40     	; 0x209e <DIO_u8GetPortValue+0x7a>
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	9e 81       	ldd	r25, Y+6	; 0x06
    207a:	83 30       	cpi	r24, 0x03	; 3
    207c:	91 05       	cpc	r25, r1
    207e:	b1 f0       	breq	.+44     	; 0x20ac <DIO_u8GetPortValue+0x88>
    2080:	1c c0       	rjmp	.+56     	; 0x20ba <DIO_u8GetPortValue+0x96>
	{
		case DIO_u8_PORTA:*Copy_pu8ReturndPortValue = DIO_u8_PORTA_REG  ; break ;
    2082:	eb e3       	ldi	r30, 0x3B	; 59
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	eb 81       	ldd	r30, Y+3	; 0x03
    208a:	fc 81       	ldd	r31, Y+4	; 0x04
    208c:	80 83       	st	Z, r24
    208e:	18 c0       	rjmp	.+48     	; 0x20c0 <DIO_u8GetPortValue+0x9c>
		case DIO_u8_PORTB:*Copy_pu8ReturndPortValue = DIO_u8_PORTB_REG  ; break ;
    2090:	e8 e3       	ldi	r30, 0x38	; 56
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	eb 81       	ldd	r30, Y+3	; 0x03
    2098:	fc 81       	ldd	r31, Y+4	; 0x04
    209a:	80 83       	st	Z, r24
    209c:	11 c0       	rjmp	.+34     	; 0x20c0 <DIO_u8GetPortValue+0x9c>
		case DIO_u8_PORTC:*Copy_pu8ReturndPortValue = DIO_u8_PORTC_REG  ; break ;
    209e:	e5 e3       	ldi	r30, 0x35	; 53
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	eb 81       	ldd	r30, Y+3	; 0x03
    20a6:	fc 81       	ldd	r31, Y+4	; 0x04
    20a8:	80 83       	st	Z, r24
    20aa:	0a c0       	rjmp	.+20     	; 0x20c0 <DIO_u8GetPortValue+0x9c>
		case DIO_u8_PORTD:*Copy_pu8ReturndPortValue = DIO_u8_PORTD_REG  ; break ;
    20ac:	e2 e3       	ldi	r30, 0x32	; 50
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	eb 81       	ldd	r30, Y+3	; 0x03
    20b4:	fc 81       	ldd	r31, Y+4	; 0x04
    20b6:	80 83       	st	Z, r24
    20b8:	03 c0       	rjmp	.+6      	; 0x20c0 <DIO_u8GetPortValue+0x9c>
		default :Local_u8Errorstate = STD_TYPES_NOTOK;
    20ba:	19 82       	std	Y+1, r1	; 0x01
    20bc:	01 c0       	rjmp	.+2      	; 0x20c0 <DIO_u8GetPortValue+0x9c>
}
}
else {
Local_u8Errorstate = STD_TYPES_NOTOK;
    20be:	19 82       	std	Y+1, r1	; 0x01
}
return Local_u8Errorstate  ;
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
} 
    20c2:	26 96       	adiw	r28, 0x06	; 6
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <__udivmodqi4>:
    20d4:	99 1b       	sub	r25, r25
    20d6:	79 e0       	ldi	r23, 0x09	; 9
    20d8:	04 c0       	rjmp	.+8      	; 0x20e2 <__udivmodqi4_ep>

000020da <__udivmodqi4_loop>:
    20da:	99 1f       	adc	r25, r25
    20dc:	96 17       	cp	r25, r22
    20de:	08 f0       	brcs	.+2      	; 0x20e2 <__udivmodqi4_ep>
    20e0:	96 1b       	sub	r25, r22

000020e2 <__udivmodqi4_ep>:
    20e2:	88 1f       	adc	r24, r24
    20e4:	7a 95       	dec	r23
    20e6:	c9 f7       	brne	.-14     	; 0x20da <__udivmodqi4_loop>
    20e8:	80 95       	com	r24
    20ea:	08 95       	ret

000020ec <__udivmodsi4>:
    20ec:	a1 e2       	ldi	r26, 0x21	; 33
    20ee:	1a 2e       	mov	r1, r26
    20f0:	aa 1b       	sub	r26, r26
    20f2:	bb 1b       	sub	r27, r27
    20f4:	fd 01       	movw	r30, r26
    20f6:	0d c0       	rjmp	.+26     	; 0x2112 <__udivmodsi4_ep>

000020f8 <__udivmodsi4_loop>:
    20f8:	aa 1f       	adc	r26, r26
    20fa:	bb 1f       	adc	r27, r27
    20fc:	ee 1f       	adc	r30, r30
    20fe:	ff 1f       	adc	r31, r31
    2100:	a2 17       	cp	r26, r18
    2102:	b3 07       	cpc	r27, r19
    2104:	e4 07       	cpc	r30, r20
    2106:	f5 07       	cpc	r31, r21
    2108:	20 f0       	brcs	.+8      	; 0x2112 <__udivmodsi4_ep>
    210a:	a2 1b       	sub	r26, r18
    210c:	b3 0b       	sbc	r27, r19
    210e:	e4 0b       	sbc	r30, r20
    2110:	f5 0b       	sbc	r31, r21

00002112 <__udivmodsi4_ep>:
    2112:	66 1f       	adc	r22, r22
    2114:	77 1f       	adc	r23, r23
    2116:	88 1f       	adc	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	1a 94       	dec	r1
    211c:	69 f7       	brne	.-38     	; 0x20f8 <__udivmodsi4_loop>
    211e:	60 95       	com	r22
    2120:	70 95       	com	r23
    2122:	80 95       	com	r24
    2124:	90 95       	com	r25
    2126:	9b 01       	movw	r18, r22
    2128:	ac 01       	movw	r20, r24
    212a:	bd 01       	movw	r22, r26
    212c:	cf 01       	movw	r24, r30
    212e:	08 95       	ret

00002130 <__prologue_saves__>:
    2130:	2f 92       	push	r2
    2132:	3f 92       	push	r3
    2134:	4f 92       	push	r4
    2136:	5f 92       	push	r5
    2138:	6f 92       	push	r6
    213a:	7f 92       	push	r7
    213c:	8f 92       	push	r8
    213e:	9f 92       	push	r9
    2140:	af 92       	push	r10
    2142:	bf 92       	push	r11
    2144:	cf 92       	push	r12
    2146:	df 92       	push	r13
    2148:	ef 92       	push	r14
    214a:	ff 92       	push	r15
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	ca 1b       	sub	r28, r26
    215a:	db 0b       	sbc	r29, r27
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	09 94       	ijmp

00002168 <__epilogue_restores__>:
    2168:	2a 88       	ldd	r2, Y+18	; 0x12
    216a:	39 88       	ldd	r3, Y+17	; 0x11
    216c:	48 88       	ldd	r4, Y+16	; 0x10
    216e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2170:	6e 84       	ldd	r6, Y+14	; 0x0e
    2172:	7d 84       	ldd	r7, Y+13	; 0x0d
    2174:	8c 84       	ldd	r8, Y+12	; 0x0c
    2176:	9b 84       	ldd	r9, Y+11	; 0x0b
    2178:	aa 84       	ldd	r10, Y+10	; 0x0a
    217a:	b9 84       	ldd	r11, Y+9	; 0x09
    217c:	c8 84       	ldd	r12, Y+8	; 0x08
    217e:	df 80       	ldd	r13, Y+7	; 0x07
    2180:	ee 80       	ldd	r14, Y+6	; 0x06
    2182:	fd 80       	ldd	r15, Y+5	; 0x05
    2184:	0c 81       	ldd	r16, Y+4	; 0x04
    2186:	1b 81       	ldd	r17, Y+3	; 0x03
    2188:	aa 81       	ldd	r26, Y+2	; 0x02
    218a:	b9 81       	ldd	r27, Y+1	; 0x01
    218c:	ce 0f       	add	r28, r30
    218e:	d1 1d       	adc	r29, r1
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	cd bf       	out	0x3d, r28	; 61
    219a:	ed 01       	movw	r28, r26
    219c:	08 95       	ret

0000219e <_exit>:
    219e:	f8 94       	cli

000021a0 <__stop_program>:
    21a0:	ff cf       	rjmp	.-2      	; 0x21a0 <__stop_program>
