
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004f4  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000523  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000531  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001514  00000000  00000000  00000629  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077e  00000000  00000000  00001b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a6f  00000000  00000000  000022bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000258  00000000  00000000  00002d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027a  00000000  00000000  00002f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bab  00000000  00000000  000031fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000452  00000452  000004e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.TOG_LED 00000028  000003a0  000003a0  00000434  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000022  00000410  00000410  000004a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.Local_u8_Flag.1629 00000001  00800066  00800066  000004f4  2**0
                  ALLOC
 17 .text.DIO_enuInit 00000024  000003c8  000003c8  0000045c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.DIO_enuSetPinValue 000000e4  000001c6  000001c6  0000025a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.EXTI_enuExtiEnable 00000118  000000ae  000000ae  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.EXTI_enuExtiSetCallBack 00000024  000003ec  000003ec  00000480  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_1 00000052  000002aa  000002aa  0000033e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_2 00000052  000002fc  000002fc  00000390  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_3 00000052  0000034e  0000034e  000003e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.EXTI_ApfEXTI 00000006  00800060  00800060  000004f4  2**0
                  ALLOC
 25 .text.GI_enuGIEnable 0000000a  00000448  00000448  000004dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_fini 00000002  0000045a  0000045a  000004ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_funcs_on_exit 00000002  0000045c  0000045c  000004f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_simulator_exit 00000002  0000045e  0000045e  000004f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.exit    00000016  00000432  00000432  000004c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text._Exit   00000004  00000456  00000456  000004ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_1>
   8:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_2>
   c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_3>
  10:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>
  14:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>
  18:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>
  1c:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>
  20:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>
  24:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>
  28:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>
  2c:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>
  30:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>
  34:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>
  38:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>
  3c:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>
  40:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>
  44:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>
  48:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>
  4c:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>
  50:	0c 94 29 02 	jmp	0x452	; 0x452 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 67       	ori	r16, 0x70	; 112
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 08 02 	call	0x410	; 0x410 <main>
  a6:	0c 94 19 02 	jmp	0x432	; 0x432 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

00000452 <__bad_interrupt>:
 452:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.TOG_LED:

000003a0 <TOG_LED>:
}

void TOG_LED(void)
{
	static u8 Local_u8_Flag =0;
	if(Local_u8_Flag == 0)
 3a0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Local_u8_Flag.1629>
 3a4:	81 11       	cpse	r24, r1
 3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <TOG_LED+0x18>
	{
		DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8HIGH);
 3a8:	41 e0       	ldi	r20, 0x01	; 1
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_enuSetPinValue>
		Local_u8_Flag=1;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Local_u8_Flag.1629>
 3b6:	08 95       	ret
	}
	else{
		DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8LOW);
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_enuSetPinValue>
		Local_u8_Flag=0;
 3c2:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Local_u8_Flag.1629>
 3c6:	08 95       	ret

Disassembly of section .text.main:

00000410 <main>:

void TOG_LED(void);

int main()
{
	DIO_enuInit();
 410:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <DIO_enuInit>
	GI_enuGIEnable();
 414:	0e 94 24 02 	call	0x448	; 0x448 <GI_enuGIEnable>
	EXTI_enuExtiEnable(EXTI_u8_INT0,EXTI_u8_FALLING_EDGE);
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0e 94 57 00 	call	0xae	; 0xae <_etext>
	SET_BIT(SREG  ,7);
 420:	8f b7       	in	r24, 0x3f	; 63
 422:	80 68       	ori	r24, 0x80	; 128
 424:	8f bf       	out	0x3f, r24	; 63
	EXTI_enuExtiSetCallBack(&TOG_LED,EXTI_u8_INT0);
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	80 ed       	ldi	r24, 0xD0	; 208
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <EXTI_enuExtiSetCallBack>
 430:	ff cf       	rjmp	.-2      	; 0x430 <main+0x20>

Disassembly of section .text.DIO_enuInit:

000003c8 <DIO_enuInit>:

ERROR DIO_enuInit(void)
{
	ERROR Local_enuErrorStatus = STD_OK;

	DDRA = CONC(DIO_u8PA7_DIR , DIO_u8PA6_DIR , DIO_u8PA5_DIR , DIO_u8PA4_DIR , DIO_u8PA3_DIR , DIO_u8PA2_DIR , DIO_u8PA1_DIR , DIO_u8PA0_DIR);
 3c8:	87 e5       	ldi	r24, 0x57	; 87
 3ca:	8a bb       	out	0x1a, r24	; 26
	PORTA = CONC(DIO_u8PA7_VALUE , DIO_u8PA6_VALUE , DIO_u8PA5_VALUE , DIO_u8PA4_VALUE , DIO_u8PA3_VALUE , DIO_u8PA2_VALUE , DIO_u8PA1_VALUE , DIO_u8PA0_VALUE);
 3cc:	8a e8       	ldi	r24, 0x8A	; 138
 3ce:	8b bb       	out	0x1b, r24	; 27

	DDRB = CONC(DIO_u8PB7_DIR , DIO_u8PB6_DIR , DIO_u8PB5_DIR , DIO_u8PB4_DIR , DIO_u8PB3_DIR , DIO_u8PB2_DIR , DIO_u8PB1_DIR , DIO_u8PB0_DIR);
 3d0:	84 e5       	ldi	r24, 0x54	; 84
 3d2:	87 bb       	out	0x17, r24	; 23
	PORTB = CONC(DIO_u8PB7_VALUE , DIO_u8PB6_VALUE , DIO_u8PB5_VALUE , DIO_u8PB4_VALUE , DIO_u8PB3_VALUE , DIO_u8PB2_VALUE , DIO_u8PB1_VALUE , DIO_u8PB0_VALUE);
 3d4:	85 e7       	ldi	r24, 0x75	; 117
 3d6:	88 bb       	out	0x18, r24	; 24

	DDRC = CONC(DIO_u8PC7_DIR , DIO_u8PC6_DIR , DIO_u8PC5_DIR , DIO_u8PC4_DIR , DIO_u8PC3_DIR , DIO_u8PC2_DIR , DIO_u8PC1_DIR , DIO_u8PC0_DIR);
 3d8:	85 e9       	ldi	r24, 0x95	; 149
 3da:	84 bb       	out	0x14, r24	; 20
	PORTC = CONC(DIO_u8PC7_VALUE , DIO_u8PC6_VALUE , DIO_u8PC5_VALUE , DIO_u8PC4_VALUE , DIO_u8PC3_VALUE , DIO_u8PC2_VALUE , DIO_u8PC1_VALUE , DIO_u8PC0_VALUE);
 3dc:	88 e6       	ldi	r24, 0x68	; 104
 3de:	85 bb       	out	0x15, r24	; 21

	DDRD = CONC(DIO_u8PD7_DIR , DIO_u8PD6_DIR , DIO_u8PD5_DIR , DIO_u8PD4_DIR , DIO_u8PD3_DIR , DIO_u8PD2_DIR , DIO_u8PD1_DIR , DIO_u8PD0_DIR);
 3e0:	89 e6       	ldi	r24, 0x69	; 105
 3e2:	81 bb       	out	0x11, r24	; 17
	PORTD = CONC(DIO_u8PD7_VALUE , DIO_u8PD6_VALUE , DIO_u8PD5_VALUE , DIO_u8PD4_VALUE , DIO_u8PD3_VALUE , DIO_u8PD2_VALUE , DIO_u8PD1_VALUE , DIO_u8PD0_VALUE);
 3e4:	88 e4       	ldi	r24, 0x48	; 72
 3e6:	82 bb       	out	0x12, r24	; 18

	return Local_enuErrorStatus;
}
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	08 95       	ret

Disassembly of section .text.DIO_enuSetPinValue:

000001c6 <DIO_enuSetPinValue>:

ERROR DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
	ERROR Local_enuErrorStatus = STD_OK;

	if(Copy_u8PortID <= DIO_u8PORTD
 1c6:	84 30       	cpi	r24, 0x04	; 4
 1c8:	08 f0       	brcs	.+2      	; 0x1cc <DIO_enuSetPinValue+0x6>
 1ca:	67 c0       	rjmp	.+206    	; 0x29a <DIO_enuSetPinValue+0xd4>
	&& Copy_u8PinID <= DIO_u8PIN7
 1cc:	68 30       	cpi	r22, 0x08	; 8
 1ce:	08 f0       	brcs	.+2      	; 0x1d2 <DIO_enuSetPinValue+0xc>
 1d0:	66 c0       	rjmp	.+204    	; 0x29e <DIO_enuSetPinValue+0xd8>
	&& (Copy_u8PinValue <= DIO_u8HIGH ||Copy_u8PinValue <= DIO_u8PULL_UP ))
 1d2:	42 30       	cpi	r20, 0x02	; 2
 1d4:	08 f0       	brcs	.+2      	; 0x1d8 <DIO_enuSetPinValue+0x12>
 1d6:	65 c0       	rjmp	.+202    	; 0x2a2 <DIO_enuSetPinValue+0xdc>
	{
		switch(Copy_u8PortID)
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	e9 f0       	breq	.+58     	; 0x216 <DIO_enuSetPinValue+0x50>
 1dc:	30 f0       	brcs	.+12     	; 0x1ea <DIO_enuSetPinValue+0x24>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	81 f1       	breq	.+96     	; 0x242 <DIO_enuSetPinValue+0x7c>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <DIO_enuSetPinValue+0x22>
 1e6:	43 c0       	rjmp	.+134    	; 0x26e <DIO_enuSetPinValue+0xa8>
 1e8:	5e c0       	rjmp	.+188    	; 0x2a6 <DIO_enuSetPinValue+0xe0>
		{
			case DIO_u8PORTA:

			PORTA &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	06 2e       	mov	r0, r22
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_enuSetPinValue+0x30>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	0a 94       	dec	r0
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_enuSetPinValue+0x2c>
 1fa:	80 95       	com	r24
 1fc:	2b b3       	in	r18, 0x1b	; 27
 1fe:	28 23       	and	r18, r24

			PORTA |=  (Copy_u8PinValue <<Copy_u8PinID);
 200:	84 2f       	mov	r24, r20
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_enuSetPinValue+0x44>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_enuSetPinValue+0x40>
 20e:	82 2b       	or	r24, r18
 210:	8b bb       	out	0x1b, r24	; 27

}

ERROR DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
	ERROR Local_enuErrorStatus = STD_OK;
 212:	80 e0       	ldi	r24, 0x00	; 0

			PORTA &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);

			PORTA |=  (Copy_u8PinValue <<Copy_u8PinID);

			break;
 214:	08 95       	ret
			case DIO_u8PORTB:
			PORTB &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	06 2e       	mov	r0, r22
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_enuSetPinValue+0x5c>
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_enuSetPinValue+0x58>
 226:	20 95       	com	r18
 228:	88 b3       	in	r24, 0x18	; 24
 22a:	28 23       	and	r18, r24

			PORTB |=  (Copy_u8PinValue <<Copy_u8PinID);
 22c:	84 2f       	mov	r24, r20
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_enuSetPinValue+0x70>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_enuSetPinValue+0x6c>
 23a:	82 2b       	or	r24, r18
 23c:	88 bb       	out	0x18, r24	; 24

}

ERROR DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
	ERROR Local_enuErrorStatus = STD_OK;
 23e:	80 e0       	ldi	r24, 0x00	; 0
			case DIO_u8PORTB:
			PORTB &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);

			PORTB |=  (Copy_u8PinValue <<Copy_u8PinID);

			break;
 240:	08 95       	ret
			case DIO_u8PORTC:
			PORTC &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
 242:	21 e0       	ldi	r18, 0x01	; 1
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	06 2e       	mov	r0, r22
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_enuSetPinValue+0x88>
 24a:	22 0f       	add	r18, r18
 24c:	33 1f       	adc	r19, r19
 24e:	0a 94       	dec	r0
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_enuSetPinValue+0x84>
 252:	20 95       	com	r18
 254:	85 b3       	in	r24, 0x15	; 21
 256:	28 23       	and	r18, r24

			PORTC |=  (Copy_u8PinValue <<Copy_u8PinID);
 258:	84 2f       	mov	r24, r20
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_enuSetPinValue+0x9c>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_enuSetPinValue+0x98>
 266:	82 2b       	or	r24, r18
 268:	85 bb       	out	0x15, r24	; 21

}

ERROR DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
	ERROR Local_enuErrorStatus = STD_OK;
 26a:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case DIO_u8PORTC:
			PORTC &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);

			PORTC |=  (Copy_u8PinValue <<Copy_u8PinID);
			break;
 26c:	08 95       	ret
			case DIO_u8PORTD:
			PORTD &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	06 2e       	mov	r0, r22
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_enuSetPinValue+0xb4>
 276:	22 0f       	add	r18, r18
 278:	33 1f       	adc	r19, r19
 27a:	0a 94       	dec	r0
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_enuSetPinValue+0xb0>
 27e:	20 95       	com	r18
 280:	82 b3       	in	r24, 0x12	; 18
 282:	28 23       	and	r18, r24

			PORTD |=  (Copy_u8PinValue <<Copy_u8PinID);
 284:	84 2f       	mov	r24, r20
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_enuSetPinValue+0xc8>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_enuSetPinValue+0xc4>
 292:	82 2b       	or	r24, r18
 294:	82 bb       	out	0x12, r24	; 18

}

ERROR DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
	ERROR Local_enuErrorStatus = STD_OK;
 296:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case DIO_u8PORTD:
			PORTD &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);

			PORTD |=  (Copy_u8PinValue <<Copy_u8PinID);
			break;
 298:	08 95       	ret
		}
	}
	else
	{
		Local_enuErrorStatus = ES_OUT_OF_RANGE;
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	08 95       	ret
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	08 95       	ret
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	08 95       	ret

}

ERROR DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
	ERROR Local_enuErrorStatus = STD_OK;
 2a6:	80 e0       	ldi	r24, 0x00	; 0

	}

	return Local_enuErrorStatus;

}
 2a8:	08 95       	ret

Disassembly of section .text.EXTI_enuExtiEnable:

000000ae <EXTI_enuExtiEnable>:
	else 
	{
		 Local_u8_errorState = STD_NOTOK ;
	}
	 return  Local_u8_errorState;
}
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	c9 f1       	breq	.+114    	; 0x124 <EXTI_enuExtiEnable+0x76>
  b2:	20 f0       	brcs	.+8      	; 0xbc <EXTI_enuExtiEnable+0xe>
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	09 f4       	brne	.+2      	; 0xba <EXTI_enuExtiEnable+0xc>
  b8:	69 c0       	rjmp	.+210    	; 0x18c <EXTI_enuExtiEnable+0xde>
  ba:	7d c0       	rjmp	.+250    	; 0x1b6 <EXTI_enuExtiEnable+0x108>
  bc:	61 30       	cpi	r22, 0x01	; 1
  be:	89 f0       	breq	.+34     	; 0xe2 <EXTI_enuExtiEnable+0x34>
  c0:	28 f0       	brcs	.+10     	; 0xcc <EXTI_enuExtiEnable+0x1e>
  c2:	62 30       	cpi	r22, 0x02	; 2
  c4:	c9 f0       	breq	.+50     	; 0xf8 <EXTI_enuExtiEnable+0x4a>
  c6:	63 30       	cpi	r22, 0x03	; 3
  c8:	11 f1       	breq	.+68     	; 0x10e <EXTI_enuExtiEnable+0x60>
  ca:	77 c0       	rjmp	.+238    	; 0x1ba <EXTI_enuExtiEnable+0x10c>
  cc:	85 b7       	in	r24, 0x35	; 53
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	85 bf       	out	0x35, r24	; 53
  d2:	85 b7       	in	r24, 0x35	; 53
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	85 bf       	out	0x35, r24	; 53
  d8:	8b b7       	in	r24, 0x3b	; 59
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	8b bf       	out	0x3b, r24	; 59
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 95       	ret
  e2:	85 b7       	in	r24, 0x35	; 53
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	85 bf       	out	0x35, r24	; 53
  e8:	85 b7       	in	r24, 0x35	; 53
  ea:	8e 7f       	andi	r24, 0xFE	; 254
  ec:	85 bf       	out	0x35, r24	; 53
  ee:	8b b7       	in	r24, 0x3b	; 59
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	8b bf       	out	0x3b, r24	; 59
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret
  f8:	85 b7       	in	r24, 0x35	; 53
  fa:	8d 7f       	andi	r24, 0xFD	; 253
  fc:	85 bf       	out	0x35, r24	; 53
  fe:	85 b7       	in	r24, 0x35	; 53
 100:	81 60       	ori	r24, 0x01	; 1
 102:	85 bf       	out	0x35, r24	; 53
 104:	8b b7       	in	r24, 0x3b	; 59
 106:	80 64       	ori	r24, 0x40	; 64
 108:	8b bf       	out	0x3b, r24	; 59
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	08 95       	ret
 10e:	85 b7       	in	r24, 0x35	; 53
 110:	8d 7f       	andi	r24, 0xFD	; 253
 112:	85 bf       	out	0x35, r24	; 53
 114:	85 b7       	in	r24, 0x35	; 53
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	85 bf       	out	0x35, r24	; 53
 11a:	8b b7       	in	r24, 0x3b	; 59
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	8b bf       	out	0x3b, r24	; 59
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	08 95       	ret
 124:	61 30       	cpi	r22, 0x01	; 1
 126:	89 f0       	breq	.+34     	; 0x14a <EXTI_enuExtiEnable+0x9c>
 128:	28 f0       	brcs	.+10     	; 0x134 <EXTI_enuExtiEnable+0x86>
 12a:	62 30       	cpi	r22, 0x02	; 2
 12c:	c9 f0       	breq	.+50     	; 0x160 <EXTI_enuExtiEnable+0xb2>
 12e:	63 30       	cpi	r22, 0x03	; 3
 130:	11 f1       	breq	.+68     	; 0x176 <EXTI_enuExtiEnable+0xc8>
 132:	45 c0       	rjmp	.+138    	; 0x1be <EXTI_enuExtiEnable+0x110>
 134:	85 b7       	in	r24, 0x35	; 53
 136:	88 60       	ori	r24, 0x08	; 8
 138:	85 bf       	out	0x35, r24	; 53
 13a:	85 b7       	in	r24, 0x35	; 53
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	85 bf       	out	0x35, r24	; 53
 140:	8b b7       	in	r24, 0x3b	; 59
 142:	80 68       	ori	r24, 0x80	; 128
 144:	8b bf       	out	0x3b, r24	; 59
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	08 95       	ret
 14a:	85 b7       	in	r24, 0x35	; 53
 14c:	88 60       	ori	r24, 0x08	; 8
 14e:	85 bf       	out	0x35, r24	; 53
 150:	85 b7       	in	r24, 0x35	; 53
 152:	8b 7f       	andi	r24, 0xFB	; 251
 154:	85 bf       	out	0x35, r24	; 53
 156:	8b b7       	in	r24, 0x3b	; 59
 158:	80 68       	ori	r24, 0x80	; 128
 15a:	8b bf       	out	0x3b, r24	; 59
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	08 95       	ret
 160:	85 b7       	in	r24, 0x35	; 53
 162:	87 7f       	andi	r24, 0xF7	; 247
 164:	85 bf       	out	0x35, r24	; 53
 166:	85 b7       	in	r24, 0x35	; 53
 168:	84 60       	ori	r24, 0x04	; 4
 16a:	85 bf       	out	0x35, r24	; 53
 16c:	8b b7       	in	r24, 0x3b	; 59
 16e:	80 68       	ori	r24, 0x80	; 128
 170:	8b bf       	out	0x3b, r24	; 59
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 95       	ret
 176:	85 b7       	in	r24, 0x35	; 53
 178:	87 7f       	andi	r24, 0xF7	; 247
 17a:	85 bf       	out	0x35, r24	; 53
 17c:	85 b7       	in	r24, 0x35	; 53
 17e:	8b 7f       	andi	r24, 0xFB	; 251
 180:	85 bf       	out	0x35, r24	; 53
 182:	8b b7       	in	r24, 0x3b	; 59
 184:	80 68       	ori	r24, 0x80	; 128
 186:	8b bf       	out	0x3b, r24	; 59
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	08 95       	ret
 18c:	66 23       	and	r22, r22
 18e:	19 f0       	breq	.+6      	; 0x196 <EXTI_enuExtiEnable+0xe8>
 190:	61 30       	cpi	r22, 0x01	; 1
 192:	49 f0       	breq	.+18     	; 0x1a6 <EXTI_enuExtiEnable+0xf8>
 194:	16 c0       	rjmp	.+44     	; 0x1c2 <EXTI_enuExtiEnable+0x114>
 196:	84 b7       	in	r24, 0x34	; 52
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	84 bf       	out	0x34, r24	; 52
 19c:	8b b7       	in	r24, 0x3b	; 59
 19e:	80 62       	ori	r24, 0x20	; 32
 1a0:	8b bf       	out	0x3b, r24	; 59
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	08 95       	ret
 1a6:	84 b7       	in	r24, 0x34	; 52
 1a8:	8f 7b       	andi	r24, 0xBF	; 191
 1aa:	84 bf       	out	0x34, r24	; 52
 1ac:	8b b7       	in	r24, 0x3b	; 59
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	8b bf       	out	0x3b, r24	; 59
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	08 95       	ret
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	08 95       	ret
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	08 95       	ret
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	08 95       	ret
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	08 95       	ret

Disassembly of section .text.EXTI_enuExtiSetCallBack:

000003ec <EXTI_enuExtiSetCallBack>:
/*****************************************************************/

ERROR  EXTI_enuExtiSetCallBack(void(*pf_ISR)(void), u8 Copy_u8ISRIndex)
{
	u8 Local_u8_errorState = STD_OK ;
	if((Copy_u8ISRIndex <= EXTI_u8_INT2) && (pf_ISR != NULL))
 3ec:	63 30       	cpi	r22, 0x03	; 3
 3ee:	60 f4       	brcc	.+24     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3f0:	00 97       	sbiw	r24, 0x00	; 0
 3f2:	61 f0       	breq	.+24     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	{
		EXTI_ApfEXTI[Copy_u8ISRIndex]=pf_ISR;
 3f4:	e6 2f       	mov	r30, r22
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	ee 0f       	add	r30, r30
 3fa:	ff 1f       	adc	r31, r31
 3fc:	e0 5a       	subi	r30, 0xA0	; 160
 3fe:	ff 4f       	sbci	r31, 0xFF	; 255
 400:	91 83       	std	Z+1, r25	; 0x01
 402:	80 83       	st	Z, r24
}
/*****************************************************************/

ERROR  EXTI_enuExtiSetCallBack(void(*pf_ISR)(void), u8 Copy_u8ISRIndex)
{
	u8 Local_u8_errorState = STD_OK ;
 404:	80 e0       	ldi	r24, 0x00	; 0
	if((Copy_u8ISRIndex <= EXTI_u8_INT2) && (pf_ISR != NULL))
	{
		EXTI_ApfEXTI[Copy_u8ISRIndex]=pf_ISR;
 406:	08 95       	ret
	}
	else 
	{
		Local_u8_errorState = STD_NOTOK ; 
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	08 95       	ret
 40c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Local_u8_errorState ;
}
 40e:	08 95       	ret

Disassembly of section .text.__vector_1:

000002aa <__vector_1>:
/****************************************************************/

// ISR EXTI0
void __vector_1(void)  __attribute__((signal));
void __vector_1(void) 
{
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	6f 93       	push	r22
 2be:	7f 93       	push	r23
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	af 93       	push	r26
 2c6:	bf 93       	push	r27
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
	if(EXTI_ApfEXTI[EXTI_u8_INT0] != NULL)
 2cc:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
 2d0:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <_edata+0x1>
 2d4:	30 97       	sbiw	r30, 0x00	; 0
 2d6:	09 f0       	breq	.+2      	; 0x2da <__vector_1+0x30>
	{
		EXTI_ApfEXTI[EXTI_u8_INT0]();
 2d8:	09 95       	icall
	}
}
 2da:	ff 91       	pop	r31
 2dc:	ef 91       	pop	r30
 2de:	bf 91       	pop	r27
 2e0:	af 91       	pop	r26
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	7f 91       	pop	r23
 2e8:	6f 91       	pop	r22
 2ea:	5f 91       	pop	r21
 2ec:	4f 91       	pop	r20
 2ee:	3f 91       	pop	r19
 2f0:	2f 91       	pop	r18
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

Disassembly of section .text.__vector_2:

000002fc <__vector_2>:

// ISR EXTI1
void __vector_2(void)  __attribute__((signal));
void __vector_2(void)
{
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	2f 93       	push	r18
 308:	3f 93       	push	r19
 30a:	4f 93       	push	r20
 30c:	5f 93       	push	r21
 30e:	6f 93       	push	r22
 310:	7f 93       	push	r23
 312:	8f 93       	push	r24
 314:	9f 93       	push	r25
 316:	af 93       	push	r26
 318:	bf 93       	push	r27
 31a:	ef 93       	push	r30
 31c:	ff 93       	push	r31
	if(EXTI_ApfEXTI[EXTI_u8_INT1] != NULL)
 31e:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <_edata+0x2>
 322:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <_edata+0x3>
 326:	30 97       	sbiw	r30, 0x00	; 0
 328:	09 f0       	breq	.+2      	; 0x32c <__vector_2+0x30>
	{
		EXTI_ApfEXTI[EXTI_u8_INT1]();
 32a:	09 95       	icall
	}
}
 32c:	ff 91       	pop	r31
 32e:	ef 91       	pop	r30
 330:	bf 91       	pop	r27
 332:	af 91       	pop	r26
 334:	9f 91       	pop	r25
 336:	8f 91       	pop	r24
 338:	7f 91       	pop	r23
 33a:	6f 91       	pop	r22
 33c:	5f 91       	pop	r21
 33e:	4f 91       	pop	r20
 340:	3f 91       	pop	r19
 342:	2f 91       	pop	r18
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

Disassembly of section .text.__vector_3:

0000034e <__vector_3>:

// ISR EXTI2
void __vector_3(void)  __attribute__((signal));
void __vector_3(void)
{
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	2f 93       	push	r18
 35a:	3f 93       	push	r19
 35c:	4f 93       	push	r20
 35e:	5f 93       	push	r21
 360:	6f 93       	push	r22
 362:	7f 93       	push	r23
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25
 368:	af 93       	push	r26
 36a:	bf 93       	push	r27
 36c:	ef 93       	push	r30
 36e:	ff 93       	push	r31
	if(EXTI_ApfEXTI[EXTI_u8_INT2] != NULL)
 370:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <_edata+0x4>
 374:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <_edata+0x5>
 378:	30 97       	sbiw	r30, 0x00	; 0
 37a:	09 f0       	breq	.+2      	; 0x37e <__vector_3+0x30>
	{
		EXTI_ApfEXTI[EXTI_u8_INT2]();
 37c:	09 95       	icall
	}
}
 37e:	ff 91       	pop	r31
 380:	ef 91       	pop	r30
 382:	bf 91       	pop	r27
 384:	af 91       	pop	r26
 386:	9f 91       	pop	r25
 388:	8f 91       	pop	r24
 38a:	7f 91       	pop	r23
 38c:	6f 91       	pop	r22
 38e:	5f 91       	pop	r21
 390:	4f 91       	pop	r20
 392:	3f 91       	pop	r19
 394:	2f 91       	pop	r18
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

Disassembly of section .text.GI_enuGIEnable:

00000448 <GI_enuGIEnable>:

//#include "GI_interface.h"

ERROR  GI_enuGIEnable(void)
{
	SET_BIT(SREG,GI_PIN7);
 448:	8f b7       	in	r24, 0x3f	; 63
 44a:	80 68       	ori	r24, 0x80	; 128
 44c:	8f bf       	out	0x3f, r24	; 63
	return STD_OK;
}
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000045a <_fini>:
 45a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000045c <__funcs_on_exit>:
 45c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000045e <__simulator_exit>:
 45e:	08 95       	ret

Disassembly of section .text.exit:

00000432 <exit>:
 432:	ec 01       	movw	r28, r24
 434:	0e 94 2e 02 	call	0x45c	; 0x45c <__funcs_on_exit>
 438:	0e 94 2d 02 	call	0x45a	; 0x45a <_fini>
 43c:	ce 01       	movw	r24, r28
 43e:	0e 94 2f 02 	call	0x45e	; 0x45e <__simulator_exit>
 442:	ce 01       	movw	r24, r28
 444:	0e 94 2b 02 	call	0x456	; 0x456 <_Exit>

Disassembly of section .text._Exit:

00000456 <_Exit>:
 456:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
