
Menna.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  000008d0  00000944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000099a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000181b  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000990  00000000  00000000  0000230b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000df7  00000000  00000000  00002c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  00003a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000065b  00000000  00000000  00003c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fb3  00000000  00000000  000042ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000052a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3b       	cpi	r26, 0xB6	; 182
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 99 03 	call	0x732	; 0x732 <main>
  7a:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
		u8 Local_u8_ErrorState = STD_TYPES_OK   ;
        /*check */
if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinDirection == DIO_u8_OUTPUT) ||( Copy_u8PinDirection == DIO_u8_INPUT))
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	28 f4       	brcc	.+10     	; 0x90 <DIO_u8SetPinDirection+0xe>
  86:	68 30       	cpi	r22, 0x08	; 8
  88:	18 f4       	brcc	.+6      	; 0x90 <DIO_u8SetPinDirection+0xe>
  8a:	41 30       	cpi	r20, 0x01	; 1
  8c:	09 f4       	brne	.+2      	; 0x90 <DIO_u8SetPinDirection+0xe>
  8e:	80 c0       	rjmp	.+256    	; 0x190 <DIO_u8SetPinDirection+0x10e>
  90:	44 23       	and	r20, r20
  92:	09 f4       	brne	.+2      	; 0x96 <DIO_u8SetPinDirection+0x14>
  94:	88 c0       	rjmp	.+272    	; 0x1a6 <DIO_u8SetPinDirection+0x124>

}

}
else { 
        Local_u8_ErrorState = STD_TYPES_NOTOK   ;
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	08 95       	ret
if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinDirection == DIO_u8_OUTPUT) ||( Copy_u8PinDirection == DIO_u8_INPUT))
{
	switch (Copy_u8PortId){
		case DIO_u8_PORTA :
			switch (Copy_u8PinDirection ){
			case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
  9a:	2a b3       	in	r18, 0x1a	; 26
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <DIO_u8SetPinDirection+0x24>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <DIO_u8SetPinDirection+0x20>
  aa:	82 2b       	or	r24, r18
  ac:	8a bb       	out	0x1a, r24	; 26
	                            DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);
}*/

u8 DIO_u8SetPinDirection (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
		u8 Local_u8_ErrorState = STD_TYPES_OK   ;
  ae:	81 e0       	ldi	r24, 0x01	; 1
if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinDirection == DIO_u8_OUTPUT) ||( Copy_u8PinDirection == DIO_u8_INPUT))
{
	switch (Copy_u8PortId){
		case DIO_u8_PORTA :
			switch (Copy_u8PinDirection ){
			case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
  b0:	08 95       	ret
				case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRA_REG , Copy_u8PinId);break; } break ;
  b2:	2a b3       	in	r18, 0x1a	; 26
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_u8SetPinDirection+0x3c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_u8SetPinDirection+0x38>
  c2:	80 95       	com	r24
  c4:	82 23       	and	r24, r18
  c6:	8a bb       	out	0x1a, r24	; 26
	                            DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);
}*/

u8 DIO_u8SetPinDirection (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
		u8 Local_u8_ErrorState = STD_TYPES_OK   ;
  c8:	81 e0       	ldi	r24, 0x01	; 1
{
	switch (Copy_u8PortId){
		case DIO_u8_PORTA :
			switch (Copy_u8PinDirection ){
			case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
				case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRA_REG , Copy_u8PinId);break; } break ;
  ca:	08 95       	ret

		case DIO_u8_PORTB :
		switch (Copy_u8PinDirection ){
  cc:	44 23       	and	r20, r20
  ce:	79 f0       	breq	.+30     	; 0xee <DIO_u8SetPinDirection+0x6c>
  d0:	41 30       	cpi	r20, 0x01	; 1
  d2:	09 f0       	breq	.+2      	; 0xd6 <DIO_u8SetPinDirection+0x54>
  d4:	53 c0       	rjmp	.+166    	; 0x17c <DIO_u8SetPinDirection+0xfa>
			case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
  d6:	27 b3       	in	r18, 0x17	; 23
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_u8SetPinDirection+0x60>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_u8SetPinDirection+0x5c>
  e6:	82 2b       	or	r24, r18
  e8:	87 bb       	out	0x17, r24	; 23
	                            DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);
}*/

u8 DIO_u8SetPinDirection (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
		u8 Local_u8_ErrorState = STD_TYPES_OK   ;
  ea:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
				case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRA_REG , Copy_u8PinId);break; } break ;

		case DIO_u8_PORTB :
		switch (Copy_u8PinDirection ){
			case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
  ec:	08 95       	ret
			case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break; } break ;
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_u8SetPinDirection+0x78>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_u8SetPinDirection+0x74>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	87 bb       	out	0x17, r24	; 23
	                            DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);
}*/

u8 DIO_u8SetPinDirection (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
		u8 Local_u8_ErrorState = STD_TYPES_OK   ;
 104:	81 e0       	ldi	r24, 0x01	; 1
				case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRA_REG , Copy_u8PinId);break; } break ;

		case DIO_u8_PORTB :
		switch (Copy_u8PinDirection ){
			case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
			case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break; } break ;
 106:	08 95       	ret

		case DIO_u8_PORTC :
	   switch (Copy_u8PinDirection ){
 108:	44 23       	and	r20, r20
 10a:	71 f0       	breq	.+28     	; 0x128 <DIO_u8SetPinDirection+0xa6>
 10c:	41 30       	cpi	r20, 0x01	; 1
 10e:	c1 f5       	brne	.+112    	; 0x180 <DIO_u8SetPinDirection+0xfe>
	   	   case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
 110:	24 b3       	in	r18, 0x14	; 20
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_u8SetPinDirection+0x9a>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_u8SetPinDirection+0x96>
 120:	82 2b       	or	r24, r18
 122:	84 bb       	out	0x14, r24	; 20
	                            DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);
}*/

u8 DIO_u8SetPinDirection (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
		u8 Local_u8_ErrorState = STD_TYPES_OK   ;
 124:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
			case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break; } break ;

		case DIO_u8_PORTC :
	   switch (Copy_u8PinDirection ){
	   	   case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
 126:	08 95       	ret
	   	   case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break; } break ;
 128:	27 b3       	in	r18, 0x17	; 23
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_u8SetPinDirection+0xb2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_u8SetPinDirection+0xae>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	87 bb       	out	0x17, r24	; 23
	                            DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);
}*/

u8 DIO_u8SetPinDirection (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
		u8 Local_u8_ErrorState = STD_TYPES_OK   ;
 13e:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break; } break ;

		case DIO_u8_PORTC :
	   switch (Copy_u8PinDirection ){
	   	   case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
	   	   case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break; } break ;
 140:	08 95       	ret

	   case DIO_u8_PORTD :
		   switch (Copy_u8PinDirection ){
 142:	44 23       	and	r20, r20
 144:	71 f0       	breq	.+28     	; 0x162 <DIO_u8SetPinDirection+0xe0>
 146:	41 30       	cpi	r20, 0x01	; 1
 148:	e9 f4       	brne	.+58     	; 0x184 <DIO_u8SetPinDirection+0x102>
		   	   	  case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
 14a:	21 b3       	in	r18, 0x11	; 17
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_u8SetPinDirection+0xd4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_u8SetPinDirection+0xd0>
 15a:	82 2b       	or	r24, r18
 15c:	81 bb       	out	0x11, r24	; 17
	                            DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);
}*/

u8 DIO_u8SetPinDirection (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
		u8 Local_u8_ErrorState = STD_TYPES_OK   ;
 15e:	81 e0       	ldi	r24, 0x01	; 1
	   	   case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
	   	   case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break; } break ;

	   case DIO_u8_PORTD :
		   switch (Copy_u8PinDirection ){
		   	   	  case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
 160:	08 95       	ret
		   	   	  case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break; } break ;
 162:	21 b3       	in	r18, 0x11	; 17
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_u8SetPinDirection+0xec>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_u8SetPinDirection+0xe8>
 172:	80 95       	com	r24
 174:	82 23       	and	r24, r18
 176:	81 bb       	out	0x11, r24	; 17
	                            DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);
}*/

u8 DIO_u8SetPinDirection (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
		u8 Local_u8_ErrorState = STD_TYPES_OK   ;
 178:	81 e0       	ldi	r24, 0x01	; 1
	   	   case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break; } break ;

	   case DIO_u8_PORTD :
		   switch (Copy_u8PinDirection ){
		   	   	  case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
		   	   	  case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break; } break ;
 17a:	08 95       	ret
	                            DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);
}*/

u8 DIO_u8SetPinDirection (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
		u8 Local_u8_ErrorState = STD_TYPES_OK   ;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	08 95       	ret
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	08 95       	ret
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	08 95       	ret
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	08 95       	ret
 18c:	81 e0       	ldi	r24, 0x01	; 1
}
else { 
        Local_u8_ErrorState = STD_TYPES_NOTOK   ;
}

        return Local_u8_ErrorState  ;
 18e:	08 95       	ret
{
		u8 Local_u8_ErrorState = STD_TYPES_OK   ;
        /*check */
if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinDirection == DIO_u8_OUTPUT) ||( Copy_u8PinDirection == DIO_u8_INPUT))
{
	switch (Copy_u8PortId){
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	09 f4       	brne	.+2      	; 0x196 <DIO_u8SetPinDirection+0x114>
 194:	9b cf       	rjmp	.-202    	; 0xcc <DIO_u8SetPinDirection+0x4a>
 196:	08 f4       	brcc	.+2      	; 0x19a <DIO_u8SetPinDirection+0x118>
 198:	80 cf       	rjmp	.-256    	; 0x9a <DIO_u8SetPinDirection+0x18>
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	09 f4       	brne	.+2      	; 0x1a0 <DIO_u8SetPinDirection+0x11e>
 19e:	b4 cf       	rjmp	.-152    	; 0x108 <DIO_u8SetPinDirection+0x86>
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	79 f2       	breq	.-98     	; 0x142 <DIO_u8SetPinDirection+0xc0>
 1a4:	f1 cf       	rjmp	.-30     	; 0x188 <DIO_u8SetPinDirection+0x106>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	09 f4       	brne	.+2      	; 0x1ac <DIO_u8SetPinDirection+0x12a>
 1aa:	90 cf       	rjmp	.-224    	; 0xcc <DIO_u8SetPinDirection+0x4a>
 1ac:	08 f4       	brcc	.+2      	; 0x1b0 <DIO_u8SetPinDirection+0x12e>
 1ae:	81 cf       	rjmp	.-254    	; 0xb2 <DIO_u8SetPinDirection+0x30>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <DIO_u8SetPinDirection+0x134>
 1b4:	a9 cf       	rjmp	.-174    	; 0x108 <DIO_u8SetPinDirection+0x86>
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	21 f2       	breq	.-120    	; 0x142 <DIO_u8SetPinDirection+0xc0>
 1ba:	e8 cf       	rjmp	.-48     	; 0x18c <DIO_u8SetPinDirection+0x10a>

000001bc <DIO_u8SetPinValue>:
/***************************************************/

u8 DIO_u8SetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinValue ) 
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
if (Copy_u8PinId <= DIO_u8_PIN7 ) {
 1bc:	68 30       	cpi	r22, 0x08	; 8
 1be:	08 f0       	brcs	.+2      	; 0x1c2 <DIO_u8SetPinValue+0x6>
 1c0:	80 c0       	rjmp	.+256    	; 0x2c2 <DIO_u8SetPinValue+0x106>
	switch  (Copy_u8PortId )
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	31 f1       	breq	.+76     	; 0x212 <DIO_u8SetPinValue+0x56>
 1c6:	38 f0       	brcs	.+14     	; 0x1d6 <DIO_u8SetPinValue+0x1a>
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	09 f4       	brne	.+2      	; 0x1ce <DIO_u8SetPinValue+0x12>
 1cc:	40 c0       	rjmp	.+128    	; 0x24e <DIO_u8SetPinValue+0x92>
 1ce:	83 30       	cpi	r24, 0x03	; 3
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <DIO_u8SetPinValue+0x18>
 1d2:	5a c0       	rjmp	.+180    	; 0x288 <DIO_u8SetPinValue+0xcc>
 1d4:	78 c0       	rjmp	.+240    	; 0x2c6 <DIO_u8SetPinValue+0x10a>
	{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue )
 1d6:	44 23       	and	r20, r20
 1d8:	79 f0       	breq	.+30     	; 0x1f8 <DIO_u8SetPinValue+0x3c>
 1da:	41 30       	cpi	r20, 0x01	; 1
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <DIO_u8SetPinValue+0x24>
 1de:	75 c0       	rjmp	.+234    	; 0x2ca <DIO_u8SetPinValue+0x10e>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG ,Copy_u8PinId );break ;
 1e0:	2b b3       	in	r18, 0x1b	; 27
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_u8SetPinValue+0x30>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_u8SetPinValue+0x2c>
 1f0:	82 2b       	or	r24, r18
 1f2:	8b bb       	out	0x1b, r24	; 27
}
/***************************************************/

u8 DIO_u8SetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinValue ) 
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
	switch  (Copy_u8PortId )
	{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue )
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG ,Copy_u8PinId );break ;
 1f6:	08 95       	ret
				case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTA_REG ,Copy_u8PinId );break ;
 1f8:	2b b3       	in	r18, 0x1b	; 27
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_u8SetPinValue+0x48>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_u8SetPinValue+0x44>
 208:	80 95       	com	r24
 20a:	82 23       	and	r24, r18
 20c:	8b bb       	out	0x1b, r24	; 27
}
/***************************************************/

u8 DIO_u8SetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinValue ) 
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 20e:	81 e0       	ldi	r24, 0x01	; 1
	{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue )
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG ,Copy_u8PinId );break ;
				case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTA_REG ,Copy_u8PinId );break ;
 210:	08 95       	ret
				default : Local_u8Errorstate = STD_TYPES_NOTOK;
				}
			break ;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue )
 212:	44 23       	and	r20, r20
 214:	79 f0       	breq	.+30     	; 0x234 <DIO_u8SetPinValue+0x78>
 216:	41 30       	cpi	r20, 0x01	; 1
 218:	09 f0       	breq	.+2      	; 0x21c <DIO_u8SetPinValue+0x60>
 21a:	59 c0       	rjmp	.+178    	; 0x2ce <DIO_u8SetPinValue+0x112>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG ,Copy_u8PinId );break ;
 21c:	28 b3       	in	r18, 0x18	; 24
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_u8SetPinValue+0x6c>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_u8SetPinValue+0x68>
 22c:	82 2b       	or	r24, r18
 22e:	88 bb       	out	0x18, r24	; 24
}
/***************************************************/

u8 DIO_u8SetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinValue ) 
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 230:	81 e0       	ldi	r24, 0x01	; 1
			break ;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue )
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG ,Copy_u8PinId );break ;
 232:	08 95       	ret
				case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTB_REG ,Copy_u8PinId );break ;
 234:	28 b3       	in	r18, 0x18	; 24
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_u8SetPinValue+0x84>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_u8SetPinValue+0x80>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	88 bb       	out	0x18, r24	; 24
}
/***************************************************/

u8 DIO_u8SetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinValue ) 
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 24a:	81 e0       	ldi	r24, 0x01	; 1

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue )
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG ,Copy_u8PinId );break ;
				case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTB_REG ,Copy_u8PinId );break ;
 24c:	08 95       	ret
				default : Local_u8Errorstate = STD_TYPES_NOTOK;
			}
			break ;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue )
 24e:	44 23       	and	r20, r20
 250:	71 f0       	breq	.+28     	; 0x26e <DIO_u8SetPinValue+0xb2>
 252:	41 30       	cpi	r20, 0x01	; 1
 254:	f1 f5       	brne	.+124    	; 0x2d2 <DIO_u8SetPinValue+0x116>
			{
			case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG ,Copy_u8PinId );break ;
 256:	25 b3       	in	r18, 0x15	; 21
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_u8SetPinValue+0xa6>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_u8SetPinValue+0xa2>
 266:	82 2b       	or	r24, r18
 268:	85 bb       	out	0x15, r24	; 21
}
/***************************************************/

u8 DIO_u8SetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinValue ) 
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 26a:	81 e0       	ldi	r24, 0x01	; 1
			break ;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue )
			{
			case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG ,Copy_u8PinId );break ;
 26c:	08 95       	ret
			case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTC_REG ,Copy_u8PinId );break ;
 26e:	25 b3       	in	r18, 0x15	; 21
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_u8SetPinValue+0xbe>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_u8SetPinValue+0xba>
 27e:	80 95       	com	r24
 280:	82 23       	and	r24, r18
 282:	85 bb       	out	0x15, r24	; 21
}
/***************************************************/

u8 DIO_u8SetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinValue ) 
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 284:	81 e0       	ldi	r24, 0x01	; 1

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue )
			{
			case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG ,Copy_u8PinId );break ;
			case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTC_REG ,Copy_u8PinId );break ;
 286:	08 95       	ret
			default : Local_u8Errorstate = STD_TYPES_NOTOK;}
			break ;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue )
 288:	44 23       	and	r20, r20
 28a:	71 f0       	breq	.+28     	; 0x2a8 <DIO_u8SetPinValue+0xec>
 28c:	41 30       	cpi	r20, 0x01	; 1
 28e:	19 f5       	brne	.+70     	; 0x2d6 <DIO_u8SetPinValue+0x11a>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG ,Copy_u8PinId );break ;
 290:	22 b3       	in	r18, 0x12	; 18
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_u8SetPinValue+0xe0>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_u8SetPinValue+0xdc>
 2a0:	82 2b       	or	r24, r18
 2a2:	82 bb       	out	0x12, r24	; 18
}
/***************************************************/

u8 DIO_u8SetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinValue ) 
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
			break ;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue )
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG ,Copy_u8PinId );break ;
 2a6:	08 95       	ret
				case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTD_REG ,Copy_u8PinId );break ;
 2a8:	22 b3       	in	r18, 0x12	; 18
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_u8SetPinValue+0xf8>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_u8SetPinValue+0xf4>
 2b8:	80 95       	com	r24
 2ba:	82 23       	and	r24, r18
 2bc:	82 bb       	out	0x12, r24	; 18
}
/***************************************************/

u8 DIO_u8SetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinValue ) 
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 2be:	81 e0       	ldi	r24, 0x01	; 1

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue )
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG ,Copy_u8PinId );break ;
				case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTD_REG ,Copy_u8PinId );break ;
 2c0:	08 95       	ret

		default :
			Local_u8Errorstate = STD_TYPES_NOTOK;
		}
        }
else {Local_u8Errorstate = STD_TYPES_NOTOK;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	08 95       	ret
				case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTD_REG ,Copy_u8PinId );break ;
				default : Local_u8Errorstate = STD_TYPES_NOTOK;}
				break ;

		default :
			Local_u8Errorstate = STD_TYPES_NOTOK;
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	08 95       	ret
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue )
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG ,Copy_u8PinId );break ;
				case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTA_REG ,Copy_u8PinId );break ;
				default : Local_u8Errorstate = STD_TYPES_NOTOK;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	08 95       	ret
		case DIO_u8_PORTB:
			switch (Copy_u8PinValue )
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG ,Copy_u8PinId );break ;
				case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTB_REG ,Copy_u8PinId );break ;
				default : Local_u8Errorstate = STD_TYPES_NOTOK;
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	08 95       	ret
		case DIO_u8_PORTC:
			switch (Copy_u8PinValue )
			{
			case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG ,Copy_u8PinId );break ;
			case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTC_REG ,Copy_u8PinId );break ;
			default : Local_u8Errorstate = STD_TYPES_NOTOK;}
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	08 95       	ret
		case DIO_u8_PORTD:
			switch (Copy_u8PinValue )
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG ,Copy_u8PinId );break ;
				case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTD_REG ,Copy_u8PinId );break ;
				default : Local_u8Errorstate = STD_TYPES_NOTOK;}
 2d6:	80 e0       	ldi	r24, 0x00	; 0
		}
        }
else {Local_u8Errorstate = STD_TYPES_NOTOK;
}
 return Local_u8Errorstate  ;      
   }
 2d8:	08 95       	ret

000002da <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 *Copy_pu8ReturndPinValue ) 
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
u8 Local_u8PinValue;
if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ( *Copy_pu8ReturndPinValue != NULL))
 2da:	84 30       	cpi	r24, 0x04	; 4
 2dc:	08 f0       	brcs	.+2      	; 0x2e0 <DIO_u8GetPinValue+0x6>
 2de:	54 c0       	rjmp	.+168    	; 0x388 <DIO_u8GetPinValue+0xae>
 2e0:	68 30       	cpi	r22, 0x08	; 8
 2e2:	08 f0       	brcs	.+2      	; 0x2e6 <DIO_u8GetPinValue+0xc>
 2e4:	53 c0       	rjmp	.+166    	; 0x38c <DIO_u8GetPinValue+0xb2>
 2e6:	fa 01       	movw	r30, r20
 2e8:	90 81       	ld	r25, Z
 2ea:	99 23       	and	r25, r25
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <DIO_u8GetPinValue+0x16>
 2ee:	50 c0       	rjmp	.+160    	; 0x390 <DIO_u8GetPinValue+0xb6>
{
	switch (Copy_u8PortId)
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	b9 f0       	breq	.+46     	; 0x322 <DIO_u8GetPinValue+0x48>
 2f4:	28 f0       	brcs	.+10     	; 0x300 <DIO_u8GetPinValue+0x26>
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	29 f1       	breq	.+74     	; 0x344 <DIO_u8GetPinValue+0x6a>
 2fa:	83 30       	cpi	r24, 0x03	; 3
 2fc:	a1 f1       	breq	.+104    	; 0x366 <DIO_u8GetPinValue+0x8c>
 2fe:	4a c0       	rjmp	.+148    	; 0x394 <DIO_u8GetPinValue+0xba>
	{
		case DIO_u8_PORTA:Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId );
 300:	89 b3       	in	r24, 0x19	; 25
			if (Local_u8PinValue == STD_TYPES_NOTOK )
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_u8GetPinValue+0x30>
 306:	95 95       	asr	r25
 308:	87 95       	ror	r24
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_u8GetPinValue+0x2c>
 30e:	80 fd       	sbrc	r24, 0
 310:	04 c0       	rjmp	.+8      	; 0x31a <DIO_u8GetPinValue+0x40>
			{
				*Copy_pu8ReturndPinValue = DIO_u8_LOW;}
 312:	fa 01       	movw	r30, r20
 314:	10 82       	st	Z, r1

/************************************************/

u8 DIO_u8GetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 *Copy_pu8ReturndPinValue ) 
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	08 95       	ret
	{
		case DIO_u8_PORTA:Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId );
			if (Local_u8PinValue == STD_TYPES_NOTOK )
			{
				*Copy_pu8ReturndPinValue = DIO_u8_LOW;}
			else{*Copy_pu8ReturndPinValue = DIO_u8_HIGH;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	fa 01       	movw	r30, r20
 31e:	80 83       	st	Z, r24
 320:	08 95       	ret
			}break ;

	    case DIO_u8_PORTB:Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG , Copy_u8PinId);
 322:	86 b3       	in	r24, 0x16	; 22
	    	if (Local_u8PinValue == STD_TYPES_NOTOK )
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_u8GetPinValue+0x52>
 328:	95 95       	asr	r25
 32a:	87 95       	ror	r24
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_u8GetPinValue+0x4e>
 330:	80 fd       	sbrc	r24, 0
 332:	04 c0       	rjmp	.+8      	; 0x33c <DIO_u8GetPinValue+0x62>
	    	{
	    		*Copy_pu8ReturndPinValue = DIO_u8_LOW;}
 334:	fa 01       	movw	r30, r20
 336:	10 82       	st	Z, r1

/************************************************/

u8 DIO_u8GetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 *Copy_pu8ReturndPinValue ) 
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	08 95       	ret

	    case DIO_u8_PORTB:Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG , Copy_u8PinId);
	    	if (Local_u8PinValue == STD_TYPES_NOTOK )
	    	{
	    		*Copy_pu8ReturndPinValue = DIO_u8_LOW;}
	    	else{*Copy_pu8ReturndPinValue = DIO_u8_HIGH;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	fa 01       	movw	r30, r20
 340:	80 83       	st	Z, r24
 342:	08 95       	ret
	    	}break;

	    case DIO_u8_PORTC:Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
 344:	83 b3       	in	r24, 0x13	; 19
	    	if (Local_u8PinValue == STD_TYPES_NOTOK )
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_u8GetPinValue+0x74>
 34a:	95 95       	asr	r25
 34c:	87 95       	ror	r24
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_u8GetPinValue+0x70>
 352:	80 fd       	sbrc	r24, 0
 354:	04 c0       	rjmp	.+8      	; 0x35e <DIO_u8GetPinValue+0x84>
	    	{
	    		*Copy_pu8ReturndPinValue = DIO_u8_LOW;}
 356:	fa 01       	movw	r30, r20
 358:	10 82       	st	Z, r1

/************************************************/

u8 DIO_u8GetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 *Copy_pu8ReturndPinValue ) 
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	08 95       	ret

	    case DIO_u8_PORTC:Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
	    	if (Local_u8PinValue == STD_TYPES_NOTOK )
	    	{
	    		*Copy_pu8ReturndPinValue = DIO_u8_LOW;}
	    	else{*Copy_pu8ReturndPinValue = DIO_u8_HIGH;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	fa 01       	movw	r30, r20
 362:	80 83       	st	Z, r24
 364:	08 95       	ret
	    	}break;

	    case DIO_u8_PORTD:Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
 366:	80 b3       	in	r24, 0x10	; 16
	    	if (Local_u8PinValue == STD_TYPES_NOTOK )
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_u8GetPinValue+0x96>
 36c:	95 95       	asr	r25
 36e:	87 95       	ror	r24
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_u8GetPinValue+0x92>
 374:	80 fd       	sbrc	r24, 0
 376:	04 c0       	rjmp	.+8      	; 0x380 <DIO_u8GetPinValue+0xa6>
	    	{
	    		*Copy_pu8ReturndPinValue = DIO_u8_LOW;}
 378:	fa 01       	movw	r30, r20
 37a:	10 82       	st	Z, r1

/************************************************/

u8 DIO_u8GetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 *Copy_pu8ReturndPinValue ) 
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	08 95       	ret

	    case DIO_u8_PORTD:Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
	    	if (Local_u8PinValue == STD_TYPES_NOTOK )
	    	{
	    		*Copy_pu8ReturndPinValue = DIO_u8_LOW;}
	    	else{*Copy_pu8ReturndPinValue = DIO_u8_HIGH;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	fa 01       	movw	r30, r20
 384:	80 83       	st	Z, r24
 386:	08 95       	ret
	    	}break;
  }
}
else {
Local_u8Errorstate = STD_TYPES_NOTOK;
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	08 95       	ret
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	08 95       	ret
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	08 95       	ret

/************************************************/

u8 DIO_u8GetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 *Copy_pu8ReturndPinValue ) 
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 394:	81 e0       	ldi	r24, 0x01	; 1
}
else {
Local_u8Errorstate = STD_TYPES_NOTOK;
}
return Local_u8Errorstate  ;      
}
 396:	08 95       	ret

00000398 <DIO_u8SetPortDirection>:
/******************************************************/ 

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId ,u8 Copy_u8PortDirection )
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
if ((Copy_u8PortDirection == DIO_u8_OUTPUT) ||( Copy_u8PortDirection == DIO_u8_INPUT))
 398:	62 30       	cpi	r22, 0x02	; 2
 39a:	a0 f5       	brcc	.+104    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
{
	switch (Copy_u8PortId){
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	89 f0       	breq	.+34     	; 0x3c2 <DIO_u8SetPortDirection+0x2a>
 3a0:	28 f0       	brcs	.+10     	; 0x3ac <DIO_u8SetPortDirection+0x14>
 3a2:	82 30       	cpi	r24, 0x02	; 2
 3a4:	c9 f0       	breq	.+50     	; 0x3d8 <DIO_u8SetPortDirection+0x40>
 3a6:	83 30       	cpi	r24, 0x03	; 3
 3a8:	11 f1       	breq	.+68     	; 0x3ee <DIO_u8SetPortDirection+0x56>
 3aa:	2e c0       	rjmp	.+92     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		case DIO_u8_PORTA :
			switch (Copy_u8PortDirection) {
 3ac:	66 23       	and	r22, r22
 3ae:	31 f0       	breq	.+12     	; 0x3bc <DIO_u8SetPortDirection+0x24>
 3b0:	61 30       	cpi	r22, 0x01	; 1
 3b2:	61 f5       	brne	.+88     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
				case DIO_u8_OUTPUT :DIO_u8_DDRA_REG = 0xff;break;
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	8a bb       	out	0x1a, r24	; 26
}
/******************************************************/ 

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId ,u8 Copy_u8PortDirection )
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
if ((Copy_u8PortDirection == DIO_u8_OUTPUT) ||( Copy_u8PortDirection == DIO_u8_INPUT))
{
	switch (Copy_u8PortId){
		case DIO_u8_PORTA :
			switch (Copy_u8PortDirection) {
				case DIO_u8_OUTPUT :DIO_u8_DDRA_REG = 0xff;break;
 3ba:	08 95       	ret
				case DIO_u8_INPUT :DIO_u8_DDRA_REG = 0x00;break ;
 3bc:	1a ba       	out	0x1a, r1	; 26
}
/******************************************************/ 

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId ,u8 Copy_u8PortDirection )
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 3be:	81 e0       	ldi	r24, 0x01	; 1
{
	switch (Copy_u8PortId){
		case DIO_u8_PORTA :
			switch (Copy_u8PortDirection) {
				case DIO_u8_OUTPUT :DIO_u8_DDRA_REG = 0xff;break;
				case DIO_u8_INPUT :DIO_u8_DDRA_REG = 0x00;break ;
 3c0:	08 95       	ret
				}break ;

		case DIO_u8_PORTB :
			switch (Copy_u8PortDirection ){
 3c2:	66 23       	and	r22, r22
 3c4:	31 f0       	breq	.+12     	; 0x3d2 <DIO_u8SetPortDirection+0x3a>
 3c6:	61 30       	cpi	r22, 0x01	; 1
 3c8:	19 f5       	brne	.+70     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
				case DIO_u8_OUTPUT :DIO_u8_DDRB_REG = 0xff;break;
 3ca:	8f ef       	ldi	r24, 0xFF	; 255
 3cc:	87 bb       	out	0x17, r24	; 23
}
/******************************************************/ 

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId ,u8 Copy_u8PortDirection )
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
				case DIO_u8_INPUT :DIO_u8_DDRA_REG = 0x00;break ;
				}break ;

		case DIO_u8_PORTB :
			switch (Copy_u8PortDirection ){
				case DIO_u8_OUTPUT :DIO_u8_DDRB_REG = 0xff;break;
 3d0:	08 95       	ret
				case DIO_u8_INPUT :DIO_u8_DDRB_REG = 0x00;break ;
 3d2:	17 ba       	out	0x17, r1	; 23
}
/******************************************************/ 

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId ,u8 Copy_u8PortDirection )
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
				}break ;

		case DIO_u8_PORTB :
			switch (Copy_u8PortDirection ){
				case DIO_u8_OUTPUT :DIO_u8_DDRB_REG = 0xff;break;
				case DIO_u8_INPUT :DIO_u8_DDRB_REG = 0x00;break ;
 3d6:	08 95       	ret
				}break ;

	   case DIO_u8_PORTC :
		   switch (Copy_u8PortDirection ){
 3d8:	66 23       	and	r22, r22
 3da:	31 f0       	breq	.+12     	; 0x3e8 <DIO_u8SetPortDirection+0x50>
 3dc:	61 30       	cpi	r22, 0x01	; 1
 3de:	d1 f4       	brne	.+52     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		   case DIO_u8_OUTPUT :DIO_u8_DDRC_REG = 0xff;break;
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	84 bb       	out	0x14, r24	; 20
}
/******************************************************/ 

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId ,u8 Copy_u8PortDirection )
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
				case DIO_u8_INPUT :DIO_u8_DDRB_REG = 0x00;break ;
				}break ;

	   case DIO_u8_PORTC :
		   switch (Copy_u8PortDirection ){
		   case DIO_u8_OUTPUT :DIO_u8_DDRC_REG = 0xff;break;
 3e6:	08 95       	ret
		   case DIO_u8_INPUT :DIO_u8_DDRC_REG = 0x00;break ;
 3e8:	14 ba       	out	0x14, r1	; 20
}
/******************************************************/ 

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId ,u8 Copy_u8PortDirection )
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
				}break ;

	   case DIO_u8_PORTC :
		   switch (Copy_u8PortDirection ){
		   case DIO_u8_OUTPUT :DIO_u8_DDRC_REG = 0xff;break;
		   case DIO_u8_INPUT :DIO_u8_DDRC_REG = 0x00;break ;
 3ec:	08 95       	ret
		   }break ;

	  case DIO_u8_PORTD :
		  switch (Copy_u8PortDirection ){
 3ee:	66 23       	and	r22, r22
 3f0:	31 f0       	breq	.+12     	; 0x3fe <DIO_u8SetPortDirection+0x66>
 3f2:	61 30       	cpi	r22, 0x01	; 1
 3f4:	89 f4       	brne	.+34     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		  case DIO_u8_OUTPUT :DIO_u8_DDRD_REG = 0xff;break;
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	81 bb       	out	0x11, r24	; 17
}
/******************************************************/ 

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId ,u8 Copy_u8PortDirection )
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 3fa:	81 e0       	ldi	r24, 0x01	; 1
		   case DIO_u8_INPUT :DIO_u8_DDRC_REG = 0x00;break ;
		   }break ;

	  case DIO_u8_PORTD :
		  switch (Copy_u8PortDirection ){
		  case DIO_u8_OUTPUT :DIO_u8_DDRD_REG = 0xff;break;
 3fc:	08 95       	ret
		  case DIO_u8_INPUT :DIO_u8_DDRD_REG = 0x00;break ;
 3fe:	11 ba       	out	0x11, r1	; 17
}
/******************************************************/ 

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId ,u8 Copy_u8PortDirection )
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 400:	81 e0       	ldi	r24, 0x01	; 1
		   }break ;

	  case DIO_u8_PORTD :
		  switch (Copy_u8PortDirection ){
		  case DIO_u8_OUTPUT :DIO_u8_DDRD_REG = 0xff;break;
		  case DIO_u8_INPUT :DIO_u8_DDRD_REG = 0x00;break ;
 402:	08 95       	ret

     default :Local_u8Errorstate = STD_TYPES_NOTOK;
}
}
else {
Local_u8Errorstate = STD_TYPES_NOTOK;
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	08 95       	ret
		  switch (Copy_u8PortDirection ){
		  case DIO_u8_OUTPUT :DIO_u8_DDRD_REG = 0xff;break;
		  case DIO_u8_INPUT :DIO_u8_DDRD_REG = 0x00;break ;
		  }break ;

     default :Local_u8Errorstate = STD_TYPES_NOTOK;
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	08 95       	ret
}
/******************************************************/ 

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId ,u8 Copy_u8PortDirection )
{
u8 Local_u8Errorstate = STD_TYPES_OK ;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	08 95       	ret
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	08 95       	ret
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	08 95       	ret
 418:	81 e0       	ldi	r24, 0x01	; 1
}
else {
Local_u8Errorstate = STD_TYPES_NOTOK;
} 
return Local_u8Errorstate  ;      
}
 41a:	08 95       	ret

0000041c <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue (u8 Copy_u8PortId ,u8 Copy_u8PortValue )
{
	u8 Local_u8Errorstate = STD_TYPES_OK ;
	switch (Copy_u8PortId)
 41c:	81 30       	cpi	r24, 0x01	; 1
 41e:	49 f0       	breq	.+18     	; 0x432 <DIO_u8SetPortValue+0x16>
 420:	28 f0       	brcs	.+10     	; 0x42c <DIO_u8SetPortValue+0x10>
 422:	82 30       	cpi	r24, 0x02	; 2
 424:	49 f0       	breq	.+18     	; 0x438 <DIO_u8SetPortValue+0x1c>
 426:	83 30       	cpi	r24, 0x03	; 3
 428:	51 f0       	breq	.+20     	; 0x43e <DIO_u8SetPortValue+0x22>
 42a:	0c c0       	rjmp	.+24     	; 0x444 <DIO_u8SetPortValue+0x28>
{
	case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8PortValue ; break ;
 42c:	6b bb       	out	0x1b, r22	; 27
/********************************************************/


u8 DIO_u8SetPortValue (u8 Copy_u8PortId ,u8 Copy_u8PortValue )
{
	u8 Local_u8Errorstate = STD_TYPES_OK ;
 42e:	81 e0       	ldi	r24, 0x01	; 1
	switch (Copy_u8PortId)
{
	case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8PortValue ; break ;
 430:	08 95       	ret
	case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8PortValue ; break ;
 432:	68 bb       	out	0x18, r22	; 24
/********************************************************/


u8 DIO_u8SetPortValue (u8 Copy_u8PortId ,u8 Copy_u8PortValue )
{
	u8 Local_u8Errorstate = STD_TYPES_OK ;
 434:	81 e0       	ldi	r24, 0x01	; 1
	switch (Copy_u8PortId)
{
	case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8PortValue ; break ;
	case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8PortValue ; break ;
 436:	08 95       	ret
	case DIO_u8_PORTC:DIO_u8_PORTC_REG =Copy_u8PortValue ; break ;
 438:	65 bb       	out	0x15, r22	; 21
/********************************************************/


u8 DIO_u8SetPortValue (u8 Copy_u8PortId ,u8 Copy_u8PortValue )
{
	u8 Local_u8Errorstate = STD_TYPES_OK ;
 43a:	81 e0       	ldi	r24, 0x01	; 1
	switch (Copy_u8PortId)
{
	case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8PortValue ; break ;
	case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8PortValue ; break ;
	case DIO_u8_PORTC:DIO_u8_PORTC_REG =Copy_u8PortValue ; break ;
 43c:	08 95       	ret
	case DIO_u8_PORTD:DIO_u8_PORTD_REG =Copy_u8PortValue ; break ;
 43e:	62 bb       	out	0x12, r22	; 18
/********************************************************/


u8 DIO_u8SetPortValue (u8 Copy_u8PortId ,u8 Copy_u8PortValue )
{
	u8 Local_u8Errorstate = STD_TYPES_OK ;
 440:	81 e0       	ldi	r24, 0x01	; 1
	switch (Copy_u8PortId)
{
	case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8PortValue ; break ;
	case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8PortValue ; break ;
	case DIO_u8_PORTC:DIO_u8_PORTC_REG =Copy_u8PortValue ; break ;
	case DIO_u8_PORTD:DIO_u8_PORTD_REG =Copy_u8PortValue ; break ;
 442:	08 95       	ret
	default :Local_u8Errorstate = STD_TYPES_NOTOK;
 444:	80 e0       	ldi	r24, 0x00	; 0
}
return Local_u8Errorstate  ;
}
 446:	08 95       	ret

00000448 <LCD_enuSendCmnd>:
#define F_CPU 8000000UL
#include<util/delay.h>

/************************************************/
 ERROR LCD_enuSendCmnd(u8 Copy_u8Cmdn)
{
 448:	cf 93       	push	r28
 44a:	c8 2f       	mov	r28, r24
#if    (LCD_u8_MODE == LCD_u8_MODE_8_BIT)
	/* RS = 0 */
	DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>

	/* RW = 0 */
    DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>

    /*Write Command*/
    DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmdn);
 460:	6c 2f       	mov	r22, r28
 462:	83 e0       	ldi	r24, 0x03	; 3
 464:	0e 94 0e 02 	call	0x41c	; 0x41c <DIO_u8SetPortValue>

    /* E = 1 */
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	62 e0       	ldi	r22, 0x02	; 2
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	8a 95       	dec	r24
 476:	f1 f7       	brne	.-4      	; 0x474 <LCD_enuSendCmnd+0x2c>
 478:	00 c0       	rjmp	.+0      	; 0x47a <LCD_enuSendCmnd+0x32>
    _delay_us(1);

    /* E = 0 */
    DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
 47a:	40 e0       	ldi	r20, 0x00	; 0
 47c:	62 e0       	ldi	r22, 0x02	; 2
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
    return STD_OK;

#endif
    return STD_OK;

}
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <LCD_enuInit>:

  }*/
 ERROR LCD_enuInit(void)
  {

 	DIO_u8SetPinDirection(LCD_u8_RS_PORT, LCD_u8_RS_PIN, DIO_u8_OUTPUT);
 48a:	41 e0       	ldi	r20, 0x01	; 1
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 	DIO_u8SetPinDirection(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_OUTPUT);
 494:	41 e0       	ldi	r20, 0x01	; 1
 496:	61 e0       	ldi	r22, 0x01	; 1
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 	DIO_u8SetPinDirection(LCD_u8_E_PORT, LCD_u8_E_PIN, DIO_u8_OUTPUT);
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	62 e0       	ldi	r22, 0x02	; 2
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 	DIO_u8SetPortDirection(LCD_u8_DATA_PORT,DIO_u8_OUTPUT);
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	83 e0       	ldi	r24, 0x03	; 3
 4ac:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_u8SetPortDirection>
 	DIO_u8SetPortValue (LCD_u8_DATA_PORT ,DIO_u8_LOW  ) ;
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	83 e0       	ldi	r24, 0x03	; 3
 4b4:	0e 94 0e 02 	call	0x41c	; 0x41c <DIO_u8SetPortValue>

 	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
 4b8:	40 e0       	ldi	r20, 0x00	; 0
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
 	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
 	DIO_u8SetPinValue(LCD_u8_E_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	62 e0       	ldi	r22, 0x02	; 2
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d6:	2f eb       	ldi	r18, 0xBF	; 191
 4d8:	8a ed       	ldi	r24, 0xDA	; 218
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	21 50       	subi	r18, 0x01	; 1
 4de:	80 40       	sbci	r24, 0x00	; 0
 4e0:	90 40       	sbci	r25, 0x00	; 0
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <LCD_enuInit+0x52>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <LCD_enuInit+0x5c>
 4e6:	00 00       	nop
  	_delay_ms(35);
  	LCD_enuSendCmnd(FUN_SET);
 4e8:	88 e3       	ldi	r24, 0x38	; 56
 4ea:	0e 94 24 02 	call	0x448	; 0x448 <LCD_enuSendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ee:	2a e6       	ldi	r18, 0x6A	; 106
 4f0:	2a 95       	dec	r18
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <LCD_enuInit+0x66>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <LCD_enuInit+0x6c>
  	_delay_us(40);
  	LCD_enuSendCmnd(DISPLAY_ON_OFF);
 4f6:	8f e0       	ldi	r24, 0x0F	; 15
 4f8:	0e 94 24 02 	call	0x448	; 0x448 <LCD_enuSendCmnd>
 4fc:	8a e6       	ldi	r24, 0x6A	; 106
 4fe:	8a 95       	dec	r24
 500:	f1 f7       	brne	.-4      	; 0x4fe <LCD_enuInit+0x74>
 502:	00 c0       	rjmp	.+0      	; 0x504 <LCD_enuInit+0x7a>
  	_delay_us(40);
  	LCD_enuSendCmnd(DISPLAY_CLEAR);
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 24 02 	call	0x448	; 0x448 <LCD_enuSendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50a:	8f e9       	ldi	r24, 0x9F	; 159
 50c:	9f e0       	ldi	r25, 0x0F	; 15
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <LCD_enuInit+0x84>
 512:	00 c0       	rjmp	.+0      	; 0x514 <LCD_enuInit+0x8a>
 514:	00 00       	nop
  	_delay_ms(2);
  	LCD_enuSendCmnd(ENTRY_MOOD_SET);
 516:	86 e0       	ldi	r24, 0x06	; 6
 518:	0e 94 24 02 	call	0x448	; 0x448 <LCD_enuSendCmnd>
  	return STD_OK;

   }
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	08 95       	ret

00000520 <LCD_enuSendChar>:
/************************************************/

 ERROR LCD_enuSendChar(u8 Copy_u8Char)
{
 520:	cf 93       	push	r28
 522:	c8 2f       	mov	r28, r24
#if    (LCD_u8_MODE == LCD_u8_MODE_8_BIT)
	/* RS = 1 */
       DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
 524:	41 e0       	ldi	r20, 0x01	; 1
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>

    /* RW = 0 */
      DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
    /* Write char */
      DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
 538:	6c 2f       	mov	r22, r28
 53a:	83 e0       	ldi	r24, 0x03	; 3
 53c:	0e 94 0e 02 	call	0x41c	; 0x41c <DIO_u8SetPortValue>

    /* E = 1 */
      DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	62 e0       	ldi	r22, 0x02	; 2
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	8a 95       	dec	r24
 54e:	f1 f7       	brne	.-4      	; 0x54c <LCD_enuSendChar+0x2c>
 550:	00 c0       	rjmp	.+0      	; 0x552 <LCD_enuSendChar+0x32>
      _delay_us(1);

    /* E = 0 */
      DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
 552:	40 e0       	ldi	r20, 0x00	; 0
 554:	62 e0       	ldi	r22, 0x02	; 2
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>


#endif
    return STD_OK;

}
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <LCD_enuSetAc>:
/***************************************************/
 ERROR LCD_enuSetAc(u8 Copy_u8LineNum,u8 Copy_u8Location)
 	 {
	 if(Copy_u8Location<=39){
 562:	68 32       	cpi	r22, 0x28	; 40
 564:	88 f4       	brcc	.+34     	; 0x588 <LCD_enuSetAc+0x26>
	     switch (Copy_u8LineNum)
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	19 f0       	breq	.+6      	; 0x570 <LCD_enuSetAc+0xe>
 56a:	82 30       	cpi	r24, 0x02	; 2
 56c:	39 f0       	breq	.+14     	; 0x57c <LCD_enuSetAc+0x1a>
 56e:	0e c0       	rjmp	.+28     	; 0x58c <LCD_enuSetAc+0x2a>
	     {
	     case 1 :LCD_enuSendCmnd(0x80 + Copy_u8Location); break;
 570:	80 e8       	ldi	r24, 0x80	; 128
 572:	86 0f       	add	r24, r22
 574:	0e 94 24 02 	call	0x448	; 0x448 <LCD_enuSendCmnd>
	     }
	     }
	     else{
	         return STD_NOTOK;
	     }
	     return STD_OK;
 578:	80 e0       	ldi	r24, 0x00	; 0
 ERROR LCD_enuSetAc(u8 Copy_u8LineNum,u8 Copy_u8Location)
 	 {
	 if(Copy_u8Location<=39){
	     switch (Copy_u8LineNum)
	     {
	     case 1 :LCD_enuSendCmnd(0x80 + Copy_u8Location); break;
 57a:	08 95       	ret
	     case 2 :LCD_enuSendCmnd(0xC0 + Copy_u8Location); break;
 57c:	80 ec       	ldi	r24, 0xC0	; 192
 57e:	86 0f       	add	r24, r22
 580:	0e 94 24 02 	call	0x448	; 0x448 <LCD_enuSendCmnd>
	     }
	     }
	     else{
	         return STD_NOTOK;
	     }
	     return STD_OK;
 584:	80 e0       	ldi	r24, 0x00	; 0
 	 {
	 if(Copy_u8Location<=39){
	     switch (Copy_u8LineNum)
	     {
	     case 1 :LCD_enuSendCmnd(0x80 + Copy_u8Location); break;
	     case 2 :LCD_enuSendCmnd(0xC0 + Copy_u8Location); break;
 586:	08 95       	ret
	     default:return STD_NOTOK;break;
	     }
	     }
	     else{
	         return STD_NOTOK;
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	08 95       	ret
	 if(Copy_u8Location<=39){
	     switch (Copy_u8LineNum)
	     {
	     case 1 :LCD_enuSendCmnd(0x80 + Copy_u8Location); break;
	     case 2 :LCD_enuSendCmnd(0xC0 + Copy_u8Location); break;
	     default:return STD_NOTOK;break;
 58c:	81 e0       	ldi	r24, 0x01	; 1
	     }
	     else{
	         return STD_NOTOK;
	     }
	     return STD_OK;
	 }
 58e:	08 95       	ret

00000590 <LCD_enuSendString>:

/*******************************************************/
 ERROR LCD_enuSendString(u8 * Copy_pu8String)
 {
 590:	0f 93       	push	r16
 592:	1f 93       	push	r17
 594:	cf 93       	push	r28
 596:	8c 01       	movw	r16, r24
     for(u8 i ; Copy_pu8String[i] != '\0' ; i++ ){
 598:	c0 e0       	ldi	r28, 0x00	; 0
 59a:	fc 01       	movw	r30, r24
 59c:	80 81       	ld	r24, Z
 59e:	88 23       	and	r24, r24
 5a0:	49 f0       	breq	.+18     	; 0x5b4 <LCD_enuSendString+0x24>
         LCD_enuSendChar(Copy_pu8String[i]);
 5a2:	0e 94 90 02 	call	0x520	; 0x520 <LCD_enuSendChar>
	 }

/*******************************************************/
 ERROR LCD_enuSendString(u8 * Copy_pu8String)
 {
     for(u8 i ; Copy_pu8String[i] != '\0' ; i++ ){
 5a6:	cf 5f       	subi	r28, 0xFF	; 255
 5a8:	f8 01       	movw	r30, r16
 5aa:	ec 0f       	add	r30, r28
 5ac:	f1 1d       	adc	r31, r1
 5ae:	80 81       	ld	r24, Z
 5b0:	81 11       	cpse	r24, r1
 5b2:	f7 cf       	rjmp	.-18     	; 0x5a2 <LCD_enuSendString+0x12>
         LCD_enuSendChar(Copy_pu8String[i]);
     }
     return  STD_OK;
 }
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	08 95       	ret

000005be <LCD_enuClear>:
 /*******************************************************/
 /*ERROR  LCD_enu_SendNum(u32 Copy_u32Num)*/
 ERROR LCD_enuClear(void){
	 LCD_enuSendCmnd(0x01);
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	0e 94 24 02 	call	0x448	; 0x448 <LCD_enuSendCmnd>
	 return  STD_OK;

 }
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	08 95       	ret

000005c8 <KPD_enuGetKeyState>:
	DIO_u8SetPinValue(KPD_u8_PORT, KPD_u8_R4_PIN, DIO_u8_HIGH);

	return STD_OK;
}
/****************************************************/
ERROR KPD_enuGetKeyState(u8 *copy_pu8ReturnedKey){
 5c8:	3f 92       	push	r3
 5ca:	4f 92       	push	r4
 5cc:	5f 92       	push	r5
 5ce:	6f 92       	push	r6
 5d0:	7f 92       	push	r7
 5d2:	8f 92       	push	r8
 5d4:	9f 92       	push	r9
 5d6:	af 92       	push	r10
 5d8:	bf 92       	push	r11
 5da:	cf 92       	push	r12
 5dc:	df 92       	push	r13
 5de:	ef 92       	push	r14
 5e0:	ff 92       	push	r15
 5e2:	0f 93       	push	r16
 5e4:	1f 93       	push	r17
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
 5ee:	63 97       	sbiw	r28, 0x13	; 19
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	f8 94       	cli
 5f4:	de bf       	out	0x3e, r29	; 62
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	cd bf       	out	0x3d, r28	; 61
 5fa:	3c 01       	movw	r6, r24
 5fc:	0f 2e       	mov	r0, r31
 5fe:	f0 e7       	ldi	r31, 0x70	; 112
 600:	8f 2e       	mov	r8, r31
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	9f 2e       	mov	r9, r31
 606:	f0 2d       	mov	r31, r0
 608:	c1 2c       	mov	r12, r1
 60a:	d1 2c       	mov	r13, r1
					return STD_OK;
				}
			}
		}
		DIO_u8SetPinValue(KPD_u8_PORT ,KPD_Au8ColsPins[Local_u8ColIter],DIO_u8_HIGH);
		*copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
 60c:	33 24       	eor	r3, r3
 60e:	3a 94       	dec	r3
	u8 Local_u8RowIter;
	u8 Local_u8KeyValue;

	for(Local_u8ColIter = 0 ; Local_u8ColIter < 4 ; Local_u8ColIter++)
	{
		DIO_u8SetPinValue(KPD_u8_PORT ,KPD_Au8ColsPins[Local_u8ColIter],DIO_u8_LOW);
 610:	db 8a       	std	Y+19, r13	; 0x13
 612:	ca 8a       	std	Y+18, r12	; 0x12
 614:	f4 01       	movw	r30, r8
 616:	41 90       	ld	r4, Z+
 618:	4f 01       	movw	r8, r30
 61a:	40 e0       	ldi	r20, 0x00	; 0
 61c:	64 2d       	mov	r22, r4
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
 624:	0f 2e       	mov	r0, r31
 626:	f4 e7       	ldi	r31, 0x74	; 116
 628:	ef 2e       	mov	r14, r31
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	ff 2e       	mov	r15, r31
 62e:	f0 2d       	mov	r31, r0
 630:	00 e0       	ldi	r16, 0x00	; 0
 632:	10 e0       	ldi	r17, 0x00	; 0
		for(Local_u8RowIter = 0 ; Local_u8RowIter < 4; Local_u8RowIter++ )
		{
			DIO_u8GetPinValue(KPD_u8_PORT ,KPD_Au8RowsPins[Local_u8RowIter], &Local_u8KeyValue);
 634:	58 01       	movw	r10, r16
 636:	f7 01       	movw	r30, r14
 638:	51 90       	ld	r5, Z+
 63a:	7f 01       	movw	r14, r30
 63c:	ae 01       	movw	r20, r28
 63e:	4f 5f       	subi	r20, 0xFF	; 255
 640:	5f 4f       	sbci	r21, 0xFF	; 255
 642:	65 2d       	mov	r22, r5
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_u8GetPinValue>
			if(!Local_u8KeyValue)
 64a:	89 81       	ldd	r24, Y+1	; 0x01
 64c:	81 11       	cpse	r24, r1
 64e:	36 c0       	rjmp	.+108    	; 0x6bc <KPD_enuGetKeyState+0xf4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 650:	8f e1       	ldi	r24, 0x1F	; 31
 652:	9e e4       	ldi	r25, 0x4E	; 78
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <KPD_enuGetKeyState+0x8c>
 658:	00 c0       	rjmp	.+0      	; 0x65a <KPD_enuGetKeyState+0x92>
 65a:	00 00       	nop
			{

				_delay_ms(10);
				DIO_u8GetPinValue(KPD_u8_PORT ,KPD_Au8RowsPins[Local_u8RowIter], &Local_u8KeyValue);
 65c:	ae 01       	movw	r20, r28
 65e:	4f 5f       	subi	r20, 0xFF	; 255
 660:	5f 4f       	sbci	r21, 0xFF	; 255
 662:	65 2d       	mov	r22, r5
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_u8GetPinValue>
				if(!Local_u8KeyValue)
 66a:	89 81       	ldd	r24, Y+1	; 0x01
 66c:	81 11       	cpse	r24, r1
 66e:	26 c0       	rjmp	.+76     	; 0x6bc <KPD_enuGetKeyState+0xf4>
				{
					while(!Local_u8KeyValue)
					{
						DIO_u8GetPinValue(KPD_u8_PORT ,KPD_Au8RowsPins[Local_u8RowIter], &Local_u8KeyValue);
 670:	ae 01       	movw	r20, r28
 672:	4f 5f       	subi	r20, 0xFF	; 255
 674:	5f 4f       	sbci	r21, 0xFF	; 255
 676:	65 2d       	mov	r22, r5
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_u8GetPinValue>

				_delay_ms(10);
				DIO_u8GetPinValue(KPD_u8_PORT ,KPD_Au8RowsPins[Local_u8RowIter], &Local_u8KeyValue);
				if(!Local_u8KeyValue)
				{
					while(!Local_u8KeyValue)
 67e:	89 81       	ldd	r24, Y+1	; 0x01
 680:	88 23       	and	r24, r24
 682:	b1 f3       	breq	.-20     	; 0x670 <KPD_enuGetKeyState+0xa8>
					{
						DIO_u8GetPinValue(KPD_u8_PORT ,KPD_Au8RowsPins[Local_u8RowIter], &Local_u8KeyValue);
					}
					const u8 KPD_Au8Keys[4][4] = KPD_KEYS;
 684:	80 e1       	ldi	r24, 0x10	; 16
 686:	e0 e6       	ldi	r30, 0x60	; 96
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	de 01       	movw	r26, r28
 68c:	12 96       	adiw	r26, 0x02	; 2
 68e:	01 90       	ld	r0, Z+
 690:	0d 92       	st	X+, r0
 692:	8a 95       	dec	r24
 694:	e1 f7       	brne	.-8      	; 0x68e <KPD_enuGetKeyState+0xc6>
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowIter][Local_u8ColIter];// return the pressed key to the required variable
 696:	aa 0c       	add	r10, r10
 698:	bb 1c       	adc	r11, r11
 69a:	aa 0c       	add	r10, r10
 69c:	bb 1c       	adc	r11, r11
 69e:	e1 e0       	ldi	r30, 0x01	; 1
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	ec 0f       	add	r30, r28
 6a4:	fd 1f       	adc	r31, r29
 6a6:	ae 0e       	add	r10, r30
 6a8:	bf 1e       	adc	r11, r31
 6aa:	ea 89       	ldd	r30, Y+18	; 0x12
 6ac:	fb 89       	ldd	r31, Y+19	; 0x13
 6ae:	ea 0d       	add	r30, r10
 6b0:	fb 1d       	adc	r31, r11
 6b2:	81 81       	ldd	r24, Z+1	; 0x01
 6b4:	f3 01       	movw	r30, r6
 6b6:	80 83       	st	Z, r24

					return STD_OK;
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	16 c0       	rjmp	.+44     	; 0x6e8 <KPD_enuGetKeyState+0x120>
 6bc:	0f 5f       	subi	r16, 0xFF	; 255
 6be:	1f 4f       	sbci	r17, 0xFF	; 255
	u8 Local_u8KeyValue;

	for(Local_u8ColIter = 0 ; Local_u8ColIter < 4 ; Local_u8ColIter++)
	{
		DIO_u8SetPinValue(KPD_u8_PORT ,KPD_Au8ColsPins[Local_u8ColIter],DIO_u8_LOW);
		for(Local_u8RowIter = 0 ; Local_u8RowIter < 4; Local_u8RowIter++ )
 6c0:	04 30       	cpi	r16, 0x04	; 4
 6c2:	11 05       	cpc	r17, r1
 6c4:	09 f0       	breq	.+2      	; 0x6c8 <KPD_enuGetKeyState+0x100>
 6c6:	b6 cf       	rjmp	.-148    	; 0x634 <KPD_enuGetKeyState+0x6c>

					return STD_OK;
				}
			}
		}
		DIO_u8SetPinValue(KPD_u8_PORT ,KPD_Au8ColsPins[Local_u8ColIter],DIO_u8_HIGH);
 6c8:	41 e0       	ldi	r20, 0x01	; 1
 6ca:	64 2d       	mov	r22, r4
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
		*copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
 6d2:	f3 01       	movw	r30, r6
 6d4:	30 82       	st	Z, r3
 6d6:	ff ef       	ldi	r31, 0xFF	; 255
 6d8:	cf 1a       	sub	r12, r31
 6da:	df 0a       	sbc	r13, r31

	u8 Local_u8ColIter;
	u8 Local_u8RowIter;
	u8 Local_u8KeyValue;

	for(Local_u8ColIter = 0 ; Local_u8ColIter < 4 ; Local_u8ColIter++)
 6dc:	84 e0       	ldi	r24, 0x04	; 4
 6de:	c8 16       	cp	r12, r24
 6e0:	d1 04       	cpc	r13, r1
 6e2:	09 f0       	breq	.+2      	; 0x6e6 <KPD_enuGetKeyState+0x11e>
 6e4:	95 cf       	rjmp	.-214    	; 0x610 <KPD_enuGetKeyState+0x48>
		}
		DIO_u8SetPinValue(KPD_u8_PORT ,KPD_Au8ColsPins[Local_u8ColIter],DIO_u8_HIGH);
		*copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
	}

	return STD_NOTOK;
 6e6:	81 e0       	ldi	r24, 0x01	; 1

 6e8:	63 96       	adiw	r28, 0x13	; 19
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	f8 94       	cli
 6ee:	de bf       	out	0x3e, r29	; 62
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	cd bf       	out	0x3d, r28	; 61
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
 700:	df 90       	pop	r13
 702:	cf 90       	pop	r12
 704:	bf 90       	pop	r11
 706:	af 90       	pop	r10
 708:	9f 90       	pop	r9
 70a:	8f 90       	pop	r8
 70c:	7f 90       	pop	r7
 70e:	6f 90       	pop	r6
 710:	5f 90       	pop	r5
 712:	4f 90       	pop	r4
 714:	3f 90       	pop	r3
 716:	08 95       	ret

00000718 <delay>:
#include "../1-MCAL/1-DIO/DIO_interface.h"
#include "../2-HAL/1-LCD/LCD_Interface.h"
#include "../2-HAL/2-KPD/KPD_interface.h"

void delay(void)
{
 718:	24 ef       	ldi	r18, 0xF4	; 244
 71a:	31 e0       	ldi	r19, 0x01	; 1
 71c:	06 c0       	rjmp	.+12     	; 0x72a <delay+0x12>
	for(int x=0;x<500;x++)
		for(int y=0;y<500;y++)
			__asm("NOP");
 71e:	00 00       	nop
 720:	01 97       	sbiw	r24, 0x01	; 1
#include "../2-HAL/2-KPD/KPD_interface.h"

void delay(void)
{
	for(int x=0;x<500;x++)
		for(int y=0;y<500;y++)
 722:	e9 f7       	brne	.-6      	; 0x71e <delay+0x6>
 724:	21 50       	subi	r18, 0x01	; 1
 726:	31 09       	sbc	r19, r1
#include "../2-HAL/1-LCD/LCD_Interface.h"
#include "../2-HAL/2-KPD/KPD_interface.h"

void delay(void)
{
	for(int x=0;x<500;x++)
 728:	19 f0       	breq	.+6      	; 0x730 <delay+0x18>
#include "../1-MCAL/1-DIO/DIO_interface.h"
#include "../2-HAL/1-LCD/LCD_Interface.h"
#include "../2-HAL/2-KPD/KPD_interface.h"

void delay(void)
{
 72a:	84 ef       	ldi	r24, 0xF4	; 244
 72c:	91 e0       	ldi	r25, 0x01	; 1
 72e:	f7 cf       	rjmp	.-18     	; 0x71e <delay+0x6>
 730:	08 95       	ret

00000732 <main>:
#define PasswordLength         4
#define max_try                3


int main(void)
{
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	cd b7       	in	r28, 0x3d	; 61
 738:	de b7       	in	r29, 0x3e	; 62
 73a:	29 97       	sbiw	r28, 0x09	; 9
 73c:	0f b6       	in	r0, 0x3f	; 63
 73e:	f8 94       	cli
 740:	de bf       	out	0x3e, r29	; 62
 742:	0f be       	out	0x3f, r0	; 63
 744:	cd bf       	out	0x3d, r28	; 61
   
    DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_OUTPUT);
 746:	41 e0       	ldi	r20, 0x01	; 1
 748:	60 e0       	ldi	r22, 0x00	; 0
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_OUTPUT);
 750:	41 e0       	ldi	r20, 0x01	; 1
 752:	61 e0       	ldi	r22, 0x01	; 1
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_OUTPUT);
 75a:	41 e0       	ldi	r20, 0x01	; 1
 75c:	62 e0       	ldi	r22, 0x02	; 2
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN3,DIO_u8_OUTPUT); 
 764:	41 e0       	ldi	r20, 0x01	; 1
 766:	63 e0       	ldi	r22, 0x03	; 3
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	                                              
    DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN4,DIO_u8_INPUT);
 76e:	40 e0       	ldi	r20, 0x00	; 0
 770:	64 e0       	ldi	r22, 0x04	; 4
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN5,DIO_u8_INPUT);
 778:	40 e0       	ldi	r20, 0x00	; 0
 77a:	65 e0       	ldi	r22, 0x05	; 5
 77c:	80 e0       	ldi	r24, 0x00	; 0
 77e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN6,DIO_u8_INPUT);
 782:	40 e0       	ldi	r20, 0x00	; 0
 784:	66 e0       	ldi	r22, 0x06	; 6
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN7,DIO_u8_INPUT);
 78c:	40 e0       	ldi	r20, 0x00	; 0
 78e:	67 e0       	ldi	r22, 0x07	; 7
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	                                                      	
	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
 796:	41 e0       	ldi	r20, 0x01	; 1
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_HIGH);
 7a0:	41 e0       	ldi	r20, 0x01	; 1
 7a2:	61 e0       	ldi	r22, 0x01	; 1
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_HIGH);
 7aa:	41 e0       	ldi	r20, 0x01	; 1
 7ac:	62 e0       	ldi	r22, 0x02	; 2
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN3,DIO_u8_HIGH);
 7b4:	41 e0       	ldi	r20, 0x01	; 1
 7b6:	63 e0       	ldi	r22, 0x03	; 3
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN4,DIO_u8_HIGH);
 7be:	41 e0       	ldi	r20, 0x01	; 1
 7c0:	64 e0       	ldi	r22, 0x04	; 4
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN5,DIO_u8_HIGH);
 7c8:	41 e0       	ldi	r20, 0x01	; 1
 7ca:	65 e0       	ldi	r22, 0x05	; 5
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN6,DIO_u8_HIGH);
 7d2:	41 e0       	ldi	r20, 0x01	; 1
 7d4:	66 e0       	ldi	r22, 0x06	; 6
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN7,DIO_u8_HIGH); 
 7dc:	41 e0       	ldi	r20, 0x01	; 1
 7de:	67 e0       	ldi	r22, 0x07	; 7
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_u8SetPinValue>
	
     
	
	/*KPD_enuInit();*/
	
	LCD_enuInit();
 7e6:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_enuInit>
	u8 ReturnedKey  ;
	
	u8 ThePassword[PasswordLength] = the_Password;
 7ea:	84 e3       	ldi	r24, 0x34	; 52
 7ec:	94 e3       	ldi	r25, 0x34	; 52
 7ee:	9b 83       	std	Y+3, r25	; 0x03
 7f0:	8a 83       	std	Y+2, r24	; 0x02
 7f2:	83 e3       	ldi	r24, 0x33	; 51
 7f4:	93 e3       	ldi	r25, 0x33	; 51
 7f6:	9d 83       	std	Y+5, r25	; 0x05
 7f8:	8c 83       	std	Y+4, r24	; 0x04
	u8 Password[PasswordLength]={0};
 7fa:	1e 82       	std	Y+6, r1	; 0x06
 7fc:	1f 82       	std	Y+7, r1	; 0x07
 7fe:	18 86       	std	Y+8, r1	; 0x08
 800:	19 86       	std	Y+9, r1	; 0x09
	u8 index ;
	/*u8 flag = 0 ; */
	u8 check = 0 ;
 802:	00 e0       	ldi	r16, 0x00	; 0
 804:	7e 01       	movw	r14, r28
 806:	8a e0       	ldi	r24, 0x0A	; 10
 808:	e8 0e       	add	r14, r24
 80a:	f1 1c       	adc	r15, r1
 80c:	01 c0       	rjmp	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
		LCD_enuClear();
	    LCD_enuSendString("Wrong Password :)");
	    delay();
	    LCD_enuClear();
	    check ++ ;
	    index = 0 ;
 80e:	10 e0       	ldi	r17, 0x00	; 0
	u8 index ;
	/*u8 flag = 0 ; */
	u8 check = 0 ;
	while(1)
{
	LCD_enuSetAc(1,0);
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	70 e0       	ldi	r23, 0x00	; 0
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_enuSetAc>
	LCD_enuSendString("Enter_Password:");
 81c:	88 e7       	ldi	r24, 0x78	; 120
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 c8 02 	call	0x590	; 0x590 <LCD_enuSendString>
	delay();
 824:	0e 94 8c 03 	call	0x718	; 0x718 <delay>
	LCD_enuClear();
 828:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_enuClear>
	
	
     KPD_enuGetKeyState(&ReturnedKey);
 82c:	ce 01       	movw	r24, r28
 82e:	01 96       	adiw	r24, 0x01	; 1
 830:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <KPD_enuGetKeyState>
	if (ReturnedKey != KPD_u8_KEY_NOT_PRESSED )
 834:	89 81       	ldd	r24, Y+1	; 0x01
 836:	8f 3f       	cpi	r24, 0xFF	; 255
 838:	09 f4       	brne	.+2      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 83a:	45 c0       	rjmp	.+138    	; 0x8c6 <__stack+0x67>
	{
	LCD_enuSendChar('*');
 83c:	8a e2       	ldi	r24, 0x2A	; 42
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	0e 94 90 02 	call	0x520	; 0x520 <LCD_enuSendChar>
	Password[index] = ReturnedKey ;
 844:	e6 e0       	ldi	r30, 0x06	; 6
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	ec 0f       	add	r30, r28
 84a:	fd 1f       	adc	r31, r29
 84c:	e1 0f       	add	r30, r17
 84e:	f1 1d       	adc	r31, r1
 850:	89 81       	ldd	r24, Y+1	; 0x01
 852:	80 83       	st	Z, r24
	index ++ ; 
 854:	1f 5f       	subi	r17, 0xFF	; 255
 856:	37 c0       	rjmp	.+110    	; 0x8c6 <__stack+0x67>
	}
	if ((index)== PasswordLength)
	{
	for (int i = 0 ; i < PasswordLength ; i ++ )
	{
		if (Password[i]==ThePassword[i])
 858:	91 91       	ld	r25, Z+
 85a:	8d 91       	ld	r24, X+
 85c:	98 13       	cpse	r25, r24
 85e:	0b c0       	rjmp	.+22     	; 0x876 <__stack+0x17>
		{
		LCD_enuClear();
 860:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_enuClear>
	    LCD_enuSendString("True Password :)");
 864:	88 e8       	ldi	r24, 0x88	; 136
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	0e 94 c8 02 	call	0x590	; 0x590 <LCD_enuSendString>
	    delay();
 86c:	0e 94 8c 03 	call	0x718	; 0x718 <delay>
	    LCD_enuClear();
 870:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_enuClear>
	    break ;	    
 874:	cd cf       	rjmp	.-102    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
	Password[index] = ReturnedKey ;
	index ++ ; 
	}
	if ((index)== PasswordLength)
	{
	for (int i = 0 ; i < PasswordLength ; i ++ )
 876:	ee 15       	cp	r30, r14
 878:	ff 05       	cpc	r31, r15
 87a:	71 f7       	brne	.-36     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 87c:	c9 cf       	rjmp	.-110    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
	    break ;	    
		}
	}}
		else 
		{
		LCD_enuClear();
 87e:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_enuClear>
	    LCD_enuSendString("Wrong Password :)");
 882:	89 e9       	ldi	r24, 0x99	; 153
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 94 c8 02 	call	0x590	; 0x590 <LCD_enuSendString>
	    delay();
 88a:	0e 94 8c 03 	call	0x718	; 0x718 <delay>
	    LCD_enuClear();
 88e:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_enuClear>
	    check ++ ;
 892:	0f 5f       	subi	r16, 0xFF	; 255
	    index = 0 ;
		if (check >= max_try) 
 894:	03 30       	cpi	r16, 0x03	; 3
 896:	08 f4       	brcc	.+2      	; 0x89a <__stack+0x3b>
 898:	ba cf       	rjmp	.-140    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
		{
		LCD_enuClear();
 89a:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_enuClear>
	    LCD_enuSendString("Error :( ");
 89e:	8b ea       	ldi	r24, 0xAB	; 171
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 c8 02 	call	0x590	; 0x590 <LCD_enuSendString>
	    delay();
 8a6:	0e 94 8c 03 	call	0x718	; 0x718 <delay>
	    LCD_enuClear();
 8aa:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_enuClear>
	    check = 0 ;
 8ae:	00 e0       	ldi	r16, 0x00	; 0
		LCD_enuClear();
	    LCD_enuSendString("Wrong Password :)");
	    delay();
	    LCD_enuClear();
	    check ++ ;
	    index = 0 ;
 8b0:	10 e0       	ldi	r17, 0x00	; 0
 8b2:	ae cf       	rjmp	.-164    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
	}
	if ((index)== PasswordLength)
	{
	for (int i = 0 ; i < PasswordLength ; i ++ )
	{
		if (Password[i]==ThePassword[i])
 8b4:	9e 81       	ldd	r25, Y+6	; 0x06
 8b6:	8a 81       	ldd	r24, Y+2	; 0x02
 8b8:	98 17       	cp	r25, r24
 8ba:	91 f2       	breq	.-92     	; 0x860 <__stack+0x1>
 8bc:	fe 01       	movw	r30, r28
 8be:	37 96       	adiw	r30, 0x07	; 7
 8c0:	de 01       	movw	r26, r28
 8c2:	13 96       	adiw	r26, 0x03	; 3
 8c4:	c9 cf       	rjmp	.-110    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
	{
	LCD_enuSendChar('*');
	Password[index] = ReturnedKey ;
	index ++ ; 
	}
	if ((index)== PasswordLength)
 8c6:	14 30       	cpi	r17, 0x04	; 4
 8c8:	d1 f6       	brne	.-76     	; 0x87e <__stack+0x1f>
 8ca:	f4 cf       	rjmp	.-24     	; 0x8b4 <__stack+0x55>

000008cc <_exit>:
 8cc:	f8 94       	cli

000008ce <__stop_program>:
 8ce:	ff cf       	rjmp	.-2      	; 0x8ce <__stop_program>
