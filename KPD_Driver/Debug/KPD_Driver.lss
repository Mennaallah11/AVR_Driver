
KPD_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002464  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  00002464  000024d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001df4  00000000  00000000  00002558  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d65  00000000  00000000  0000434c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000050b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005211  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000053a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000073e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  000084e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009468  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  000095e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  000098aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a138  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 71 06 	call	0xce2	; 0xce2 <main>
      7a:	0c 94 30 12 	jmp	0x2460	; 0x2460 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 ec       	ldi	r26, 0xC0	; 192
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 15 12 	jmp	0x242a	; 0x242a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 05 12 	jmp	0x240a	; 0x240a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 05 12 	jmp	0x240a	; 0x240a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 ec       	ldi	r24, 0xC0	; 192
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 15 12 	jmp	0x242a	; 0x242a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 ec       	ldi	r22, 0xC0	; 192
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 05 12 	jmp	0x240a	; 0x240a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 05 12 	jmp	0x240a	; 0x240a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 05 12 	jmp	0x240a	; 0x240a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 25 12 	jmp	0x244a	; 0x244a <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <delay>:
#include "../1-MCAL/1-DIO/DIO_interface.h"
#include "../2-HAL/1-LCD/LCD_Interface.h"
#include "../2-HAL/2-KPD/KPD_interface.h"

void delay(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <delay+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <delay+0x8>
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
	for(int x=0;x<500;x++)
     c9a:	1c 82       	std	Y+4, r1	; 0x04
     c9c:	1b 82       	std	Y+3, r1	; 0x03
     c9e:	14 c0       	rjmp	.+40     	; 0xcc8 <delay+0x3a>
		for(int y=0;y<500;y++)
     ca0:	1a 82       	std	Y+2, r1	; 0x02
     ca2:	19 82       	std	Y+1, r1	; 0x01
     ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <delay+0x24>
			__asm("NOP");
     ca6:	00 00       	nop
#include "../2-HAL/2-KPD/KPD_interface.h"

void delay(void)
{
	for(int x=0;x<500;x++)
		for(int y=0;y<500;y++)
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	9a 83       	std	Y+2, r25	; 0x02
     cb0:	89 83       	std	Y+1, r24	; 0x01
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	9a 81       	ldd	r25, Y+2	; 0x02
     cb6:	21 e0       	ldi	r18, 0x01	; 1
     cb8:	84 3f       	cpi	r24, 0xF4	; 244
     cba:	92 07       	cpc	r25, r18
     cbc:	a4 f3       	brlt	.-24     	; 0xca6 <delay+0x18>
#include "../2-HAL/1-LCD/LCD_Interface.h"
#include "../2-HAL/2-KPD/KPD_interface.h"

void delay(void)
{
	for(int x=0;x<500;x++)
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	9c 81       	ldd	r25, Y+4	; 0x04
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	9c 83       	std	Y+4, r25	; 0x04
     cc6:	8b 83       	std	Y+3, r24	; 0x03
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	9c 81       	ldd	r25, Y+4	; 0x04
     ccc:	21 e0       	ldi	r18, 0x01	; 1
     cce:	84 3f       	cpi	r24, 0xF4	; 244
     cd0:	92 07       	cpc	r25, r18
     cd2:	34 f3       	brlt	.-52     	; 0xca0 <delay+0x12>
		for(int y=0;y<500;y++)
			__asm("NOP");
}
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <main>:
#define PasswordLength         4
#define max_try                3


int main(void)
{
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	2d 97       	sbiw	r28, 0x0d	; 13
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN6,DIO_u8_HIGH);
	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN7,DIO_u8_HIGH); */
	
     
	
	KPD_enuInit();
     cf6:	0e 94 10 08 	call	0x1020	; 0x1020 <KPD_enuInit>
	
	LCD_enuInit();
     cfa:	0e 94 2f 09 	call	0x125e	; 0x125e <LCD_enuInit>
	u8 ReturnedKey  ;
	
	u8 ThePassword[PasswordLength] = the_Password;
     cfe:	80 91 bb 00 	lds	r24, 0x00BB
     d02:	90 91 bc 00 	lds	r25, 0x00BC
     d06:	a0 91 bd 00 	lds	r26, 0x00BD
     d0a:	b0 91 be 00 	lds	r27, 0x00BE
     d0e:	8e 83       	std	Y+6, r24	; 0x06
     d10:	9f 83       	std	Y+7, r25	; 0x07
     d12:	a8 87       	std	Y+8, r26	; 0x08
     d14:	b9 87       	std	Y+9, r27	; 0x09
	u8 Password[PasswordLength]={0};
     d16:	1a 86       	std	Y+10, r1	; 0x0a
     d18:	1b 86       	std	Y+11, r1	; 0x0b
     d1a:	1c 86       	std	Y+12, r1	; 0x0c
     d1c:	1d 86       	std	Y+13, r1	; 0x0d
	u8 index ;
	/*u8 flag = 0 ; */
	u8 check = 0 ;
     d1e:	1b 82       	std	Y+3, r1	; 0x03
	while(1)
{
	LCD_enuSetAc(1,0);
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <LCD_enuSetAc>
	LCD_enuSendString("Enter_Password:");
     d2c:	80 e6       	ldi	r24, 0x60	; 96
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <LCD_enuSendString>
	delay();
     d34:	0e 94 47 06 	call	0xc8e	; 0xc8e <delay>
	LCD_enuClear();
     d38:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <LCD_enuClear>
	
	
     KPD_enuGetKeyState(&ReturnedKey);
     d3c:	ce 01       	movw	r24, r28
     d3e:	05 96       	adiw	r24, 0x05	; 5
     d40:	0e 94 01 07 	call	0xe02	; 0xe02 <KPD_enuGetKeyState>
	if (ReturnedKey != KPD_u8_KEY_NOT_PRESSED )
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	8f 3f       	cpi	r24, 0xFF	; 255
     d48:	89 f0       	breq	.+34     	; 0xd6c <main+0x8a>
	{
	LCD_enuSendChar('*');
     d4a:	8a e2       	ldi	r24, 0x2A	; 42
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 19 0c 	call	0x1832	; 0x1832 <LCD_enuSendChar>
	Password[index] = ReturnedKey ;
     d52:	8c 81       	ldd	r24, Y+4	; 0x04
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	4d 81       	ldd	r20, Y+5	; 0x05
     d5a:	ce 01       	movw	r24, r28
     d5c:	0a 96       	adiw	r24, 0x0a	; 10
     d5e:	fc 01       	movw	r30, r24
     d60:	e2 0f       	add	r30, r18
     d62:	f3 1f       	adc	r31, r19
     d64:	40 83       	st	Z, r20
	index ++ ; 
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	8f 5f       	subi	r24, 0xFF	; 255
     d6a:	8c 83       	std	Y+4, r24	; 0x04
	}
	if ((index)== PasswordLength)
     d6c:	8c 81       	ldd	r24, Y+4	; 0x04
     d6e:	84 30       	cpi	r24, 0x04	; 4
     d70:	59 f5       	brne	.+86     	; 0xdc8 <main+0xe6>
	{
	for (int i = 0 ; i < PasswordLength ; i ++ )
     d72:	1a 82       	std	Y+2, r1	; 0x02
     d74:	19 82       	std	Y+1, r1	; 0x01
     d76:	22 c0       	rjmp	.+68     	; 0xdbc <main+0xda>
	{
		if (Password[i]==ThePassword[i])
     d78:	29 81       	ldd	r18, Y+1	; 0x01
     d7a:	3a 81       	ldd	r19, Y+2	; 0x02
     d7c:	ce 01       	movw	r24, r28
     d7e:	0a 96       	adiw	r24, 0x0a	; 10
     d80:	fc 01       	movw	r30, r24
     d82:	e2 0f       	add	r30, r18
     d84:	f3 1f       	adc	r31, r19
     d86:	40 81       	ld	r20, Z
     d88:	29 81       	ldd	r18, Y+1	; 0x01
     d8a:	3a 81       	ldd	r19, Y+2	; 0x02
     d8c:	ce 01       	movw	r24, r28
     d8e:	06 96       	adiw	r24, 0x06	; 6
     d90:	fc 01       	movw	r30, r24
     d92:	e2 0f       	add	r30, r18
     d94:	f3 1f       	adc	r31, r19
     d96:	80 81       	ld	r24, Z
     d98:	48 17       	cp	r20, r24
     d9a:	59 f4       	brne	.+22     	; 0xdb2 <main+0xd0>
		{
		LCD_enuClear();
     d9c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <LCD_enuClear>
	    LCD_enuSendString("True Password :)");
     da0:	80 e7       	ldi	r24, 0x70	; 112
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <LCD_enuSendString>
	    delay();
     da8:	0e 94 47 06 	call	0xc8e	; 0xc8e <delay>
	    LCD_enuClear();
     dac:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <LCD_enuClear>
     db0:	b7 cf       	rjmp	.-146    	; 0xd20 <main+0x3e>
	Password[index] = ReturnedKey ;
	index ++ ; 
	}
	if ((index)== PasswordLength)
	{
	for (int i = 0 ; i < PasswordLength ; i ++ )
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	9a 81       	ldd	r25, Y+2	; 0x02
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	9a 81       	ldd	r25, Y+2	; 0x02
     dc0:	84 30       	cpi	r24, 0x04	; 4
     dc2:	91 05       	cpc	r25, r1
     dc4:	cc f2       	brlt	.-78     	; 0xd78 <main+0x96>
     dc6:	ac cf       	rjmp	.-168    	; 0xd20 <main+0x3e>
	    break ;	    
		}
	}}
		else 
		{
		LCD_enuClear();
     dc8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <LCD_enuClear>
	    LCD_enuSendString("Wrong Password :)");
     dcc:	81 e8       	ldi	r24, 0x81	; 129
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <LCD_enuSendString>
	    delay();
     dd4:	0e 94 47 06 	call	0xc8e	; 0xc8e <delay>
	    LCD_enuClear();
     dd8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <LCD_enuClear>
	    check ++ ;
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	8f 5f       	subi	r24, 0xFF	; 255
     de0:	8b 83       	std	Y+3, r24	; 0x03
		if (check >= max_try) 
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	83 30       	cpi	r24, 0x03	; 3
     de6:	08 f4       	brcc	.+2      	; 0xdea <main+0x108>
     de8:	9b cf       	rjmp	.-202    	; 0xd20 <main+0x3e>
		{
		LCD_enuClear();
     dea:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <LCD_enuClear>
	    LCD_enuSendString("Error , please again after 15 minutes:)");
     dee:	83 e9       	ldi	r24, 0x93	; 147
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <LCD_enuSendString>
	    delay();
     df6:	0e 94 47 06 	call	0xc8e	; 0xc8e <delay>
	    LCD_enuClear();
     dfa:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <LCD_enuClear>
	    check = 0 ;
     dfe:	1b 82       	std	Y+3, r1	; 0x03
     e00:	8f cf       	rjmp	.-226    	; 0xd20 <main+0x3e>

00000e02 <KPD_enuGetKeyState>:

const u8 KPD_Au8RowsPins[4] = {KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R1_PIN};
const u8 KPD_Au8ColsPins[4] = {KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};

/****************************************************/
ERROR KPD_enuGetKeyState(u8 *copy_pu8ReturnedKey){
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	65 97       	sbiw	r28, 0x15	; 21
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
     e16:	9c 8b       	std	Y+20, r25	; 0x14
     e18:	8b 8b       	std	Y+19, r24	; 0x13
u8 Local_u8RowsCounter ,Local_u8ColsCounter , Local_u8PinValue ,Local_u8Flag=DIO_u8_LOW ;
     e1a:	1f 86       	std	Y+15, r1	; 0x0f
if (copy_pu8ReturnedKey != NULL )
     e1c:	8b 89       	ldd	r24, Y+19	; 0x13
     e1e:	9c 89       	ldd	r25, Y+20	; 0x14
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	09 f4       	brne	.+2      	; 0xe26 <KPD_enuGetKeyState+0x24>
     e24:	f1 c0       	rjmp	.+482    	; 0x1008 <KPD_enuGetKeyState+0x206>
	{
	 *copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
     e26:	eb 89       	ldd	r30, Y+19	; 0x13
     e28:	fc 89       	ldd	r31, Y+20	; 0x14
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	80 83       	st	Z, r24
		/*Activate each Row => for loop on the pins of the rows */
		for(Local_u8RowsCounter=0 ; Local_u8RowsCounter <=3 ; Local_u8RowsCounter ++ )
     e2e:	19 8a       	std	Y+17, r1	; 0x11
     e30:	e5 c0       	rjmp	.+458    	; 0xffc <KPD_enuGetKeyState+0x1fa>
			{
				DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
     e32:	89 89       	ldd	r24, Y+17	; 0x11
     e34:	88 2f       	mov	r24, r24
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	fc 01       	movw	r30, r24
     e3a:	e8 52       	subi	r30, 0x28	; 40
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	90 81       	ld	r25, Z
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	69 2f       	mov	r22, r25
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <DIO_u8SetPinValue>
				/*Check which input pin has zero */

				for(Local_u8ColsCounter=0 ; Local_u8ColsCounter<=3 ; Local_u8ColsCounter ++ )
     e4a:	18 8a       	std	Y+16, r1	; 0x10
     e4c:	c1 c0       	rjmp	.+386    	; 0xfd0 <KPD_enuGetKeyState+0x1ce>
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
     e4e:	88 89       	ldd	r24, Y+16	; 0x10
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	fc 01       	movw	r30, r24
     e56:	e4 52       	subi	r30, 0x24	; 36
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	90 81       	ld	r25, Z
     e5c:	9e 01       	movw	r18, r28
     e5e:	2e 5e       	subi	r18, 0xEE	; 238
     e60:	3f 4f       	sbci	r19, 0xFF	; 255
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	69 2f       	mov	r22, r25
     e66:	a9 01       	movw	r20, r18
     e68:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <DIO_u8GetPinValue>
						if(Local_u8PinValue == DIO_u8_LOW)/*Switch is pressed*/
     e6c:	8a 89       	ldd	r24, Y+18	; 0x12
     e6e:	88 23       	and	r24, r24
     e70:	09 f0       	breq	.+2      	; 0xe74 <KPD_enuGetKeyState+0x72>
     e72:	ab c0       	rjmp	.+342    	; 0xfca <KPD_enuGetKeyState+0x1c8>
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	a0 ea       	ldi	r26, 0xA0	; 160
     e7a:	b1 e4       	ldi	r27, 0x41	; 65
     e7c:	8b 87       	std	Y+11, r24	; 0x0b
     e7e:	9c 87       	std	Y+12, r25	; 0x0c
     e80:	ad 87       	std	Y+13, r26	; 0x0d
     e82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e84:	6b 85       	ldd	r22, Y+11	; 0x0b
     e86:	7c 85       	ldd	r23, Y+12	; 0x0c
     e88:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	4a ef       	ldi	r20, 0xFA	; 250
     e92:	54 e4       	ldi	r21, 0x44	; 68
     e94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	8f 83       	std	Y+7, r24	; 0x07
     e9e:	98 87       	std	Y+8, r25	; 0x08
     ea0:	a9 87       	std	Y+9, r26	; 0x09
     ea2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ea4:	6f 81       	ldd	r22, Y+7	; 0x07
     ea6:	78 85       	ldd	r23, Y+8	; 0x08
     ea8:	89 85       	ldd	r24, Y+9	; 0x09
     eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e8       	ldi	r20, 0x80	; 128
     eb2:	5f e3       	ldi	r21, 0x3F	; 63
     eb4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     eb8:	88 23       	and	r24, r24
     eba:	2c f4       	brge	.+10     	; 0xec6 <KPD_enuGetKeyState+0xc4>
		__ticks = 1;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	9e 83       	std	Y+6, r25	; 0x06
     ec2:	8d 83       	std	Y+5, r24	; 0x05
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <KPD_enuGetKeyState+0x142>
	else if (__tmp > 65535)
     ec6:	6f 81       	ldd	r22, Y+7	; 0x07
     ec8:	78 85       	ldd	r23, Y+8	; 0x08
     eca:	89 85       	ldd	r24, Y+9	; 0x09
     ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	3f ef       	ldi	r19, 0xFF	; 255
     ed2:	4f e7       	ldi	r20, 0x7F	; 127
     ed4:	57 e4       	ldi	r21, 0x47	; 71
     ed6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     eda:	18 16       	cp	r1, r24
     edc:	4c f5       	brge	.+82     	; 0xf30 <KPD_enuGetKeyState+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ede:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e2       	ldi	r20, 0x20	; 32
     eec:	51 e4       	ldi	r21, 0x41	; 65
     eee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	bc 01       	movw	r22, r24
     ef8:	cd 01       	movw	r24, r26
     efa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	9e 83       	std	Y+6, r25	; 0x06
     f04:	8d 83       	std	Y+5, r24	; 0x05
     f06:	0f c0       	rjmp	.+30     	; 0xf26 <KPD_enuGetKeyState+0x124>
     f08:	88 ec       	ldi	r24, 0xC8	; 200
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	9c 83       	std	Y+4, r25	; 0x04
     f0e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <KPD_enuGetKeyState+0x112>
     f18:	9c 83       	std	Y+4, r25	; 0x04
     f1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	9e 83       	std	Y+6, r25	; 0x06
     f24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	9e 81       	ldd	r25, Y+6	; 0x06
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	69 f7       	brne	.-38     	; 0xf08 <KPD_enuGetKeyState+0x106>
     f2e:	14 c0       	rjmp	.+40     	; 0xf58 <KPD_enuGetKeyState+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f30:	6f 81       	ldd	r22, Y+7	; 0x07
     f32:	78 85       	ldd	r23, Y+8	; 0x08
     f34:	89 85       	ldd	r24, Y+9	; 0x09
     f36:	9a 85       	ldd	r25, Y+10	; 0x0a
     f38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	9e 83       	std	Y+6, r25	; 0x06
     f42:	8d 83       	std	Y+5, r24	; 0x05
     f44:	8d 81       	ldd	r24, Y+5	; 0x05
     f46:	9e 81       	ldd	r25, Y+6	; 0x06
     f48:	9a 83       	std	Y+2, r25	; 0x02
     f4a:	89 83       	std	Y+1, r24	; 0x01
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	f1 f7       	brne	.-4      	; 0xf50 <KPD_enuGetKeyState+0x14e>
     f54:	9a 83       	std	Y+2, r25	; 0x02
     f56:	89 83       	std	Y+1, r24	; 0x01
					{
					/* Debouncing */
				    _delay_ms(20);
				    DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
     f58:	88 89       	ldd	r24, Y+16	; 0x10
     f5a:	88 2f       	mov	r24, r24
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	fc 01       	movw	r30, r24
     f60:	e4 52       	subi	r30, 0x24	; 36
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	90 81       	ld	r25, Z
     f66:	9e 01       	movw	r18, r28
     f68:	2e 5e       	subi	r18, 0xEE	; 238
     f6a:	3f 4f       	sbci	r19, 0xFF	; 255
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	69 2f       	mov	r22, r25
     f70:	a9 01       	movw	r20, r18
     f72:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <DIO_u8GetPinValue>
     f76:	0f c0       	rjmp	.+30     	; 0xf96 <KPD_enuGetKeyState+0x194>

				    /*check if the pin is still == low */
				    while(Local_u8PinValue == DIO_u8_LOW)
				    {
				    	DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
     f78:	88 89       	ldd	r24, Y+16	; 0x10
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	fc 01       	movw	r30, r24
     f80:	e4 52       	subi	r30, 0x24	; 36
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	90 81       	ld	r25, Z
     f86:	9e 01       	movw	r18, r28
     f88:	2e 5e       	subi	r18, 0xEE	; 238
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	69 2f       	mov	r22, r25
     f90:	a9 01       	movw	r20, r18
     f92:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <DIO_u8GetPinValue>
					/* Debouncing */
				    _delay_ms(20);
				    DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);

				    /*check if the pin is still == low */
				    while(Local_u8PinValue == DIO_u8_LOW)
     f96:	8a 89       	ldd	r24, Y+18	; 0x12
     f98:	88 23       	and	r24, r24
     f9a:	71 f3       	breq	.-36     	; 0xf78 <KPD_enuGetKeyState+0x176>
				    {
				    	DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
				    }
				    *copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
     f9c:	89 89       	ldd	r24, Y+17	; 0x11
     f9e:	48 2f       	mov	r20, r24
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	88 89       	ldd	r24, Y+16	; 0x10
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	ca 01       	movw	r24, r20
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	82 0f       	add	r24, r18
     fb4:	93 1f       	adc	r25, r19
     fb6:	fc 01       	movw	r30, r24
     fb8:	e8 53       	subi	r30, 0x38	; 56
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	80 81       	ld	r24, Z
     fbe:	eb 89       	ldd	r30, Y+19	; 0x13
     fc0:	fc 89       	ldd	r31, Y+20	; 0x14
     fc2:	80 83       	st	Z, r24
				    Local_u8Flag = DIO_u8_HIGH ;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	8f 87       	std	Y+15, r24	; 0x0f
     fc8:	07 c0       	rjmp	.+14     	; 0xfd8 <KPD_enuGetKeyState+0x1d6>
		for(Local_u8RowsCounter=0 ; Local_u8RowsCounter <=3 ; Local_u8RowsCounter ++ )
			{
				DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
				/*Check which input pin has zero */

				for(Local_u8ColsCounter=0 ; Local_u8ColsCounter<=3 ; Local_u8ColsCounter ++ )
     fca:	88 89       	ldd	r24, Y+16	; 0x10
     fcc:	8f 5f       	subi	r24, 0xFF	; 255
     fce:	88 8b       	std	Y+16, r24	; 0x10
     fd0:	88 89       	ldd	r24, Y+16	; 0x10
     fd2:	84 30       	cpi	r24, 0x04	; 4
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <KPD_enuGetKeyState+0x1d6>
     fd6:	3b cf       	rjmp	.-394    	; 0xe4e <KPD_enuGetKeyState+0x4c>
				    break;

			}

		}
				DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
     fd8:	89 89       	ldd	r24, Y+17	; 0x11
     fda:	88 2f       	mov	r24, r24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	fc 01       	movw	r30, r24
     fe0:	e8 52       	subi	r30, 0x28	; 40
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	90 81       	ld	r25, Z
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	69 2f       	mov	r22, r25
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <DIO_u8SetPinValue>

				if (Local_u8Flag == DIO_u8_HIGH )
     ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	39 f0       	breq	.+14     	; 0x1004 <KPD_enuGetKeyState+0x202>
u8 Local_u8RowsCounter ,Local_u8ColsCounter , Local_u8PinValue ,Local_u8Flag=DIO_u8_LOW ;
if (copy_pu8ReturnedKey != NULL )
	{
	 *copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/*Activate each Row => for loop on the pins of the rows */
		for(Local_u8RowsCounter=0 ; Local_u8RowsCounter <=3 ; Local_u8RowsCounter ++ )
     ff6:	89 89       	ldd	r24, Y+17	; 0x11
     ff8:	8f 5f       	subi	r24, 0xFF	; 255
     ffa:	89 8b       	std	Y+17, r24	; 0x11
     ffc:	89 89       	ldd	r24, Y+17	; 0x11
     ffe:	84 30       	cpi	r24, 0x04	; 4
    1000:	08 f4       	brcc	.+2      	; 0x1004 <KPD_enuGetKeyState+0x202>
    1002:	17 cf       	rjmp	.-466    	; 0xe32 <KPD_enuGetKeyState+0x30>

	else
	{
		return STD_NOTOK;
	}
return STD_OK;
    1004:	1d 8a       	std	Y+21, r1	; 0x15
    1006:	02 c0       	rjmp	.+4      	; 0x100c <KPD_enuGetKeyState+0x20a>

    }

	else
	{
		return STD_NOTOK;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	8d 8b       	std	Y+21, r24	; 0x15
    100c:	8d 89       	ldd	r24, Y+21	; 0x15
	}
return STD_OK;
	}
    100e:	65 96       	adiw	r28, 0x15	; 21
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <KPD_enuInit>:

/*****************************************************/
ERROR KPD_enuInit(void)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinDirection(KPD_u8_PORT, KPD_u8_R1_PIN, DIO_u8_OUTPUT);
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	41 e0       	ldi	r20, 0x01	; 1
    102e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KPD_u8_PORT, KPD_u8_R2_PIN, DIO_u8_OUTPUT);
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	61 e0       	ldi	r22, 0x01	; 1
    1036:	41 e0       	ldi	r20, 0x01	; 1
    1038:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KPD_u8_PORT, KPD_u8_R3_PIN, DIO_u8_OUTPUT);
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	62 e0       	ldi	r22, 0x02	; 2
    1040:	41 e0       	ldi	r20, 0x01	; 1
    1042:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KPD_u8_PORT, KPD_u8_R4_PIN, DIO_u8_OUTPUT);
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	63 e0       	ldi	r22, 0x03	; 3
    104a:	41 e0       	ldi	r20, 0x01	; 1
    104c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>

    DIO_u8SetPinDirection(KPD_u8_PORT, KPD_u8_C1_PIN, DIO_u8_INPUT);
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	64 e0       	ldi	r22, 0x04	; 4
    1054:	40 e0       	ldi	r20, 0x00	; 0
    1056:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KPD_u8_PORT, KPD_u8_C2_PIN, DIO_u8_INPUT);
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	65 e0       	ldi	r22, 0x05	; 5
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KPD_u8_PORT, KPD_u8_C3_PIN, DIO_u8_INPUT);
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	66 e0       	ldi	r22, 0x06	; 6
    1068:	40 e0       	ldi	r20, 0x00	; 0
    106a:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(KPD_u8_PORT, KPD_u8_C4_PIN, DIO_u8_INPUT);
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	67 e0       	ldi	r22, 0x07	; 7
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>


 	DIO_u8SetPortValue (KPD_u8_PORT ,DIO_u8_HIGH) ;
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	61 e0       	ldi	r22, 0x01	; 1
    107c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <DIO_u8SetPortValue>

 	return STD_OK;
    1080:	80 e0       	ldi	r24, 0x00	; 0
}
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <LCD_enuSendCmnd>:
#define F_CPU 8000000UL
#include<util/delay.h>

/************************************************/
 ERROR LCD_enuSendCmnd(u8 Copy_u8Cmdn)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	69 97       	sbiw	r28, 0x19	; 25
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	89 8f       	std	Y+25, r24	; 0x19
#if    (LCD_u8_MODE == LCD_u8_MODE_8_BIT)
	/* RS = 0 */
	DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	40 e0       	ldi	r20, 0x00	; 0
    10a4:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <DIO_u8SetPinValue>

	/* RW = 0 */
    DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	61 e0       	ldi	r22, 0x01	; 1
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <DIO_u8SetPinValue>

    /*Write Command*/
    DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmdn);
    10b2:	83 e0       	ldi	r24, 0x03	; 3
    10b4:	69 8d       	ldd	r22, Y+25	; 0x19
    10b6:	0e 94 59 11 	call	0x22b2	; 0x22b2 <DIO_u8SetPortValue>

    /* E = 1 */
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	62 e0       	ldi	r22, 0x02	; 2
    10be:	41 e0       	ldi	r20, 0x01	; 1
    10c0:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <DIO_u8SetPinValue>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	a0 e8       	ldi	r26, 0x80	; 128
    10ca:	bf e3       	ldi	r27, 0x3F	; 63
    10cc:	8d 8b       	std	Y+21, r24	; 0x15
    10ce:	9e 8b       	std	Y+22, r25	; 0x16
    10d0:	af 8b       	std	Y+23, r26	; 0x17
    10d2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10d4:	6d 89       	ldd	r22, Y+21	; 0x15
    10d6:	7e 89       	ldd	r23, Y+22	; 0x16
    10d8:	8f 89       	ldd	r24, Y+23	; 0x17
    10da:	98 8d       	ldd	r25, Y+24	; 0x18
    10dc:	2b ea       	ldi	r18, 0xAB	; 171
    10de:	3a ea       	ldi	r19, 0xAA	; 170
    10e0:	4a e2       	ldi	r20, 0x2A	; 42
    10e2:	50 e4       	ldi	r21, 0x40	; 64
    10e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	89 8b       	std	Y+17, r24	; 0x11
    10ee:	9a 8b       	std	Y+18, r25	; 0x12
    10f0:	ab 8b       	std	Y+19, r26	; 0x13
    10f2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    10f4:	69 89       	ldd	r22, Y+17	; 0x11
    10f6:	7a 89       	ldd	r23, Y+18	; 0x12
    10f8:	8b 89       	ldd	r24, Y+19	; 0x13
    10fa:	9c 89       	ldd	r25, Y+20	; 0x14
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e8       	ldi	r20, 0x80	; 128
    1102:	5f e3       	ldi	r21, 0x3F	; 63
    1104:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1108:	88 23       	and	r24, r24
    110a:	1c f4       	brge	.+6      	; 0x1112 <LCD_enuSendCmnd+0x8a>
		__ticks = 1;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	88 8b       	std	Y+16, r24	; 0x10
    1110:	91 c0       	rjmp	.+290    	; 0x1234 <LCD_enuSendCmnd+0x1ac>
	else if (__tmp > 255)
    1112:	69 89       	ldd	r22, Y+17	; 0x11
    1114:	7a 89       	ldd	r23, Y+18	; 0x12
    1116:	8b 89       	ldd	r24, Y+19	; 0x13
    1118:	9c 89       	ldd	r25, Y+20	; 0x14
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	4f e7       	ldi	r20, 0x7F	; 127
    1120:	53 e4       	ldi	r21, 0x43	; 67
    1122:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1126:	18 16       	cp	r1, r24
    1128:	0c f0       	brlt	.+2      	; 0x112c <LCD_enuSendCmnd+0xa4>
    112a:	7b c0       	rjmp	.+246    	; 0x1222 <LCD_enuSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    112c:	6d 89       	ldd	r22, Y+21	; 0x15
    112e:	7e 89       	ldd	r23, Y+22	; 0x16
    1130:	8f 89       	ldd	r24, Y+23	; 0x17
    1132:	98 8d       	ldd	r25, Y+24	; 0x18
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	4a e7       	ldi	r20, 0x7A	; 122
    113a:	54 e4       	ldi	r21, 0x44	; 68
    113c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	8c 87       	std	Y+12, r24	; 0x0c
    1146:	9d 87       	std	Y+13, r25	; 0x0d
    1148:	ae 87       	std	Y+14, r26	; 0x0e
    114a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    114c:	6c 85       	ldd	r22, Y+12	; 0x0c
    114e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1150:	8e 85       	ldd	r24, Y+14	; 0x0e
    1152:	9f 85       	ldd	r25, Y+15	; 0x0f
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	4a ef       	ldi	r20, 0xFA	; 250
    115a:	54 e4       	ldi	r21, 0x44	; 68
    115c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	88 87       	std	Y+8, r24	; 0x08
    1166:	99 87       	std	Y+9, r25	; 0x09
    1168:	aa 87       	std	Y+10, r26	; 0x0a
    116a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    116c:	68 85       	ldd	r22, Y+8	; 0x08
    116e:	79 85       	ldd	r23, Y+9	; 0x09
    1170:	8a 85       	ldd	r24, Y+10	; 0x0a
    1172:	9b 85       	ldd	r25, Y+11	; 0x0b
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e8       	ldi	r20, 0x80	; 128
    117a:	5f e3       	ldi	r21, 0x3F	; 63
    117c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1180:	88 23       	and	r24, r24
    1182:	2c f4       	brge	.+10     	; 0x118e <LCD_enuSendCmnd+0x106>
		__ticks = 1;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	9f 83       	std	Y+7, r25	; 0x07
    118a:	8e 83       	std	Y+6, r24	; 0x06
    118c:	3f c0       	rjmp	.+126    	; 0x120c <LCD_enuSendCmnd+0x184>
	else if (__tmp > 65535)
    118e:	68 85       	ldd	r22, Y+8	; 0x08
    1190:	79 85       	ldd	r23, Y+9	; 0x09
    1192:	8a 85       	ldd	r24, Y+10	; 0x0a
    1194:	9b 85       	ldd	r25, Y+11	; 0x0b
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	3f ef       	ldi	r19, 0xFF	; 255
    119a:	4f e7       	ldi	r20, 0x7F	; 127
    119c:	57 e4       	ldi	r21, 0x47	; 71
    119e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11a2:	18 16       	cp	r1, r24
    11a4:	4c f5       	brge	.+82     	; 0x11f8 <LCD_enuSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a6:	6c 85       	ldd	r22, Y+12	; 0x0c
    11a8:	7d 85       	ldd	r23, Y+13	; 0x0d
    11aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    11ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e2       	ldi	r20, 0x20	; 32
    11b4:	51 e4       	ldi	r21, 0x41	; 65
    11b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	bc 01       	movw	r22, r24
    11c0:	cd 01       	movw	r24, r26
    11c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	9f 83       	std	Y+7, r25	; 0x07
    11cc:	8e 83       	std	Y+6, r24	; 0x06
    11ce:	0f c0       	rjmp	.+30     	; 0x11ee <LCD_enuSendCmnd+0x166>
    11d0:	88 ec       	ldi	r24, 0xC8	; 200
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	9d 83       	std	Y+5, r25	; 0x05
    11d6:	8c 83       	std	Y+4, r24	; 0x04
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	9d 81       	ldd	r25, Y+5	; 0x05
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <LCD_enuSendCmnd+0x154>
    11e0:	9d 83       	std	Y+5, r25	; 0x05
    11e2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e4:	8e 81       	ldd	r24, Y+6	; 0x06
    11e6:	9f 81       	ldd	r25, Y+7	; 0x07
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	9f 83       	std	Y+7, r25	; 0x07
    11ec:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ee:	8e 81       	ldd	r24, Y+6	; 0x06
    11f0:	9f 81       	ldd	r25, Y+7	; 0x07
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	69 f7       	brne	.-38     	; 0x11d0 <LCD_enuSendCmnd+0x148>
    11f6:	24 c0       	rjmp	.+72     	; 0x1240 <LCD_enuSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f8:	68 85       	ldd	r22, Y+8	; 0x08
    11fa:	79 85       	ldd	r23, Y+9	; 0x09
    11fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    11fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1200:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	9f 83       	std	Y+7, r25	; 0x07
    120a:	8e 83       	std	Y+6, r24	; 0x06
    120c:	8e 81       	ldd	r24, Y+6	; 0x06
    120e:	9f 81       	ldd	r25, Y+7	; 0x07
    1210:	9b 83       	std	Y+3, r25	; 0x03
    1212:	8a 83       	std	Y+2, r24	; 0x02
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	9b 81       	ldd	r25, Y+3	; 0x03
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <LCD_enuSendCmnd+0x190>
    121c:	9b 83       	std	Y+3, r25	; 0x03
    121e:	8a 83       	std	Y+2, r24	; 0x02
    1220:	0f c0       	rjmp	.+30     	; 0x1240 <LCD_enuSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1222:	69 89       	ldd	r22, Y+17	; 0x11
    1224:	7a 89       	ldd	r23, Y+18	; 0x12
    1226:	8b 89       	ldd	r24, Y+19	; 0x13
    1228:	9c 89       	ldd	r25, Y+20	; 0x14
    122a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	88 8b       	std	Y+16, r24	; 0x10
    1234:	88 89       	ldd	r24, Y+16	; 0x10
    1236:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	8a 95       	dec	r24
    123c:	f1 f7       	brne	.-4      	; 0x123a <LCD_enuSendCmnd+0x1b2>
    123e:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);

    /* E = 0 */
    DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	62 e0       	ldi	r22, 0x02	; 2
    1244:	40 e0       	ldi	r20, 0x00	; 0
    1246:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <DIO_u8SetPinValue>

    return STD_OK;
    124a:	80 e0       	ldi	r24, 0x00	; 0
    return STD_OK;

#endif
    return STD_OK;

}
    124c:	69 96       	adiw	r28, 0x19	; 25
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <LCD_enuInit>:
 	#endif
 	 	return STD_OK;

  }*/
 ERROR LCD_enuInit(void)
  {
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	cc 54       	subi	r28, 0x4C	; 76
    126c:	d0 40       	sbci	r29, 0x00	; 0
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61

 	DIO_u8SetPinDirection(LCD_u8_RS_PORT, LCD_u8_RS_PIN, DIO_u8_OUTPUT);
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	41 e0       	ldi	r20, 0x01	; 1
    127e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
 	DIO_u8SetPinDirection(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_OUTPUT);
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	61 e0       	ldi	r22, 0x01	; 1
    1286:	41 e0       	ldi	r20, 0x01	; 1
    1288:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
 	DIO_u8SetPinDirection(LCD_u8_E_PORT, LCD_u8_E_PIN, DIO_u8_OUTPUT);
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	62 e0       	ldi	r22, 0x02	; 2
    1290:	41 e0       	ldi	r20, 0x01	; 1
    1292:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
 	DIO_u8SetPortDirection(LCD_u8_DATA_PORT,DIO_u8_OUTPUT);
    1296:	83 e0       	ldi	r24, 0x03	; 3
    1298:	61 e0       	ldi	r22, 0x01	; 1
    129a:	0e 94 ba 10 	call	0x2174	; 0x2174 <DIO_u8SetPortDirection>
 	DIO_u8SetPortValue (LCD_u8_DATA_PORT ,DIO_u8_LOW  ) ;
    129e:	83 e0       	ldi	r24, 0x03	; 3
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	0e 94 59 11 	call	0x22b2	; 0x22b2 <DIO_u8SetPortValue>

 	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	40 e0       	ldi	r20, 0x00	; 0
    12ac:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <DIO_u8SetPinValue>
 	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <DIO_u8SetPinValue>
 	DIO_u8SetPinValue(LCD_u8_E_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	62 e0       	ldi	r22, 0x02	; 2
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <DIO_u8SetPinValue>
    12c4:	fe 01       	movw	r30, r28
    12c6:	e7 5b       	subi	r30, 0xB7	; 183
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	ac e0       	ldi	r26, 0x0C	; 12
    12d0:	b2 e4       	ldi	r27, 0x42	; 66
    12d2:	80 83       	st	Z, r24
    12d4:	91 83       	std	Z+1, r25	; 0x01
    12d6:	a2 83       	std	Z+2, r26	; 0x02
    12d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12da:	8e 01       	movw	r16, r28
    12dc:	0b 5b       	subi	r16, 0xBB	; 187
    12de:	1f 4f       	sbci	r17, 0xFF	; 255
    12e0:	fe 01       	movw	r30, r28
    12e2:	e7 5b       	subi	r30, 0xB7	; 183
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	60 81       	ld	r22, Z
    12e8:	71 81       	ldd	r23, Z+1	; 0x01
    12ea:	82 81       	ldd	r24, Z+2	; 0x02
    12ec:	93 81       	ldd	r25, Z+3	; 0x03
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	4a ef       	ldi	r20, 0xFA	; 250
    12f4:	54 e4       	ldi	r21, 0x44	; 68
    12f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	f8 01       	movw	r30, r16
    1300:	80 83       	st	Z, r24
    1302:	91 83       	std	Z+1, r25	; 0x01
    1304:	a2 83       	std	Z+2, r26	; 0x02
    1306:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1308:	fe 01       	movw	r30, r28
    130a:	eb 5b       	subi	r30, 0xBB	; 187
    130c:	ff 4f       	sbci	r31, 0xFF	; 255
    130e:	60 81       	ld	r22, Z
    1310:	71 81       	ldd	r23, Z+1	; 0x01
    1312:	82 81       	ldd	r24, Z+2	; 0x02
    1314:	93 81       	ldd	r25, Z+3	; 0x03
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e8       	ldi	r20, 0x80	; 128
    131c:	5f e3       	ldi	r21, 0x3F	; 63
    131e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1322:	88 23       	and	r24, r24
    1324:	44 f4       	brge	.+16     	; 0x1336 <LCD_enuInit+0xd8>
		__ticks = 1;
    1326:	fe 01       	movw	r30, r28
    1328:	ed 5b       	subi	r30, 0xBD	; 189
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	91 83       	std	Z+1, r25	; 0x01
    1332:	80 83       	st	Z, r24
    1334:	64 c0       	rjmp	.+200    	; 0x13fe <LCD_enuInit+0x1a0>
	else if (__tmp > 65535)
    1336:	fe 01       	movw	r30, r28
    1338:	eb 5b       	subi	r30, 0xBB	; 187
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	60 81       	ld	r22, Z
    133e:	71 81       	ldd	r23, Z+1	; 0x01
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	93 81       	ldd	r25, Z+3	; 0x03
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	3f ef       	ldi	r19, 0xFF	; 255
    1348:	4f e7       	ldi	r20, 0x7F	; 127
    134a:	57 e4       	ldi	r21, 0x47	; 71
    134c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1350:	18 16       	cp	r1, r24
    1352:	0c f0       	brlt	.+2      	; 0x1356 <LCD_enuInit+0xf8>
    1354:	43 c0       	rjmp	.+134    	; 0x13dc <LCD_enuInit+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1356:	fe 01       	movw	r30, r28
    1358:	e7 5b       	subi	r30, 0xB7	; 183
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	60 81       	ld	r22, Z
    135e:	71 81       	ldd	r23, Z+1	; 0x01
    1360:	82 81       	ldd	r24, Z+2	; 0x02
    1362:	93 81       	ldd	r25, Z+3	; 0x03
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e2       	ldi	r20, 0x20	; 32
    136a:	51 e4       	ldi	r21, 0x41	; 65
    136c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	8e 01       	movw	r16, r28
    1376:	0d 5b       	subi	r16, 0xBD	; 189
    1378:	1f 4f       	sbci	r17, 0xFF	; 255
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	f8 01       	movw	r30, r16
    1388:	91 83       	std	Z+1, r25	; 0x01
    138a:	80 83       	st	Z, r24
    138c:	1f c0       	rjmp	.+62     	; 0x13cc <LCD_enuInit+0x16e>
    138e:	fe 01       	movw	r30, r28
    1390:	ef 5b       	subi	r30, 0xBF	; 191
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	88 ec       	ldi	r24, 0xC8	; 200
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	91 83       	std	Z+1, r25	; 0x01
    139a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    139c:	fe 01       	movw	r30, r28
    139e:	ef 5b       	subi	r30, 0xBF	; 191
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	80 81       	ld	r24, Z
    13a4:	91 81       	ldd	r25, Z+1	; 0x01
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	f1 f7       	brne	.-4      	; 0x13a6 <LCD_enuInit+0x148>
    13aa:	fe 01       	movw	r30, r28
    13ac:	ef 5b       	subi	r30, 0xBF	; 191
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	91 83       	std	Z+1, r25	; 0x01
    13b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b4:	de 01       	movw	r26, r28
    13b6:	ad 5b       	subi	r26, 0xBD	; 189
    13b8:	bf 4f       	sbci	r27, 0xFF	; 255
    13ba:	fe 01       	movw	r30, r28
    13bc:	ed 5b       	subi	r30, 0xBD	; 189
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	80 81       	ld	r24, Z
    13c2:	91 81       	ldd	r25, Z+1	; 0x01
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	11 96       	adiw	r26, 0x01	; 1
    13c8:	9c 93       	st	X, r25
    13ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13cc:	fe 01       	movw	r30, r28
    13ce:	ed 5b       	subi	r30, 0xBD	; 189
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 81       	ld	r24, Z
    13d4:	91 81       	ldd	r25, Z+1	; 0x01
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	d1 f6       	brne	.-76     	; 0x138e <LCD_enuInit+0x130>
    13da:	24 c0       	rjmp	.+72     	; 0x1424 <LCD_enuInit+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13dc:	8e 01       	movw	r16, r28
    13de:	0d 5b       	subi	r16, 0xBD	; 189
    13e0:	1f 4f       	sbci	r17, 0xFF	; 255
    13e2:	fe 01       	movw	r30, r28
    13e4:	eb 5b       	subi	r30, 0xBB	; 187
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	60 81       	ld	r22, Z
    13ea:	71 81       	ldd	r23, Z+1	; 0x01
    13ec:	82 81       	ldd	r24, Z+2	; 0x02
    13ee:	93 81       	ldd	r25, Z+3	; 0x03
    13f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	f8 01       	movw	r30, r16
    13fa:	91 83       	std	Z+1, r25	; 0x01
    13fc:	80 83       	st	Z, r24
    13fe:	fe 01       	movw	r30, r28
    1400:	ed 5b       	subi	r30, 0xBD	; 189
    1402:	ff 4f       	sbci	r31, 0xFF	; 255
    1404:	80 81       	ld	r24, Z
    1406:	91 81       	ldd	r25, Z+1	; 0x01
    1408:	fe 01       	movw	r30, r28
    140a:	ff 96       	adiw	r30, 0x3f	; 63
    140c:	91 83       	std	Z+1, r25	; 0x01
    140e:	80 83       	st	Z, r24
    1410:	fe 01       	movw	r30, r28
    1412:	ff 96       	adiw	r30, 0x3f	; 63
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <LCD_enuInit+0x1ba>
    141c:	fe 01       	movw	r30, r28
    141e:	ff 96       	adiw	r30, 0x3f	; 63
    1420:	91 83       	std	Z+1, r25	; 0x01
    1422:	80 83       	st	Z, r24
  	_delay_ms(35);
  	LCD_enuSendCmnd(FUN_SET);
    1424:	88 e3       	ldi	r24, 0x38	; 56
    1426:	0e 94 44 08 	call	0x1088	; 0x1088 <LCD_enuSendCmnd>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a0 e2       	ldi	r26, 0x20	; 32
    1430:	b2 e4       	ldi	r27, 0x42	; 66
    1432:	8b af       	std	Y+59, r24	; 0x3b
    1434:	9c af       	std	Y+60, r25	; 0x3c
    1436:	ad af       	std	Y+61, r26	; 0x3d
    1438:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    143a:	6b ad       	ldd	r22, Y+59	; 0x3b
    143c:	7c ad       	ldd	r23, Y+60	; 0x3c
    143e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1440:	9e ad       	ldd	r25, Y+62	; 0x3e
    1442:	2b ea       	ldi	r18, 0xAB	; 171
    1444:	3a ea       	ldi	r19, 0xAA	; 170
    1446:	4a e2       	ldi	r20, 0x2A	; 42
    1448:	50 e4       	ldi	r21, 0x40	; 64
    144a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	8f ab       	std	Y+55, r24	; 0x37
    1454:	98 af       	std	Y+56, r25	; 0x38
    1456:	a9 af       	std	Y+57, r26	; 0x39
    1458:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    145a:	6f a9       	ldd	r22, Y+55	; 0x37
    145c:	78 ad       	ldd	r23, Y+56	; 0x38
    145e:	89 ad       	ldd	r24, Y+57	; 0x39
    1460:	9a ad       	ldd	r25, Y+58	; 0x3a
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e8       	ldi	r20, 0x80	; 128
    1468:	5f e3       	ldi	r21, 0x3F	; 63
    146a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    146e:	88 23       	and	r24, r24
    1470:	1c f4       	brge	.+6      	; 0x1478 <LCD_enuInit+0x21a>
		__ticks = 1;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	8e ab       	std	Y+54, r24	; 0x36
    1476:	91 c0       	rjmp	.+290    	; 0x159a <LCD_enuInit+0x33c>
	else if (__tmp > 255)
    1478:	6f a9       	ldd	r22, Y+55	; 0x37
    147a:	78 ad       	ldd	r23, Y+56	; 0x38
    147c:	89 ad       	ldd	r24, Y+57	; 0x39
    147e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	4f e7       	ldi	r20, 0x7F	; 127
    1486:	53 e4       	ldi	r21, 0x43	; 67
    1488:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    148c:	18 16       	cp	r1, r24
    148e:	0c f0       	brlt	.+2      	; 0x1492 <LCD_enuInit+0x234>
    1490:	7b c0       	rjmp	.+246    	; 0x1588 <LCD_enuInit+0x32a>
	{
		_delay_ms(__us / 1000.0);
    1492:	6b ad       	ldd	r22, Y+59	; 0x3b
    1494:	7c ad       	ldd	r23, Y+60	; 0x3c
    1496:	8d ad       	ldd	r24, Y+61	; 0x3d
    1498:	9e ad       	ldd	r25, Y+62	; 0x3e
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	4a e7       	ldi	r20, 0x7A	; 122
    14a0:	54 e4       	ldi	r21, 0x44	; 68
    14a2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	8a ab       	std	Y+50, r24	; 0x32
    14ac:	9b ab       	std	Y+51, r25	; 0x33
    14ae:	ac ab       	std	Y+52, r26	; 0x34
    14b0:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b2:	6a a9       	ldd	r22, Y+50	; 0x32
    14b4:	7b a9       	ldd	r23, Y+51	; 0x33
    14b6:	8c a9       	ldd	r24, Y+52	; 0x34
    14b8:	9d a9       	ldd	r25, Y+53	; 0x35
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	4a ef       	ldi	r20, 0xFA	; 250
    14c0:	54 e4       	ldi	r21, 0x44	; 68
    14c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	8e a7       	std	Y+46, r24	; 0x2e
    14cc:	9f a7       	std	Y+47, r25	; 0x2f
    14ce:	a8 ab       	std	Y+48, r26	; 0x30
    14d0:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    14d2:	6e a5       	ldd	r22, Y+46	; 0x2e
    14d4:	7f a5       	ldd	r23, Y+47	; 0x2f
    14d6:	88 a9       	ldd	r24, Y+48	; 0x30
    14d8:	99 a9       	ldd	r25, Y+49	; 0x31
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	5f e3       	ldi	r21, 0x3F	; 63
    14e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14e6:	88 23       	and	r24, r24
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <LCD_enuInit+0x296>
		__ticks = 1;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9d a7       	std	Y+45, r25	; 0x2d
    14f0:	8c a7       	std	Y+44, r24	; 0x2c
    14f2:	3f c0       	rjmp	.+126    	; 0x1572 <LCD_enuInit+0x314>
	else if (__tmp > 65535)
    14f4:	6e a5       	ldd	r22, Y+46	; 0x2e
    14f6:	7f a5       	ldd	r23, Y+47	; 0x2f
    14f8:	88 a9       	ldd	r24, Y+48	; 0x30
    14fa:	99 a9       	ldd	r25, Y+49	; 0x31
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	3f ef       	ldi	r19, 0xFF	; 255
    1500:	4f e7       	ldi	r20, 0x7F	; 127
    1502:	57 e4       	ldi	r21, 0x47	; 71
    1504:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1508:	18 16       	cp	r1, r24
    150a:	4c f5       	brge	.+82     	; 0x155e <LCD_enuInit+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150c:	6a a9       	ldd	r22, Y+50	; 0x32
    150e:	7b a9       	ldd	r23, Y+51	; 0x33
    1510:	8c a9       	ldd	r24, Y+52	; 0x34
    1512:	9d a9       	ldd	r25, Y+53	; 0x35
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e2       	ldi	r20, 0x20	; 32
    151a:	51 e4       	ldi	r21, 0x41	; 65
    151c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	9d a7       	std	Y+45, r25	; 0x2d
    1532:	8c a7       	std	Y+44, r24	; 0x2c
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <LCD_enuInit+0x2f6>
    1536:	88 ec       	ldi	r24, 0xC8	; 200
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	9b a7       	std	Y+43, r25	; 0x2b
    153c:	8a a7       	std	Y+42, r24	; 0x2a
    153e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1540:	9b a5       	ldd	r25, Y+43	; 0x2b
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD_enuInit+0x2e4>
    1546:	9b a7       	std	Y+43, r25	; 0x2b
    1548:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154a:	8c a5       	ldd	r24, Y+44	; 0x2c
    154c:	9d a5       	ldd	r25, Y+45	; 0x2d
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	9d a7       	std	Y+45, r25	; 0x2d
    1552:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1554:	8c a5       	ldd	r24, Y+44	; 0x2c
    1556:	9d a5       	ldd	r25, Y+45	; 0x2d
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	69 f7       	brne	.-38     	; 0x1536 <LCD_enuInit+0x2d8>
    155c:	24 c0       	rjmp	.+72     	; 0x15a6 <LCD_enuInit+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1560:	7f a5       	ldd	r23, Y+47	; 0x2f
    1562:	88 a9       	ldd	r24, Y+48	; 0x30
    1564:	99 a9       	ldd	r25, Y+49	; 0x31
    1566:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9d a7       	std	Y+45, r25	; 0x2d
    1570:	8c a7       	std	Y+44, r24	; 0x2c
    1572:	8c a5       	ldd	r24, Y+44	; 0x2c
    1574:	9d a5       	ldd	r25, Y+45	; 0x2d
    1576:	99 a7       	std	Y+41, r25	; 0x29
    1578:	88 a7       	std	Y+40, r24	; 0x28
    157a:	88 a5       	ldd	r24, Y+40	; 0x28
    157c:	99 a5       	ldd	r25, Y+41	; 0x29
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <LCD_enuInit+0x320>
    1582:	99 a7       	std	Y+41, r25	; 0x29
    1584:	88 a7       	std	Y+40, r24	; 0x28
    1586:	0f c0       	rjmp	.+30     	; 0x15a6 <LCD_enuInit+0x348>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1588:	6f a9       	ldd	r22, Y+55	; 0x37
    158a:	78 ad       	ldd	r23, Y+56	; 0x38
    158c:	89 ad       	ldd	r24, Y+57	; 0x39
    158e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1590:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	8e ab       	std	Y+54, r24	; 0x36
    159a:	8e a9       	ldd	r24, Y+54	; 0x36
    159c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    159e:	8f a1       	ldd	r24, Y+39	; 0x27
    15a0:	8a 95       	dec	r24
    15a2:	f1 f7       	brne	.-4      	; 0x15a0 <LCD_enuInit+0x342>
    15a4:	8f a3       	std	Y+39, r24	; 0x27
  	_delay_us(40);
  	LCD_enuSendCmnd(DISPLAY_ON_OFF);
    15a6:	8f e0       	ldi	r24, 0x0F	; 15
    15a8:	0e 94 44 08 	call	0x1088	; 0x1088 <LCD_enuSendCmnd>
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	a0 e2       	ldi	r26, 0x20	; 32
    15b2:	b2 e4       	ldi	r27, 0x42	; 66
    15b4:	8b a3       	std	Y+35, r24	; 0x23
    15b6:	9c a3       	std	Y+36, r25	; 0x24
    15b8:	ad a3       	std	Y+37, r26	; 0x25
    15ba:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15bc:	6b a1       	ldd	r22, Y+35	; 0x23
    15be:	7c a1       	ldd	r23, Y+36	; 0x24
    15c0:	8d a1       	ldd	r24, Y+37	; 0x25
    15c2:	9e a1       	ldd	r25, Y+38	; 0x26
    15c4:	2b ea       	ldi	r18, 0xAB	; 171
    15c6:	3a ea       	ldi	r19, 0xAA	; 170
    15c8:	4a e2       	ldi	r20, 0x2A	; 42
    15ca:	50 e4       	ldi	r21, 0x40	; 64
    15cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	8f 8f       	std	Y+31, r24	; 0x1f
    15d6:	98 a3       	std	Y+32, r25	; 0x20
    15d8:	a9 a3       	std	Y+33, r26	; 0x21
    15da:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    15dc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15de:	78 a1       	ldd	r23, Y+32	; 0x20
    15e0:	89 a1       	ldd	r24, Y+33	; 0x21
    15e2:	9a a1       	ldd	r25, Y+34	; 0x22
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e8       	ldi	r20, 0x80	; 128
    15ea:	5f e3       	ldi	r21, 0x3F	; 63
    15ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15f0:	88 23       	and	r24, r24
    15f2:	1c f4       	brge	.+6      	; 0x15fa <LCD_enuInit+0x39c>
		__ticks = 1;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	8e 8f       	std	Y+30, r24	; 0x1e
    15f8:	91 c0       	rjmp	.+290    	; 0x171c <LCD_enuInit+0x4be>
	else if (__tmp > 255)
    15fa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15fc:	78 a1       	ldd	r23, Y+32	; 0x20
    15fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1600:	9a a1       	ldd	r25, Y+34	; 0x22
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	4f e7       	ldi	r20, 0x7F	; 127
    1608:	53 e4       	ldi	r21, 0x43	; 67
    160a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    160e:	18 16       	cp	r1, r24
    1610:	0c f0       	brlt	.+2      	; 0x1614 <LCD_enuInit+0x3b6>
    1612:	7b c0       	rjmp	.+246    	; 0x170a <LCD_enuInit+0x4ac>
	{
		_delay_ms(__us / 1000.0);
    1614:	6b a1       	ldd	r22, Y+35	; 0x23
    1616:	7c a1       	ldd	r23, Y+36	; 0x24
    1618:	8d a1       	ldd	r24, Y+37	; 0x25
    161a:	9e a1       	ldd	r25, Y+38	; 0x26
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	4a e7       	ldi	r20, 0x7A	; 122
    1622:	54 e4       	ldi	r21, 0x44	; 68
    1624:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	8a 8f       	std	Y+26, r24	; 0x1a
    162e:	9b 8f       	std	Y+27, r25	; 0x1b
    1630:	ac 8f       	std	Y+28, r26	; 0x1c
    1632:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1634:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1636:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1638:	8c 8d       	ldd	r24, Y+28	; 0x1c
    163a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	4a ef       	ldi	r20, 0xFA	; 250
    1642:	54 e4       	ldi	r21, 0x44	; 68
    1644:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	8e 8b       	std	Y+22, r24	; 0x16
    164e:	9f 8b       	std	Y+23, r25	; 0x17
    1650:	a8 8f       	std	Y+24, r26	; 0x18
    1652:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1654:	6e 89       	ldd	r22, Y+22	; 0x16
    1656:	7f 89       	ldd	r23, Y+23	; 0x17
    1658:	88 8d       	ldd	r24, Y+24	; 0x18
    165a:	99 8d       	ldd	r25, Y+25	; 0x19
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e8       	ldi	r20, 0x80	; 128
    1662:	5f e3       	ldi	r21, 0x3F	; 63
    1664:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1668:	88 23       	and	r24, r24
    166a:	2c f4       	brge	.+10     	; 0x1676 <LCD_enuInit+0x418>
		__ticks = 1;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	9d 8b       	std	Y+21, r25	; 0x15
    1672:	8c 8b       	std	Y+20, r24	; 0x14
    1674:	3f c0       	rjmp	.+126    	; 0x16f4 <LCD_enuInit+0x496>
	else if (__tmp > 65535)
    1676:	6e 89       	ldd	r22, Y+22	; 0x16
    1678:	7f 89       	ldd	r23, Y+23	; 0x17
    167a:	88 8d       	ldd	r24, Y+24	; 0x18
    167c:	99 8d       	ldd	r25, Y+25	; 0x19
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	3f ef       	ldi	r19, 0xFF	; 255
    1682:	4f e7       	ldi	r20, 0x7F	; 127
    1684:	57 e4       	ldi	r21, 0x47	; 71
    1686:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    168a:	18 16       	cp	r1, r24
    168c:	4c f5       	brge	.+82     	; 0x16e0 <LCD_enuInit+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1690:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1692:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1694:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e2       	ldi	r20, 0x20	; 32
    169c:	51 e4       	ldi	r21, 0x41	; 65
    169e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	9d 8b       	std	Y+21, r25	; 0x15
    16b4:	8c 8b       	std	Y+20, r24	; 0x14
    16b6:	0f c0       	rjmp	.+30     	; 0x16d6 <LCD_enuInit+0x478>
    16b8:	88 ec       	ldi	r24, 0xC8	; 200
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	9b 8b       	std	Y+19, r25	; 0x13
    16be:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16c0:	8a 89       	ldd	r24, Y+18	; 0x12
    16c2:	9b 89       	ldd	r25, Y+19	; 0x13
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <LCD_enuInit+0x466>
    16c8:	9b 8b       	std	Y+19, r25	; 0x13
    16ca:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16cc:	8c 89       	ldd	r24, Y+20	; 0x14
    16ce:	9d 89       	ldd	r25, Y+21	; 0x15
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	9d 8b       	std	Y+21, r25	; 0x15
    16d4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d6:	8c 89       	ldd	r24, Y+20	; 0x14
    16d8:	9d 89       	ldd	r25, Y+21	; 0x15
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	69 f7       	brne	.-38     	; 0x16b8 <LCD_enuInit+0x45a>
    16de:	24 c0       	rjmp	.+72     	; 0x1728 <LCD_enuInit+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e0:	6e 89       	ldd	r22, Y+22	; 0x16
    16e2:	7f 89       	ldd	r23, Y+23	; 0x17
    16e4:	88 8d       	ldd	r24, Y+24	; 0x18
    16e6:	99 8d       	ldd	r25, Y+25	; 0x19
    16e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	9d 8b       	std	Y+21, r25	; 0x15
    16f2:	8c 8b       	std	Y+20, r24	; 0x14
    16f4:	8c 89       	ldd	r24, Y+20	; 0x14
    16f6:	9d 89       	ldd	r25, Y+21	; 0x15
    16f8:	99 8b       	std	Y+17, r25	; 0x11
    16fa:	88 8b       	std	Y+16, r24	; 0x10
    16fc:	88 89       	ldd	r24, Y+16	; 0x10
    16fe:	99 89       	ldd	r25, Y+17	; 0x11
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	f1 f7       	brne	.-4      	; 0x1700 <LCD_enuInit+0x4a2>
    1704:	99 8b       	std	Y+17, r25	; 0x11
    1706:	88 8b       	std	Y+16, r24	; 0x10
    1708:	0f c0       	rjmp	.+30     	; 0x1728 <LCD_enuInit+0x4ca>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    170a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    170c:	78 a1       	ldd	r23, Y+32	; 0x20
    170e:	89 a1       	ldd	r24, Y+33	; 0x21
    1710:	9a a1       	ldd	r25, Y+34	; 0x22
    1712:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	8e 8f       	std	Y+30, r24	; 0x1e
    171c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    171e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1720:	8f 85       	ldd	r24, Y+15	; 0x0f
    1722:	8a 95       	dec	r24
    1724:	f1 f7       	brne	.-4      	; 0x1722 <LCD_enuInit+0x4c4>
    1726:	8f 87       	std	Y+15, r24	; 0x0f
  	_delay_us(40);
  	LCD_enuSendCmnd(DISPLAY_CLEAR);
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	0e 94 44 08 	call	0x1088	; 0x1088 <LCD_enuSendCmnd>
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	a0 e0       	ldi	r26, 0x00	; 0
    1734:	b0 e4       	ldi	r27, 0x40	; 64
    1736:	8b 87       	std	Y+11, r24	; 0x0b
    1738:	9c 87       	std	Y+12, r25	; 0x0c
    173a:	ad 87       	std	Y+13, r26	; 0x0d
    173c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1740:	7c 85       	ldd	r23, Y+12	; 0x0c
    1742:	8d 85       	ldd	r24, Y+13	; 0x0d
    1744:	9e 85       	ldd	r25, Y+14	; 0x0e
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	4a ef       	ldi	r20, 0xFA	; 250
    174c:	54 e4       	ldi	r21, 0x44	; 68
    174e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	8f 83       	std	Y+7, r24	; 0x07
    1758:	98 87       	std	Y+8, r25	; 0x08
    175a:	a9 87       	std	Y+9, r26	; 0x09
    175c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    175e:	6f 81       	ldd	r22, Y+7	; 0x07
    1760:	78 85       	ldd	r23, Y+8	; 0x08
    1762:	89 85       	ldd	r24, Y+9	; 0x09
    1764:	9a 85       	ldd	r25, Y+10	; 0x0a
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 e8       	ldi	r20, 0x80	; 128
    176c:	5f e3       	ldi	r21, 0x3F	; 63
    176e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1772:	88 23       	and	r24, r24
    1774:	2c f4       	brge	.+10     	; 0x1780 <LCD_enuInit+0x522>
		__ticks = 1;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9e 83       	std	Y+6, r25	; 0x06
    177c:	8d 83       	std	Y+5, r24	; 0x05
    177e:	3f c0       	rjmp	.+126    	; 0x17fe <LCD_enuInit+0x5a0>
	else if (__tmp > 65535)
    1780:	6f 81       	ldd	r22, Y+7	; 0x07
    1782:	78 85       	ldd	r23, Y+8	; 0x08
    1784:	89 85       	ldd	r24, Y+9	; 0x09
    1786:	9a 85       	ldd	r25, Y+10	; 0x0a
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	3f ef       	ldi	r19, 0xFF	; 255
    178c:	4f e7       	ldi	r20, 0x7F	; 127
    178e:	57 e4       	ldi	r21, 0x47	; 71
    1790:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1794:	18 16       	cp	r1, r24
    1796:	4c f5       	brge	.+82     	; 0x17ea <LCD_enuInit+0x58c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1798:	6b 85       	ldd	r22, Y+11	; 0x0b
    179a:	7c 85       	ldd	r23, Y+12	; 0x0c
    179c:	8d 85       	ldd	r24, Y+13	; 0x0d
    179e:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e2       	ldi	r20, 0x20	; 32
    17a6:	51 e4       	ldi	r21, 0x41	; 65
    17a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9e 83       	std	Y+6, r25	; 0x06
    17be:	8d 83       	std	Y+5, r24	; 0x05
    17c0:	0f c0       	rjmp	.+30     	; 0x17e0 <LCD_enuInit+0x582>
    17c2:	88 ec       	ldi	r24, 0xC8	; 200
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	9c 83       	std	Y+4, r25	; 0x04
    17c8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	9c 81       	ldd	r25, Y+4	; 0x04
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <LCD_enuInit+0x570>
    17d2:	9c 83       	std	Y+4, r25	; 0x04
    17d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	9e 83       	std	Y+6, r25	; 0x06
    17de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e0:	8d 81       	ldd	r24, Y+5	; 0x05
    17e2:	9e 81       	ldd	r25, Y+6	; 0x06
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	69 f7       	brne	.-38     	; 0x17c2 <LCD_enuInit+0x564>
    17e8:	14 c0       	rjmp	.+40     	; 0x1812 <LCD_enuInit+0x5b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ea:	6f 81       	ldd	r22, Y+7	; 0x07
    17ec:	78 85       	ldd	r23, Y+8	; 0x08
    17ee:	89 85       	ldd	r24, Y+9	; 0x09
    17f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	9e 83       	std	Y+6, r25	; 0x06
    17fc:	8d 83       	std	Y+5, r24	; 0x05
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	9e 81       	ldd	r25, Y+6	; 0x06
    1802:	9a 83       	std	Y+2, r25	; 0x02
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	9a 81       	ldd	r25, Y+2	; 0x02
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <LCD_enuInit+0x5ac>
    180e:	9a 83       	std	Y+2, r25	; 0x02
    1810:	89 83       	std	Y+1, r24	; 0x01
  	_delay_ms(2);
  	LCD_enuSendCmnd(ENTRY_MOOD_SET);
    1812:	86 e0       	ldi	r24, 0x06	; 6
    1814:	0e 94 44 08 	call	0x1088	; 0x1088 <LCD_enuSendCmnd>
  	return STD_OK;
    1818:	80 e0       	ldi	r24, 0x00	; 0

   }
    181a:	c4 5b       	subi	r28, 0xB4	; 180
    181c:	df 4f       	sbci	r29, 0xFF	; 255
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	de bf       	out	0x3e, r29	; 62
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	cd bf       	out	0x3d, r28	; 61
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	1f 91       	pop	r17
    182e:	0f 91       	pop	r16
    1830:	08 95       	ret

00001832 <LCD_enuSendChar>:
/************************************************/

 ERROR LCD_enuSendChar(u8 Copy_u8Char)
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	69 97       	sbiw	r28, 0x19	; 25
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	89 8f       	std	Y+25, r24	; 0x19
#if    (LCD_u8_MODE == LCD_u8_MODE_8_BIT)
	/* RS = 1 */
       DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	41 e0       	ldi	r20, 0x01	; 1
    184e:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <DIO_u8SetPinValue>

    /* RW = 0 */
      DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	61 e0       	ldi	r22, 0x01	; 1
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <DIO_u8SetPinValue>
    /* Write char */
      DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	69 8d       	ldd	r22, Y+25	; 0x19
    1860:	0e 94 59 11 	call	0x22b2	; 0x22b2 <DIO_u8SetPortValue>

    /* E = 1 */
      DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	62 e0       	ldi	r22, 0x02	; 2
    1868:	41 e0       	ldi	r20, 0x01	; 1
    186a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <DIO_u8SetPinValue>
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	a0 e8       	ldi	r26, 0x80	; 128
    1874:	bf e3       	ldi	r27, 0x3F	; 63
    1876:	8d 8b       	std	Y+21, r24	; 0x15
    1878:	9e 8b       	std	Y+22, r25	; 0x16
    187a:	af 8b       	std	Y+23, r26	; 0x17
    187c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    187e:	6d 89       	ldd	r22, Y+21	; 0x15
    1880:	7e 89       	ldd	r23, Y+22	; 0x16
    1882:	8f 89       	ldd	r24, Y+23	; 0x17
    1884:	98 8d       	ldd	r25, Y+24	; 0x18
    1886:	2b ea       	ldi	r18, 0xAB	; 171
    1888:	3a ea       	ldi	r19, 0xAA	; 170
    188a:	4a e2       	ldi	r20, 0x2A	; 42
    188c:	50 e4       	ldi	r21, 0x40	; 64
    188e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	89 8b       	std	Y+17, r24	; 0x11
    1898:	9a 8b       	std	Y+18, r25	; 0x12
    189a:	ab 8b       	std	Y+19, r26	; 0x13
    189c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    189e:	69 89       	ldd	r22, Y+17	; 0x11
    18a0:	7a 89       	ldd	r23, Y+18	; 0x12
    18a2:	8b 89       	ldd	r24, Y+19	; 0x13
    18a4:	9c 89       	ldd	r25, Y+20	; 0x14
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e8       	ldi	r20, 0x80	; 128
    18ac:	5f e3       	ldi	r21, 0x3F	; 63
    18ae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18b2:	88 23       	and	r24, r24
    18b4:	1c f4       	brge	.+6      	; 0x18bc <LCD_enuSendChar+0x8a>
		__ticks = 1;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	88 8b       	std	Y+16, r24	; 0x10
    18ba:	91 c0       	rjmp	.+290    	; 0x19de <LCD_enuSendChar+0x1ac>
	else if (__tmp > 255)
    18bc:	69 89       	ldd	r22, Y+17	; 0x11
    18be:	7a 89       	ldd	r23, Y+18	; 0x12
    18c0:	8b 89       	ldd	r24, Y+19	; 0x13
    18c2:	9c 89       	ldd	r25, Y+20	; 0x14
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	4f e7       	ldi	r20, 0x7F	; 127
    18ca:	53 e4       	ldi	r21, 0x43	; 67
    18cc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18d0:	18 16       	cp	r1, r24
    18d2:	0c f0       	brlt	.+2      	; 0x18d6 <LCD_enuSendChar+0xa4>
    18d4:	7b c0       	rjmp	.+246    	; 0x19cc <LCD_enuSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    18d6:	6d 89       	ldd	r22, Y+21	; 0x15
    18d8:	7e 89       	ldd	r23, Y+22	; 0x16
    18da:	8f 89       	ldd	r24, Y+23	; 0x17
    18dc:	98 8d       	ldd	r25, Y+24	; 0x18
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	4a e7       	ldi	r20, 0x7A	; 122
    18e4:	54 e4       	ldi	r21, 0x44	; 68
    18e6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	8c 87       	std	Y+12, r24	; 0x0c
    18f0:	9d 87       	std	Y+13, r25	; 0x0d
    18f2:	ae 87       	std	Y+14, r26	; 0x0e
    18f4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    18f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    18fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    18fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	4a ef       	ldi	r20, 0xFA	; 250
    1904:	54 e4       	ldi	r21, 0x44	; 68
    1906:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	88 87       	std	Y+8, r24	; 0x08
    1910:	99 87       	std	Y+9, r25	; 0x09
    1912:	aa 87       	std	Y+10, r26	; 0x0a
    1914:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1916:	68 85       	ldd	r22, Y+8	; 0x08
    1918:	79 85       	ldd	r23, Y+9	; 0x09
    191a:	8a 85       	ldd	r24, Y+10	; 0x0a
    191c:	9b 85       	ldd	r25, Y+11	; 0x0b
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e8       	ldi	r20, 0x80	; 128
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    192a:	88 23       	and	r24, r24
    192c:	2c f4       	brge	.+10     	; 0x1938 <LCD_enuSendChar+0x106>
		__ticks = 1;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9f 83       	std	Y+7, r25	; 0x07
    1934:	8e 83       	std	Y+6, r24	; 0x06
    1936:	3f c0       	rjmp	.+126    	; 0x19b6 <LCD_enuSendChar+0x184>
	else if (__tmp > 65535)
    1938:	68 85       	ldd	r22, Y+8	; 0x08
    193a:	79 85       	ldd	r23, Y+9	; 0x09
    193c:	8a 85       	ldd	r24, Y+10	; 0x0a
    193e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	3f ef       	ldi	r19, 0xFF	; 255
    1944:	4f e7       	ldi	r20, 0x7F	; 127
    1946:	57 e4       	ldi	r21, 0x47	; 71
    1948:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    194c:	18 16       	cp	r1, r24
    194e:	4c f5       	brge	.+82     	; 0x19a2 <LCD_enuSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1950:	6c 85       	ldd	r22, Y+12	; 0x0c
    1952:	7d 85       	ldd	r23, Y+13	; 0x0d
    1954:	8e 85       	ldd	r24, Y+14	; 0x0e
    1956:	9f 85       	ldd	r25, Y+15	; 0x0f
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e2       	ldi	r20, 0x20	; 32
    195e:	51 e4       	ldi	r21, 0x41	; 65
    1960:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	bc 01       	movw	r22, r24
    196a:	cd 01       	movw	r24, r26
    196c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9f 83       	std	Y+7, r25	; 0x07
    1976:	8e 83       	std	Y+6, r24	; 0x06
    1978:	0f c0       	rjmp	.+30     	; 0x1998 <LCD_enuSendChar+0x166>
    197a:	88 ec       	ldi	r24, 0xC8	; 200
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9d 83       	std	Y+5, r25	; 0x05
    1980:	8c 83       	std	Y+4, r24	; 0x04
    1982:	8c 81       	ldd	r24, Y+4	; 0x04
    1984:	9d 81       	ldd	r25, Y+5	; 0x05
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <LCD_enuSendChar+0x154>
    198a:	9d 83       	std	Y+5, r25	; 0x05
    198c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198e:	8e 81       	ldd	r24, Y+6	; 0x06
    1990:	9f 81       	ldd	r25, Y+7	; 0x07
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	9f 83       	std	Y+7, r25	; 0x07
    1996:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1998:	8e 81       	ldd	r24, Y+6	; 0x06
    199a:	9f 81       	ldd	r25, Y+7	; 0x07
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	69 f7       	brne	.-38     	; 0x197a <LCD_enuSendChar+0x148>
    19a0:	24 c0       	rjmp	.+72     	; 0x19ea <LCD_enuSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a2:	68 85       	ldd	r22, Y+8	; 0x08
    19a4:	79 85       	ldd	r23, Y+9	; 0x09
    19a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    19a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    19aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	9f 83       	std	Y+7, r25	; 0x07
    19b4:	8e 83       	std	Y+6, r24	; 0x06
    19b6:	8e 81       	ldd	r24, Y+6	; 0x06
    19b8:	9f 81       	ldd	r25, Y+7	; 0x07
    19ba:	9b 83       	std	Y+3, r25	; 0x03
    19bc:	8a 83       	std	Y+2, r24	; 0x02
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	9b 81       	ldd	r25, Y+3	; 0x03
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <LCD_enuSendChar+0x190>
    19c6:	9b 83       	std	Y+3, r25	; 0x03
    19c8:	8a 83       	std	Y+2, r24	; 0x02
    19ca:	0f c0       	rjmp	.+30     	; 0x19ea <LCD_enuSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19cc:	69 89       	ldd	r22, Y+17	; 0x11
    19ce:	7a 89       	ldd	r23, Y+18	; 0x12
    19d0:	8b 89       	ldd	r24, Y+19	; 0x13
    19d2:	9c 89       	ldd	r25, Y+20	; 0x14
    19d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	88 8b       	std	Y+16, r24	; 0x10
    19de:	88 89       	ldd	r24, Y+16	; 0x10
    19e0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	8a 95       	dec	r24
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <LCD_enuSendChar+0x1b2>
    19e8:	89 83       	std	Y+1, r24	; 0x01
      _delay_us(1);

    /* E = 0 */
      DIO_u8SetPinValue (LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	62 e0       	ldi	r22, 0x02	; 2
    19ee:	40 e0       	ldi	r20, 0x00	; 0
    19f0:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <DIO_u8SetPinValue>


    return STD_OK;
    19f4:	80 e0       	ldi	r24, 0x00	; 0


#endif
    return STD_OK;

}
    19f6:	69 96       	adiw	r28, 0x19	; 25
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <LCD_enuSetAc>:
/***************************************************/
 ERROR LCD_enuSetAc(u8 Copy_u8LineNum,u8 Copy_u8Location)
 	 {
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <LCD_enuSetAc+0x6>
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <LCD_enuSetAc+0x8>
    1a10:	0f 92       	push	r0
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	6a 83       	std	Y+2, r22	; 0x02
	 if(Copy_u8Location<=39){
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	88 32       	cpi	r24, 0x28	; 40
    1a1e:	f8 f4       	brcc	.+62     	; 0x1a5e <LCD_enuSetAc+0x56>
	     switch (Copy_u8LineNum)
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	3d 83       	std	Y+5, r19	; 0x05
    1a28:	2c 83       	std	Y+4, r18	; 0x04
    1a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2e:	81 30       	cpi	r24, 0x01	; 1
    1a30:	91 05       	cpc	r25, r1
    1a32:	31 f0       	breq	.+12     	; 0x1a40 <LCD_enuSetAc+0x38>
    1a34:	2c 81       	ldd	r18, Y+4	; 0x04
    1a36:	3d 81       	ldd	r19, Y+5	; 0x05
    1a38:	22 30       	cpi	r18, 0x02	; 2
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	31 f0       	breq	.+12     	; 0x1a4a <LCD_enuSetAc+0x42>
    1a3e:	0a c0       	rjmp	.+20     	; 0x1a54 <LCD_enuSetAc+0x4c>
	     {
	     case 1 :LCD_enuSendCmnd(0x80 + Copy_u8Location); break;
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	80 58       	subi	r24, 0x80	; 128
    1a44:	0e 94 44 08 	call	0x1088	; 0x1088 <LCD_enuSendCmnd>
    1a48:	08 c0       	rjmp	.+16     	; 0x1a5a <LCD_enuSetAc+0x52>
	     case 2 :LCD_enuSendCmnd(0xC0 + Copy_u8Location); break;
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	80 54       	subi	r24, 0x40	; 64
    1a4e:	0e 94 44 08 	call	0x1088	; 0x1088 <LCD_enuSendCmnd>
    1a52:	03 c0       	rjmp	.+6      	; 0x1a5a <LCD_enuSetAc+0x52>
	     default:return STD_NOTOK;break;
    1a54:	31 e0       	ldi	r19, 0x01	; 1
    1a56:	3b 83       	std	Y+3, r19	; 0x03
    1a58:	04 c0       	rjmp	.+8      	; 0x1a62 <LCD_enuSetAc+0x5a>
	     }
	     }
	     else{
	         return STD_NOTOK;
	     }
	     return STD_OK;
    1a5a:	1b 82       	std	Y+3, r1	; 0x03
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <LCD_enuSetAc+0x5a>
	     case 2 :LCD_enuSendCmnd(0xC0 + Copy_u8Location); break;
	     default:return STD_NOTOK;break;
	     }
	     }
	     else{
	         return STD_NOTOK;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	8b 83       	std	Y+3, r24	; 0x03
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
	     }
	     return STD_OK;
	 }
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <LCD_enuSendString>:

/*******************************************************/
 ERROR LCD_enuSendString(u8 * Copy_pu8String)
 {
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <LCD_enuSendString+0x6>
    1a7a:	0f 92       	push	r0
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	9b 83       	std	Y+3, r25	; 0x03
    1a82:	8a 83       	std	Y+2, r24	; 0x02
    1a84:	0e c0       	rjmp	.+28     	; 0x1aa2 <LCD_enuSendString+0x2e>
     for(u8 i ; Copy_pu8String[i] != '\0' ; i++ ){
         LCD_enuSendChar(Copy_pu8String[i]);
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a90:	fc 01       	movw	r30, r24
    1a92:	e2 0f       	add	r30, r18
    1a94:	f3 1f       	adc	r31, r19
    1a96:	80 81       	ld	r24, Z
    1a98:	0e 94 19 0c 	call	0x1832	; 0x1832 <LCD_enuSendChar>
	 }

/*******************************************************/
 ERROR LCD_enuSendString(u8 * Copy_pu8String)
 {
     for(u8 i ; Copy_pu8String[i] != '\0' ; i++ ){
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	8f 5f       	subi	r24, 0xFF	; 255
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    1aac:	fc 01       	movw	r30, r24
    1aae:	e2 0f       	add	r30, r18
    1ab0:	f3 1f       	adc	r31, r19
    1ab2:	80 81       	ld	r24, Z
    1ab4:	88 23       	and	r24, r24
    1ab6:	39 f7       	brne	.-50     	; 0x1a86 <LCD_enuSendString+0x12>
         LCD_enuSendChar(Copy_pu8String[i]);
     }
     return  STD_OK;
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
 }
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <LCD_enuClear>:
 /*******************************************************/
 /*ERROR  LCD_enu_SendNum(u32 Copy_u32Num)*/
 ERROR LCD_enuClear(void){
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
	 LCD_enuSendCmnd(0x01);
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	0e 94 44 08 	call	0x1088	; 0x1088 <LCD_enuSendCmnd>
	 return  STD_OK;
    1ad4:	80 e0       	ldi	r24, 0x00	; 0

 }
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <LCD_enuCreateCustomChar>:
/*********************************************************/
 ERROR LCD_enuCreateCustomChar(u8 Copy_u8Location, u8 *Copy_pu8CharArray)
 {
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <LCD_enuCreateCustomChar+0x6>
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <LCD_enuCreateCustomChar+0x8>
    1ae4:	0f 92       	push	r0
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	8a 83       	std	Y+2, r24	; 0x02
    1aec:	7c 83       	std	Y+4, r23	; 0x04
    1aee:	6b 83       	std	Y+3, r22	; 0x03
     if (Copy_pu8CharArray != NULL && Copy_u8Location < 8)
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	9c 81       	ldd	r25, Y+4	; 0x04
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	21 f1       	breq	.+72     	; 0x1b40 <LCD_enuCreateCustomChar+0x64>
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	88 30       	cpi	r24, 0x08	; 8
    1afc:	08 f5       	brcc	.+66     	; 0x1b40 <LCD_enuCreateCustomChar+0x64>
     {
         LCD_enuSendCmnd(0X40 + (Copy_u8Location *8));
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	08 96       	adiw	r24, 0x08	; 8
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	0e 94 44 08 	call	0x1088	; 0x1088 <LCD_enuSendCmnd>
         for (u8 i = 0; i < 8; i++)
    1b16:	19 82       	std	Y+1, r1	; 0x01
    1b18:	0e c0       	rjmp	.+28     	; 0x1b36 <LCD_enuCreateCustomChar+0x5a>
         {
             LCD_enuSendChar(Copy_pu8CharArray[i]);
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	fc 01       	movw	r30, r24
    1b26:	e2 0f       	add	r30, r18
    1b28:	f3 1f       	adc	r31, r19
    1b2a:	80 81       	ld	r24, Z
    1b2c:	0e 94 19 0c 	call	0x1832	; 0x1832 <LCD_enuSendChar>
 ERROR LCD_enuCreateCustomChar(u8 Copy_u8Location, u8 *Copy_pu8CharArray)
 {
     if (Copy_pu8CharArray != NULL && Copy_u8Location < 8)
     {
         LCD_enuSendCmnd(0X40 + (Copy_u8Location *8));
         for (u8 i = 0; i < 8; i++)
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	8f 5f       	subi	r24, 0xFF	; 255
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	88 30       	cpi	r24, 0x08	; 8
    1b3a:	78 f3       	brcs	.-34     	; 0x1b1a <LCD_enuCreateCustomChar+0x3e>
         {
             LCD_enuSendChar(Copy_pu8CharArray[i]);
         }
        // LCD_enuSetAc(1,0);
         return STD_OK;
    1b3c:	1d 82       	std	Y+5, r1	; 0x05
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <LCD_enuCreateCustomChar+0x68>
     }
     else
         {
         return STD_NOTOK;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	8d 83       	std	Y+5, r24	; 0x05
    1b44:	8d 81       	ldd	r24, Y+5	; 0x05
         }
 }
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <DIO_u8SetPinDirection>:
	    DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
	                            DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);
}*/

u8 DIO_u8SetPinDirection (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	2e 97       	sbiw	r28, 0x0e	; 14
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
    1b6c:	6b 83       	std	Y+3, r22	; 0x03
    1b6e:	4c 83       	std	Y+4, r20	; 0x04
		u8 Local_u8_ErrorState = STD_TYPES_OK   ;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	89 83       	std	Y+1, r24	; 0x01
        /*check */
if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinDirection == DIO_u8_OUTPUT) ||( Copy_u8PinDirection == DIO_u8_INPUT))
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	84 30       	cpi	r24, 0x04	; 4
    1b78:	30 f4       	brcc	.+12     	; 0x1b86 <DIO_u8SetPinDirection+0x30>
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	88 30       	cpi	r24, 0x08	; 8
    1b7e:	18 f4       	brcc	.+6      	; 0x1b86 <DIO_u8SetPinDirection+0x30>
    1b80:	8c 81       	ldd	r24, Y+4	; 0x04
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	21 f0       	breq	.+8      	; 0x1b8e <DIO_u8SetPinDirection+0x38>
    1b86:	8c 81       	ldd	r24, Y+4	; 0x04
    1b88:	88 23       	and	r24, r24
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <DIO_u8SetPinDirection+0x38>
    1b8c:	01 c1       	rjmp	.+514    	; 0x1d90 <DIO_u8SetPinDirection+0x23a>
{
	switch (Copy_u8PortId){
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	3e 87       	std	Y+14, r19	; 0x0e
    1b96:	2d 87       	std	Y+13, r18	; 0x0d
    1b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9c:	81 30       	cpi	r24, 0x01	; 1
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <DIO_u8SetPinDirection+0x4e>
    1ba2:	4f c0       	rjmp	.+158    	; 0x1c42 <DIO_u8SetPinDirection+0xec>
    1ba4:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ba6:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ba8:	22 30       	cpi	r18, 0x02	; 2
    1baa:	31 05       	cpc	r19, r1
    1bac:	2c f4       	brge	.+10     	; 0x1bb8 <DIO_u8SetPinDirection+0x62>
    1bae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	71 f0       	breq	.+28     	; 0x1bd2 <DIO_u8SetPinDirection+0x7c>
    1bb6:	ed c0       	rjmp	.+474    	; 0x1d92 <DIO_u8SetPinDirection+0x23c>
    1bb8:	2d 85       	ldd	r18, Y+13	; 0x0d
    1bba:	3e 85       	ldd	r19, Y+14	; 0x0e
    1bbc:	22 30       	cpi	r18, 0x02	; 2
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <DIO_u8SetPinDirection+0x6e>
    1bc2:	77 c0       	rjmp	.+238    	; 0x1cb2 <DIO_u8SetPinDirection+0x15c>
    1bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc8:	83 30       	cpi	r24, 0x03	; 3
    1bca:	91 05       	cpc	r25, r1
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <DIO_u8SetPinDirection+0x7a>
    1bce:	a9 c0       	rjmp	.+338    	; 0x1d22 <DIO_u8SetPinDirection+0x1cc>
    1bd0:	e0 c0       	rjmp	.+448    	; 0x1d92 <DIO_u8SetPinDirection+0x23c>
		case DIO_u8_PORTA :
			switch (Copy_u8PinDirection ){
    1bd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	3c 87       	std	Y+12, r19	; 0x0c
    1bda:	2b 87       	std	Y+11, r18	; 0x0b
    1bdc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bde:	9c 85       	ldd	r25, Y+12	; 0x0c
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	d1 f0       	breq	.+52     	; 0x1c18 <DIO_u8SetPinDirection+0xc2>
    1be4:	2b 85       	ldd	r18, Y+11	; 0x0b
    1be6:	3c 85       	ldd	r19, Y+12	; 0x0c
    1be8:	21 30       	cpi	r18, 0x01	; 1
    1bea:	31 05       	cpc	r19, r1
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <DIO_u8SetPinDirection+0x9a>
    1bee:	d1 c0       	rjmp	.+418    	; 0x1d92 <DIO_u8SetPinDirection+0x23c>
			case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    1bf0:	aa e3       	ldi	r26, 0x3A	; 58
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	ea e3       	ldi	r30, 0x3A	; 58
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <DIO_u8SetPinDirection+0xb8>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <DIO_u8SetPinDirection+0xb4>
    1c12:	84 2b       	or	r24, r20
    1c14:	8c 93       	st	X, r24
    1c16:	bd c0       	rjmp	.+378    	; 0x1d92 <DIO_u8SetPinDirection+0x23c>
				case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRA_REG , Copy_u8PinId);break; } break ;
    1c18:	aa e3       	ldi	r26, 0x3A	; 58
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	ea e3       	ldi	r30, 0x3A	; 58
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <DIO_u8SetPinDirection+0xe0>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <DIO_u8SetPinDirection+0xdc>
    1c3a:	80 95       	com	r24
    1c3c:	84 23       	and	r24, r20
    1c3e:	8c 93       	st	X, r24
    1c40:	a8 c0       	rjmp	.+336    	; 0x1d92 <DIO_u8SetPinDirection+0x23c>

		case DIO_u8_PORTB :
		switch (Copy_u8PinDirection ){
    1c42:	8c 81       	ldd	r24, Y+4	; 0x04
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	3a 87       	std	Y+10, r19	; 0x0a
    1c4a:	29 87       	std	Y+9, r18	; 0x09
    1c4c:	89 85       	ldd	r24, Y+9	; 0x09
    1c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	d1 f0       	breq	.+52     	; 0x1c88 <DIO_u8SetPinDirection+0x132>
    1c54:	29 85       	ldd	r18, Y+9	; 0x09
    1c56:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c58:	21 30       	cpi	r18, 0x01	; 1
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	09 f0       	breq	.+2      	; 0x1c60 <DIO_u8SetPinDirection+0x10a>
    1c5e:	99 c0       	rjmp	.+306    	; 0x1d92 <DIO_u8SetPinDirection+0x23c>
			case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    1c60:	a7 e3       	ldi	r26, 0x37	; 55
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e7 e3       	ldi	r30, 0x37	; 55
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	48 2f       	mov	r20, r24
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	02 2e       	mov	r0, r18
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <DIO_u8SetPinDirection+0x128>
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	0a 94       	dec	r0
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <DIO_u8SetPinDirection+0x124>
    1c82:	84 2b       	or	r24, r20
    1c84:	8c 93       	st	X, r24
    1c86:	85 c0       	rjmp	.+266    	; 0x1d92 <DIO_u8SetPinDirection+0x23c>
			case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break; } break ;
    1c88:	a7 e3       	ldi	r26, 0x37	; 55
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e7 e3       	ldi	r30, 0x37	; 55
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	48 2f       	mov	r20, r24
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	02 2e       	mov	r0, r18
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <DIO_u8SetPinDirection+0x150>
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	0a 94       	dec	r0
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <DIO_u8SetPinDirection+0x14c>
    1caa:	80 95       	com	r24
    1cac:	84 23       	and	r24, r20
    1cae:	8c 93       	st	X, r24
    1cb0:	70 c0       	rjmp	.+224    	; 0x1d92 <DIO_u8SetPinDirection+0x23c>

		case DIO_u8_PORTC :
	   switch (Copy_u8PinDirection ){
    1cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	38 87       	std	Y+8, r19	; 0x08
    1cba:	2f 83       	std	Y+7, r18	; 0x07
    1cbc:	8f 81       	ldd	r24, Y+7	; 0x07
    1cbe:	98 85       	ldd	r25, Y+8	; 0x08
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	d1 f0       	breq	.+52     	; 0x1cf8 <DIO_u8SetPinDirection+0x1a2>
    1cc4:	2f 81       	ldd	r18, Y+7	; 0x07
    1cc6:	38 85       	ldd	r19, Y+8	; 0x08
    1cc8:	21 30       	cpi	r18, 0x01	; 1
    1cca:	31 05       	cpc	r19, r1
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <DIO_u8SetPinDirection+0x17a>
    1cce:	61 c0       	rjmp	.+194    	; 0x1d92 <DIO_u8SetPinDirection+0x23c>
	   	   case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    1cd0:	a4 e3       	ldi	r26, 0x34	; 52
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e4 e3       	ldi	r30, 0x34	; 52
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	48 2f       	mov	r20, r24
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	02 2e       	mov	r0, r18
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <DIO_u8SetPinDirection+0x198>
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	0a 94       	dec	r0
    1cf0:	e2 f7       	brpl	.-8      	; 0x1cea <DIO_u8SetPinDirection+0x194>
    1cf2:	84 2b       	or	r24, r20
    1cf4:	8c 93       	st	X, r24
    1cf6:	4d c0       	rjmp	.+154    	; 0x1d92 <DIO_u8SetPinDirection+0x23c>
	   	   case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break; } break ;
    1cf8:	a7 e3       	ldi	r26, 0x37	; 55
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e7 e3       	ldi	r30, 0x37	; 55
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	48 2f       	mov	r20, r24
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	02 2e       	mov	r0, r18
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <DIO_u8SetPinDirection+0x1c0>
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	0a 94       	dec	r0
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <DIO_u8SetPinDirection+0x1bc>
    1d1a:	80 95       	com	r24
    1d1c:	84 23       	and	r24, r20
    1d1e:	8c 93       	st	X, r24
    1d20:	38 c0       	rjmp	.+112    	; 0x1d92 <DIO_u8SetPinDirection+0x23c>

	   case DIO_u8_PORTD :
		   switch (Copy_u8PinDirection ){
    1d22:	8c 81       	ldd	r24, Y+4	; 0x04
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	3e 83       	std	Y+6, r19	; 0x06
    1d2a:	2d 83       	std	Y+5, r18	; 0x05
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	c9 f0       	breq	.+50     	; 0x1d66 <DIO_u8SetPinDirection+0x210>
    1d34:	2d 81       	ldd	r18, Y+5	; 0x05
    1d36:	3e 81       	ldd	r19, Y+6	; 0x06
    1d38:	21 30       	cpi	r18, 0x01	; 1
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	51 f5       	brne	.+84     	; 0x1d92 <DIO_u8SetPinDirection+0x23c>
		   	   	  case DIO_u8_OUTPUT :SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    1d3e:	a1 e3       	ldi	r26, 0x31	; 49
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e1 e3       	ldi	r30, 0x31	; 49
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	48 2f       	mov	r20, r24
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	02 2e       	mov	r0, r18
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <DIO_u8SetPinDirection+0x206>
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	0a 94       	dec	r0
    1d5e:	e2 f7       	brpl	.-8      	; 0x1d58 <DIO_u8SetPinDirection+0x202>
    1d60:	84 2b       	or	r24, r20
    1d62:	8c 93       	st	X, r24
    1d64:	16 c0       	rjmp	.+44     	; 0x1d92 <DIO_u8SetPinDirection+0x23c>
		   	   	  case DIO_u8_INPUT :CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break; } break ;
    1d66:	a1 e3       	ldi	r26, 0x31	; 49
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e1 e3       	ldi	r30, 0x31	; 49
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	48 2f       	mov	r20, r24
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	02 2e       	mov	r0, r18
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <DIO_u8SetPinDirection+0x22e>
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	0a 94       	dec	r0
    1d86:	e2 f7       	brpl	.-8      	; 0x1d80 <DIO_u8SetPinDirection+0x22a>
    1d88:	80 95       	com	r24
    1d8a:	84 23       	and	r24, r20
    1d8c:	8c 93       	st	X, r24
    1d8e:	01 c0       	rjmp	.+2      	; 0x1d92 <DIO_u8SetPinDirection+0x23c>

}

}
else { 
        Local_u8_ErrorState = STD_TYPES_NOTOK   ;
    1d90:	19 82       	std	Y+1, r1	; 0x01
}

        return Local_u8_ErrorState  ;
    1d92:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d94:	2e 96       	adiw	r28, 0x0e	; 14
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	cd bf       	out	0x3d, r28	; 61
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <DIO_u8SetPinValue>:
/***************************************************/

u8 DIO_u8SetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8PinValue ) 
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	2e 97       	sbiw	r28, 0x0e	; 14
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	cd bf       	out	0x3d, r28	; 61
    1dba:	8a 83       	std	Y+2, r24	; 0x02
    1dbc:	6b 83       	std	Y+3, r22	; 0x03
    1dbe:	4c 83       	std	Y+4, r20	; 0x04
u8 Local_u8Errorstate = STD_TYPES_OK ;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	89 83       	std	Y+1, r24	; 0x01
if (Copy_u8PinId <= DIO_u8_PIN7 ) {
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	88 30       	cpi	r24, 0x08	; 8
    1dc8:	08 f0       	brcs	.+2      	; 0x1dcc <DIO_u8SetPinValue+0x26>
    1dca:	08 c1       	rjmp	.+528    	; 0x1fdc <DIO_u8SetPinValue+0x236>
	switch  (Copy_u8PortId )
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	3e 87       	std	Y+14, r19	; 0x0e
    1dd4:	2d 87       	std	Y+13, r18	; 0x0d
    1dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	91 05       	cpc	r25, r1
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <DIO_u8SetPinValue+0x3c>
    1de0:	50 c0       	rjmp	.+160    	; 0x1e82 <DIO_u8SetPinValue+0xdc>
    1de2:	2d 85       	ldd	r18, Y+13	; 0x0d
    1de4:	3e 85       	ldd	r19, Y+14	; 0x0e
    1de6:	22 30       	cpi	r18, 0x02	; 2
    1de8:	31 05       	cpc	r19, r1
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <DIO_u8SetPinValue+0x50>
    1dec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	71 f0       	breq	.+28     	; 0x1e10 <DIO_u8SetPinValue+0x6a>
    1df4:	f1 c0       	rjmp	.+482    	; 0x1fd8 <DIO_u8SetPinValue+0x232>
    1df6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1df8:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <DIO_u8SetPinValue+0x5c>
    1e00:	79 c0       	rjmp	.+242    	; 0x1ef4 <DIO_u8SetPinValue+0x14e>
    1e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e06:	83 30       	cpi	r24, 0x03	; 3
    1e08:	91 05       	cpc	r25, r1
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <DIO_u8SetPinValue+0x68>
    1e0c:	ac c0       	rjmp	.+344    	; 0x1f66 <DIO_u8SetPinValue+0x1c0>
    1e0e:	e4 c0       	rjmp	.+456    	; 0x1fd8 <DIO_u8SetPinValue+0x232>
	{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue )
    1e10:	8c 81       	ldd	r24, Y+4	; 0x04
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	3c 87       	std	Y+12, r19	; 0x0c
    1e18:	2b 87       	std	Y+11, r18	; 0x0b
    1e1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	c9 f0       	breq	.+50     	; 0x1e54 <DIO_u8SetPinValue+0xae>
    1e22:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e24:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e26:	21 30       	cpi	r18, 0x01	; 1
    1e28:	31 05       	cpc	r19, r1
    1e2a:	49 f5       	brne	.+82     	; 0x1e7e <DIO_u8SetPinValue+0xd8>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG ,Copy_u8PinId );break ;
    1e2c:	ab e3       	ldi	r26, 0x3B	; 59
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	eb e3       	ldi	r30, 0x3B	; 59
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	48 2f       	mov	r20, r24
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	02 2e       	mov	r0, r18
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <DIO_u8SetPinValue+0xa4>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	0a 94       	dec	r0
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <DIO_u8SetPinValue+0xa0>
    1e4e:	84 2b       	or	r24, r20
    1e50:	8c 93       	st	X, r24
    1e52:	c5 c0       	rjmp	.+394    	; 0x1fde <DIO_u8SetPinValue+0x238>
				case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTA_REG ,Copy_u8PinId );break ;
    1e54:	ab e3       	ldi	r26, 0x3B	; 59
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	eb e3       	ldi	r30, 0x3B	; 59
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	48 2f       	mov	r20, r24
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	02 2e       	mov	r0, r18
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <DIO_u8SetPinValue+0xcc>
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	0a 94       	dec	r0
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <DIO_u8SetPinValue+0xc8>
    1e76:	80 95       	com	r24
    1e78:	84 23       	and	r24, r20
    1e7a:	8c 93       	st	X, r24
    1e7c:	b0 c0       	rjmp	.+352    	; 0x1fde <DIO_u8SetPinValue+0x238>
				default : Local_u8Errorstate = STD_TYPES_NOTOK;
    1e7e:	19 82       	std	Y+1, r1	; 0x01
    1e80:	ae c0       	rjmp	.+348    	; 0x1fde <DIO_u8SetPinValue+0x238>
				}
			break ;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue )
    1e82:	8c 81       	ldd	r24, Y+4	; 0x04
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	3a 87       	std	Y+10, r19	; 0x0a
    1e8a:	29 87       	std	Y+9, r18	; 0x09
    1e8c:	89 85       	ldd	r24, Y+9	; 0x09
    1e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	c9 f0       	breq	.+50     	; 0x1ec6 <DIO_u8SetPinValue+0x120>
    1e94:	29 85       	ldd	r18, Y+9	; 0x09
    1e96:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e98:	21 30       	cpi	r18, 0x01	; 1
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	49 f5       	brne	.+82     	; 0x1ef0 <DIO_u8SetPinValue+0x14a>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG ,Copy_u8PinId );break ;
    1e9e:	a8 e3       	ldi	r26, 0x38	; 56
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e8 e3       	ldi	r30, 0x38	; 56
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	48 2f       	mov	r20, r24
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	02 2e       	mov	r0, r18
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <DIO_u8SetPinValue+0x116>
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	0a 94       	dec	r0
    1ebe:	e2 f7       	brpl	.-8      	; 0x1eb8 <DIO_u8SetPinValue+0x112>
    1ec0:	84 2b       	or	r24, r20
    1ec2:	8c 93       	st	X, r24
    1ec4:	8c c0       	rjmp	.+280    	; 0x1fde <DIO_u8SetPinValue+0x238>
				case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTB_REG ,Copy_u8PinId );break ;
    1ec6:	a8 e3       	ldi	r26, 0x38	; 56
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e8 e3       	ldi	r30, 0x38	; 56
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	48 2f       	mov	r20, r24
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	02 2e       	mov	r0, r18
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <DIO_u8SetPinValue+0x13e>
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	0a 94       	dec	r0
    1ee6:	e2 f7       	brpl	.-8      	; 0x1ee0 <DIO_u8SetPinValue+0x13a>
    1ee8:	80 95       	com	r24
    1eea:	84 23       	and	r24, r20
    1eec:	8c 93       	st	X, r24
    1eee:	77 c0       	rjmp	.+238    	; 0x1fde <DIO_u8SetPinValue+0x238>
				default : Local_u8Errorstate = STD_TYPES_NOTOK;
    1ef0:	19 82       	std	Y+1, r1	; 0x01
    1ef2:	75 c0       	rjmp	.+234    	; 0x1fde <DIO_u8SetPinValue+0x238>
			}
			break ;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue )
    1ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	38 87       	std	Y+8, r19	; 0x08
    1efc:	2f 83       	std	Y+7, r18	; 0x07
    1efe:	8f 81       	ldd	r24, Y+7	; 0x07
    1f00:	98 85       	ldd	r25, Y+8	; 0x08
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	c9 f0       	breq	.+50     	; 0x1f38 <DIO_u8SetPinValue+0x192>
    1f06:	2f 81       	ldd	r18, Y+7	; 0x07
    1f08:	38 85       	ldd	r19, Y+8	; 0x08
    1f0a:	21 30       	cpi	r18, 0x01	; 1
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	49 f5       	brne	.+82     	; 0x1f62 <DIO_u8SetPinValue+0x1bc>
			{
			case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG ,Copy_u8PinId );break ;
    1f10:	a5 e3       	ldi	r26, 0x35	; 53
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e5 e3       	ldi	r30, 0x35	; 53
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	48 2f       	mov	r20, r24
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	02 2e       	mov	r0, r18
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <DIO_u8SetPinValue+0x188>
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	0a 94       	dec	r0
    1f30:	e2 f7       	brpl	.-8      	; 0x1f2a <DIO_u8SetPinValue+0x184>
    1f32:	84 2b       	or	r24, r20
    1f34:	8c 93       	st	X, r24
    1f36:	53 c0       	rjmp	.+166    	; 0x1fde <DIO_u8SetPinValue+0x238>
			case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTC_REG ,Copy_u8PinId );break ;
    1f38:	a5 e3       	ldi	r26, 0x35	; 53
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e5 e3       	ldi	r30, 0x35	; 53
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	48 2f       	mov	r20, r24
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	02 2e       	mov	r0, r18
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <DIO_u8SetPinValue+0x1b0>
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	0a 94       	dec	r0
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <DIO_u8SetPinValue+0x1ac>
    1f5a:	80 95       	com	r24
    1f5c:	84 23       	and	r24, r20
    1f5e:	8c 93       	st	X, r24
    1f60:	3e c0       	rjmp	.+124    	; 0x1fde <DIO_u8SetPinValue+0x238>
			default : Local_u8Errorstate = STD_TYPES_NOTOK;}
    1f62:	19 82       	std	Y+1, r1	; 0x01
    1f64:	3c c0       	rjmp	.+120    	; 0x1fde <DIO_u8SetPinValue+0x238>
			break ;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue )
    1f66:	8c 81       	ldd	r24, Y+4	; 0x04
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	3e 83       	std	Y+6, r19	; 0x06
    1f6e:	2d 83       	std	Y+5, r18	; 0x05
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	c9 f0       	breq	.+50     	; 0x1faa <DIO_u8SetPinValue+0x204>
    1f78:	2d 81       	ldd	r18, Y+5	; 0x05
    1f7a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f7c:	21 30       	cpi	r18, 0x01	; 1
    1f7e:	31 05       	cpc	r19, r1
    1f80:	49 f5       	brne	.+82     	; 0x1fd4 <DIO_u8SetPinValue+0x22e>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG ,Copy_u8PinId );break ;
    1f82:	a2 e3       	ldi	r26, 0x32	; 50
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e2 e3       	ldi	r30, 0x32	; 50
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	48 2f       	mov	r20, r24
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	02 2e       	mov	r0, r18
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <DIO_u8SetPinValue+0x1fa>
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	0a 94       	dec	r0
    1fa2:	e2 f7       	brpl	.-8      	; 0x1f9c <DIO_u8SetPinValue+0x1f6>
    1fa4:	84 2b       	or	r24, r20
    1fa6:	8c 93       	st	X, r24
    1fa8:	1a c0       	rjmp	.+52     	; 0x1fde <DIO_u8SetPinValue+0x238>
				case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTD_REG ,Copy_u8PinId );break ;
    1faa:	a2 e3       	ldi	r26, 0x32	; 50
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e2 e3       	ldi	r30, 0x32	; 50
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	48 2f       	mov	r20, r24
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	02 2e       	mov	r0, r18
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <DIO_u8SetPinValue+0x222>
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	0a 94       	dec	r0
    1fca:	e2 f7       	brpl	.-8      	; 0x1fc4 <DIO_u8SetPinValue+0x21e>
    1fcc:	80 95       	com	r24
    1fce:	84 23       	and	r24, r20
    1fd0:	8c 93       	st	X, r24
    1fd2:	05 c0       	rjmp	.+10     	; 0x1fde <DIO_u8SetPinValue+0x238>
				default : Local_u8Errorstate = STD_TYPES_NOTOK;}
    1fd4:	19 82       	std	Y+1, r1	; 0x01
    1fd6:	03 c0       	rjmp	.+6      	; 0x1fde <DIO_u8SetPinValue+0x238>
				break ;

		default :
			Local_u8Errorstate = STD_TYPES_NOTOK;
    1fd8:	19 82       	std	Y+1, r1	; 0x01
    1fda:	01 c0       	rjmp	.+2      	; 0x1fde <DIO_u8SetPinValue+0x238>
		}
        }
else {Local_u8Errorstate = STD_TYPES_NOTOK;
    1fdc:	19 82       	std	Y+1, r1	; 0x01
}
 return Local_u8Errorstate  ;      
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
   }
    1fe0:	2e 96       	adiw	r28, 0x0e	; 14
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <DIO_u8GetPinValue>:

/************************************************/

u8 DIO_u8GetPinValue (u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 *Copy_pu8ReturndPinValue ) 
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	28 97       	sbiw	r28, 0x08	; 8
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	de bf       	out	0x3e, r29	; 62
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	cd bf       	out	0x3d, r28	; 61
    2006:	8b 83       	std	Y+3, r24	; 0x03
    2008:	6c 83       	std	Y+4, r22	; 0x04
    200a:	5e 83       	std	Y+6, r21	; 0x06
    200c:	4d 83       	std	Y+5, r20	; 0x05
u8 Local_u8Errorstate = STD_TYPES_OK ;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	8a 83       	std	Y+2, r24	; 0x02
u8 Local_u8PinValue;
if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ( *Copy_pu8ReturndPinValue != NULL))
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	84 30       	cpi	r24, 0x04	; 4
    2016:	08 f0       	brcs	.+2      	; 0x201a <DIO_u8GetPinValue+0x28>
    2018:	a2 c0       	rjmp	.+324    	; 0x215e <DIO_u8GetPinValue+0x16c>
    201a:	8c 81       	ldd	r24, Y+4	; 0x04
    201c:	88 30       	cpi	r24, 0x08	; 8
    201e:	08 f0       	brcs	.+2      	; 0x2022 <DIO_u8GetPinValue+0x30>
    2020:	9e c0       	rjmp	.+316    	; 0x215e <DIO_u8GetPinValue+0x16c>
    2022:	ed 81       	ldd	r30, Y+5	; 0x05
    2024:	fe 81       	ldd	r31, Y+6	; 0x06
    2026:	80 81       	ld	r24, Z
    2028:	88 2f       	mov	r24, r24
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	09 f4       	brne	.+2      	; 0x2032 <DIO_u8GetPinValue+0x40>
    2030:	96 c0       	rjmp	.+300    	; 0x215e <DIO_u8GetPinValue+0x16c>
{
	switch (Copy_u8PortId)
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	38 87       	std	Y+8, r19	; 0x08
    203a:	2f 83       	std	Y+7, r18	; 0x07
    203c:	4f 81       	ldd	r20, Y+7	; 0x07
    203e:	58 85       	ldd	r21, Y+8	; 0x08
    2040:	41 30       	cpi	r20, 0x01	; 1
    2042:	51 05       	cpc	r21, r1
    2044:	a9 f1       	breq	.+106    	; 0x20b0 <DIO_u8GetPinValue+0xbe>
    2046:	8f 81       	ldd	r24, Y+7	; 0x07
    2048:	98 85       	ldd	r25, Y+8	; 0x08
    204a:	82 30       	cpi	r24, 0x02	; 2
    204c:	91 05       	cpc	r25, r1
    204e:	34 f4       	brge	.+12     	; 0x205c <DIO_u8GetPinValue+0x6a>
    2050:	2f 81       	ldd	r18, Y+7	; 0x07
    2052:	38 85       	ldd	r19, Y+8	; 0x08
    2054:	21 15       	cp	r18, r1
    2056:	31 05       	cpc	r19, r1
    2058:	71 f0       	breq	.+28     	; 0x2076 <DIO_u8GetPinValue+0x84>
    205a:	82 c0       	rjmp	.+260    	; 0x2160 <DIO_u8GetPinValue+0x16e>
    205c:	4f 81       	ldd	r20, Y+7	; 0x07
    205e:	58 85       	ldd	r21, Y+8	; 0x08
    2060:	42 30       	cpi	r20, 0x02	; 2
    2062:	51 05       	cpc	r21, r1
    2064:	09 f4       	brne	.+2      	; 0x2068 <DIO_u8GetPinValue+0x76>
    2066:	41 c0       	rjmp	.+130    	; 0x20ea <DIO_u8GetPinValue+0xf8>
    2068:	8f 81       	ldd	r24, Y+7	; 0x07
    206a:	98 85       	ldd	r25, Y+8	; 0x08
    206c:	83 30       	cpi	r24, 0x03	; 3
    206e:	91 05       	cpc	r25, r1
    2070:	09 f4       	brne	.+2      	; 0x2074 <DIO_u8GetPinValue+0x82>
    2072:	58 c0       	rjmp	.+176    	; 0x2124 <DIO_u8GetPinValue+0x132>
    2074:	75 c0       	rjmp	.+234    	; 0x2160 <DIO_u8GetPinValue+0x16e>
	{
		case DIO_u8_PORTA:Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId );
    2076:	e9 e3       	ldi	r30, 0x39	; 57
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	8c 81       	ldd	r24, Y+4	; 0x04
    2082:	88 2f       	mov	r24, r24
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	a9 01       	movw	r20, r18
    2088:	02 c0       	rjmp	.+4      	; 0x208e <DIO_u8GetPinValue+0x9c>
    208a:	55 95       	asr	r21
    208c:	47 95       	ror	r20
    208e:	8a 95       	dec	r24
    2090:	e2 f7       	brpl	.-8      	; 0x208a <DIO_u8GetPinValue+0x98>
    2092:	ca 01       	movw	r24, r20
    2094:	81 70       	andi	r24, 0x01	; 1
    2096:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == STD_TYPES_NOTOK )
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	88 23       	and	r24, r24
    209c:	21 f4       	brne	.+8      	; 0x20a6 <DIO_u8GetPinValue+0xb4>
			{
				*Copy_pu8ReturndPinValue = DIO_u8_LOW;}
    209e:	ed 81       	ldd	r30, Y+5	; 0x05
    20a0:	fe 81       	ldd	r31, Y+6	; 0x06
    20a2:	10 82       	st	Z, r1
    20a4:	5d c0       	rjmp	.+186    	; 0x2160 <DIO_u8GetPinValue+0x16e>
			else{*Copy_pu8ReturndPinValue = DIO_u8_HIGH;
    20a6:	ed 81       	ldd	r30, Y+5	; 0x05
    20a8:	fe 81       	ldd	r31, Y+6	; 0x06
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	80 83       	st	Z, r24
    20ae:	58 c0       	rjmp	.+176    	; 0x2160 <DIO_u8GetPinValue+0x16e>
			}break ;

	    case DIO_u8_PORTB:Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG , Copy_u8PinId);
    20b0:	e6 e3       	ldi	r30, 0x36	; 54
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	a9 01       	movw	r20, r18
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <DIO_u8GetPinValue+0xd6>
    20c4:	55 95       	asr	r21
    20c6:	47 95       	ror	r20
    20c8:	8a 95       	dec	r24
    20ca:	e2 f7       	brpl	.-8      	; 0x20c4 <DIO_u8GetPinValue+0xd2>
    20cc:	ca 01       	movw	r24, r20
    20ce:	81 70       	andi	r24, 0x01	; 1
    20d0:	89 83       	std	Y+1, r24	; 0x01
	    	if (Local_u8PinValue == STD_TYPES_NOTOK )
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	88 23       	and	r24, r24
    20d6:	21 f4       	brne	.+8      	; 0x20e0 <DIO_u8GetPinValue+0xee>
	    	{
	    		*Copy_pu8ReturndPinValue = DIO_u8_LOW;}
    20d8:	ed 81       	ldd	r30, Y+5	; 0x05
    20da:	fe 81       	ldd	r31, Y+6	; 0x06
    20dc:	10 82       	st	Z, r1
    20de:	40 c0       	rjmp	.+128    	; 0x2160 <DIO_u8GetPinValue+0x16e>
	    	else{*Copy_pu8ReturndPinValue = DIO_u8_HIGH;
    20e0:	ed 81       	ldd	r30, Y+5	; 0x05
    20e2:	fe 81       	ldd	r31, Y+6	; 0x06
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	80 83       	st	Z, r24
    20e8:	3b c0       	rjmp	.+118    	; 0x2160 <DIO_u8GetPinValue+0x16e>
	    	}break;

	    case DIO_u8_PORTC:Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    20ea:	e3 e3       	ldi	r30, 0x33	; 51
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	8c 81       	ldd	r24, Y+4	; 0x04
    20f6:	88 2f       	mov	r24, r24
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	a9 01       	movw	r20, r18
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <DIO_u8GetPinValue+0x110>
    20fe:	55 95       	asr	r21
    2100:	47 95       	ror	r20
    2102:	8a 95       	dec	r24
    2104:	e2 f7       	brpl	.-8      	; 0x20fe <DIO_u8GetPinValue+0x10c>
    2106:	ca 01       	movw	r24, r20
    2108:	81 70       	andi	r24, 0x01	; 1
    210a:	89 83       	std	Y+1, r24	; 0x01
	    	if (Local_u8PinValue == STD_TYPES_NOTOK )
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	88 23       	and	r24, r24
    2110:	21 f4       	brne	.+8      	; 0x211a <DIO_u8GetPinValue+0x128>
	    	{
	    		*Copy_pu8ReturndPinValue = DIO_u8_LOW;}
    2112:	ed 81       	ldd	r30, Y+5	; 0x05
    2114:	fe 81       	ldd	r31, Y+6	; 0x06
    2116:	10 82       	st	Z, r1
    2118:	23 c0       	rjmp	.+70     	; 0x2160 <DIO_u8GetPinValue+0x16e>
	    	else{*Copy_pu8ReturndPinValue = DIO_u8_HIGH;
    211a:	ed 81       	ldd	r30, Y+5	; 0x05
    211c:	fe 81       	ldd	r31, Y+6	; 0x06
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	80 83       	st	Z, r24
    2122:	1e c0       	rjmp	.+60     	; 0x2160 <DIO_u8GetPinValue+0x16e>
	    	}break;

	    case DIO_u8_PORTD:Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    2124:	e0 e3       	ldi	r30, 0x30	; 48
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	8c 81       	ldd	r24, Y+4	; 0x04
    2130:	88 2f       	mov	r24, r24
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	a9 01       	movw	r20, r18
    2136:	02 c0       	rjmp	.+4      	; 0x213c <DIO_u8GetPinValue+0x14a>
    2138:	55 95       	asr	r21
    213a:	47 95       	ror	r20
    213c:	8a 95       	dec	r24
    213e:	e2 f7       	brpl	.-8      	; 0x2138 <DIO_u8GetPinValue+0x146>
    2140:	ca 01       	movw	r24, r20
    2142:	81 70       	andi	r24, 0x01	; 1
    2144:	89 83       	std	Y+1, r24	; 0x01
	    	if (Local_u8PinValue == STD_TYPES_NOTOK )
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	88 23       	and	r24, r24
    214a:	21 f4       	brne	.+8      	; 0x2154 <DIO_u8GetPinValue+0x162>
	    	{
	    		*Copy_pu8ReturndPinValue = DIO_u8_LOW;}
    214c:	ed 81       	ldd	r30, Y+5	; 0x05
    214e:	fe 81       	ldd	r31, Y+6	; 0x06
    2150:	10 82       	st	Z, r1
    2152:	06 c0       	rjmp	.+12     	; 0x2160 <DIO_u8GetPinValue+0x16e>
	    	else{*Copy_pu8ReturndPinValue = DIO_u8_HIGH;
    2154:	ed 81       	ldd	r30, Y+5	; 0x05
    2156:	fe 81       	ldd	r31, Y+6	; 0x06
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	80 83       	st	Z, r24
    215c:	01 c0       	rjmp	.+2      	; 0x2160 <DIO_u8GetPinValue+0x16e>
	    	}break;
  }
}
else {
Local_u8Errorstate = STD_TYPES_NOTOK;
    215e:	1a 82       	std	Y+2, r1	; 0x02
}
return Local_u8Errorstate  ;      
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2162:	28 96       	adiw	r28, 0x08	; 8
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret

00002174 <DIO_u8SetPortDirection>:
/******************************************************/ 

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId ,u8 Copy_u8PortDirection )
{
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	2d 97       	sbiw	r28, 0x0d	; 13
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	f8 94       	cli
    2182:	de bf       	out	0x3e, r29	; 62
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	cd bf       	out	0x3d, r28	; 61
    2188:	8a 83       	std	Y+2, r24	; 0x02
    218a:	6b 83       	std	Y+3, r22	; 0x03
u8 Local_u8Errorstate = STD_TYPES_OK ;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	89 83       	std	Y+1, r24	; 0x01
if ((Copy_u8PortDirection == DIO_u8_OUTPUT) ||( Copy_u8PortDirection == DIO_u8_INPUT))
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	81 30       	cpi	r24, 0x01	; 1
    2194:	21 f0       	breq	.+8      	; 0x219e <DIO_u8SetPortDirection+0x2a>
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	88 23       	and	r24, r24
    219a:	09 f0       	breq	.+2      	; 0x219e <DIO_u8SetPortDirection+0x2a>
    219c:	7f c0       	rjmp	.+254    	; 0x229c <DIO_u8SetPortDirection+0x128>
{
	switch (Copy_u8PortId){
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	3d 87       	std	Y+13, r19	; 0x0d
    21a6:	2c 87       	std	Y+12, r18	; 0x0c
    21a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    21aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	91 05       	cpc	r25, r1
    21b0:	71 f1       	breq	.+92     	; 0x220e <DIO_u8SetPortDirection+0x9a>
    21b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    21b4:	3d 85       	ldd	r19, Y+13	; 0x0d
    21b6:	22 30       	cpi	r18, 0x02	; 2
    21b8:	31 05       	cpc	r19, r1
    21ba:	2c f4       	brge	.+10     	; 0x21c6 <DIO_u8SetPortDirection+0x52>
    21bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    21be:	9d 85       	ldd	r25, Y+13	; 0x0d
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	69 f0       	breq	.+26     	; 0x21de <DIO_u8SetPortDirection+0x6a>
    21c4:	69 c0       	rjmp	.+210    	; 0x2298 <DIO_u8SetPortDirection+0x124>
    21c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    21c8:	3d 85       	ldd	r19, Y+13	; 0x0d
    21ca:	22 30       	cpi	r18, 0x02	; 2
    21cc:	31 05       	cpc	r19, r1
    21ce:	b1 f1       	breq	.+108    	; 0x223c <DIO_u8SetPortDirection+0xc8>
    21d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    21d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    21d4:	83 30       	cpi	r24, 0x03	; 3
    21d6:	91 05       	cpc	r25, r1
    21d8:	09 f4       	brne	.+2      	; 0x21dc <DIO_u8SetPortDirection+0x68>
    21da:	47 c0       	rjmp	.+142    	; 0x226a <DIO_u8SetPortDirection+0xf6>
    21dc:	5d c0       	rjmp	.+186    	; 0x2298 <DIO_u8SetPortDirection+0x124>
		case DIO_u8_PORTA :
			switch (Copy_u8PortDirection) {
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	3b 87       	std	Y+11, r19	; 0x0b
    21e6:	2a 87       	std	Y+10, r18	; 0x0a
    21e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    21ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	59 f0       	breq	.+22     	; 0x2206 <DIO_u8SetPortDirection+0x92>
    21f0:	2a 85       	ldd	r18, Y+10	; 0x0a
    21f2:	3b 85       	ldd	r19, Y+11	; 0x0b
    21f4:	21 30       	cpi	r18, 0x01	; 1
    21f6:	31 05       	cpc	r19, r1
    21f8:	09 f0       	breq	.+2      	; 0x21fc <DIO_u8SetPortDirection+0x88>
    21fa:	51 c0       	rjmp	.+162    	; 0x229e <DIO_u8SetPortDirection+0x12a>
				case DIO_u8_OUTPUT :DIO_u8_DDRA_REG = 0xff;break;
    21fc:	ea e3       	ldi	r30, 0x3A	; 58
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	8f ef       	ldi	r24, 0xFF	; 255
    2202:	80 83       	st	Z, r24
    2204:	4c c0       	rjmp	.+152    	; 0x229e <DIO_u8SetPortDirection+0x12a>
				case DIO_u8_INPUT :DIO_u8_DDRA_REG = 0x00;break ;
    2206:	ea e3       	ldi	r30, 0x3A	; 58
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	10 82       	st	Z, r1
    220c:	48 c0       	rjmp	.+144    	; 0x229e <DIO_u8SetPortDirection+0x12a>
				}break ;

		case DIO_u8_PORTB :
			switch (Copy_u8PortDirection ){
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	39 87       	std	Y+9, r19	; 0x09
    2216:	28 87       	std	Y+8, r18	; 0x08
    2218:	88 85       	ldd	r24, Y+8	; 0x08
    221a:	99 85       	ldd	r25, Y+9	; 0x09
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	51 f0       	breq	.+20     	; 0x2234 <DIO_u8SetPortDirection+0xc0>
    2220:	28 85       	ldd	r18, Y+8	; 0x08
    2222:	39 85       	ldd	r19, Y+9	; 0x09
    2224:	21 30       	cpi	r18, 0x01	; 1
    2226:	31 05       	cpc	r19, r1
    2228:	d1 f5       	brne	.+116    	; 0x229e <DIO_u8SetPortDirection+0x12a>
				case DIO_u8_OUTPUT :DIO_u8_DDRB_REG = 0xff;break;
    222a:	e7 e3       	ldi	r30, 0x37	; 55
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	8f ef       	ldi	r24, 0xFF	; 255
    2230:	80 83       	st	Z, r24
    2232:	35 c0       	rjmp	.+106    	; 0x229e <DIO_u8SetPortDirection+0x12a>
				case DIO_u8_INPUT :DIO_u8_DDRB_REG = 0x00;break ;
    2234:	e7 e3       	ldi	r30, 0x37	; 55
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	10 82       	st	Z, r1
    223a:	31 c0       	rjmp	.+98     	; 0x229e <DIO_u8SetPortDirection+0x12a>
				}break ;

	   case DIO_u8_PORTC :
		   switch (Copy_u8PortDirection ){
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	3f 83       	std	Y+7, r19	; 0x07
    2244:	2e 83       	std	Y+6, r18	; 0x06
    2246:	8e 81       	ldd	r24, Y+6	; 0x06
    2248:	9f 81       	ldd	r25, Y+7	; 0x07
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	51 f0       	breq	.+20     	; 0x2262 <DIO_u8SetPortDirection+0xee>
    224e:	2e 81       	ldd	r18, Y+6	; 0x06
    2250:	3f 81       	ldd	r19, Y+7	; 0x07
    2252:	21 30       	cpi	r18, 0x01	; 1
    2254:	31 05       	cpc	r19, r1
    2256:	19 f5       	brne	.+70     	; 0x229e <DIO_u8SetPortDirection+0x12a>
		   case DIO_u8_OUTPUT :DIO_u8_DDRC_REG = 0xff;break;
    2258:	e4 e3       	ldi	r30, 0x34	; 52
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	8f ef       	ldi	r24, 0xFF	; 255
    225e:	80 83       	st	Z, r24
    2260:	1e c0       	rjmp	.+60     	; 0x229e <DIO_u8SetPortDirection+0x12a>
		   case DIO_u8_INPUT :DIO_u8_DDRC_REG = 0x00;break ;
    2262:	e4 e3       	ldi	r30, 0x34	; 52
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	10 82       	st	Z, r1
    2268:	1a c0       	rjmp	.+52     	; 0x229e <DIO_u8SetPortDirection+0x12a>
		   }break ;

	  case DIO_u8_PORTD :
		  switch (Copy_u8PortDirection ){
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	3d 83       	std	Y+5, r19	; 0x05
    2272:	2c 83       	std	Y+4, r18	; 0x04
    2274:	8c 81       	ldd	r24, Y+4	; 0x04
    2276:	9d 81       	ldd	r25, Y+5	; 0x05
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	51 f0       	breq	.+20     	; 0x2290 <DIO_u8SetPortDirection+0x11c>
    227c:	2c 81       	ldd	r18, Y+4	; 0x04
    227e:	3d 81       	ldd	r19, Y+5	; 0x05
    2280:	21 30       	cpi	r18, 0x01	; 1
    2282:	31 05       	cpc	r19, r1
    2284:	61 f4       	brne	.+24     	; 0x229e <DIO_u8SetPortDirection+0x12a>
		  case DIO_u8_OUTPUT :DIO_u8_DDRD_REG = 0xff;break;
    2286:	e1 e3       	ldi	r30, 0x31	; 49
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	8f ef       	ldi	r24, 0xFF	; 255
    228c:	80 83       	st	Z, r24
    228e:	07 c0       	rjmp	.+14     	; 0x229e <DIO_u8SetPortDirection+0x12a>
		  case DIO_u8_INPUT :DIO_u8_DDRD_REG = 0x00;break ;
    2290:	e1 e3       	ldi	r30, 0x31	; 49
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	10 82       	st	Z, r1
    2296:	03 c0       	rjmp	.+6      	; 0x229e <DIO_u8SetPortDirection+0x12a>
		  }break ;

     default :Local_u8Errorstate = STD_TYPES_NOTOK;
    2298:	19 82       	std	Y+1, r1	; 0x01
    229a:	01 c0       	rjmp	.+2      	; 0x229e <DIO_u8SetPortDirection+0x12a>
}
}
else {
Local_u8Errorstate = STD_TYPES_NOTOK;
    229c:	19 82       	std	Y+1, r1	; 0x01
} 
return Local_u8Errorstate  ;      
    229e:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a0:	2d 96       	adiw	r28, 0x0d	; 13
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	08 95       	ret

000022b2 <DIO_u8SetPortValue>:
/********************************************************/


u8 DIO_u8SetPortValue (u8 Copy_u8PortId ,u8 Copy_u8PortValue )
{
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <DIO_u8SetPortValue+0x6>
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <DIO_u8SetPortValue+0x8>
    22ba:	0f 92       	push	r0
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	8a 83       	std	Y+2, r24	; 0x02
    22c2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Errorstate = STD_TYPES_OK ;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	3d 83       	std	Y+5, r19	; 0x05
    22d0:	2c 83       	std	Y+4, r18	; 0x04
    22d2:	8c 81       	ldd	r24, Y+4	; 0x04
    22d4:	9d 81       	ldd	r25, Y+5	; 0x05
    22d6:	81 30       	cpi	r24, 0x01	; 1
    22d8:	91 05       	cpc	r25, r1
    22da:	d1 f0       	breq	.+52     	; 0x2310 <DIO_u8SetPortValue+0x5e>
    22dc:	2c 81       	ldd	r18, Y+4	; 0x04
    22de:	3d 81       	ldd	r19, Y+5	; 0x05
    22e0:	22 30       	cpi	r18, 0x02	; 2
    22e2:	31 05       	cpc	r19, r1
    22e4:	2c f4       	brge	.+10     	; 0x22f0 <DIO_u8SetPortValue+0x3e>
    22e6:	8c 81       	ldd	r24, Y+4	; 0x04
    22e8:	9d 81       	ldd	r25, Y+5	; 0x05
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	61 f0       	breq	.+24     	; 0x2306 <DIO_u8SetPortValue+0x54>
    22ee:	1f c0       	rjmp	.+62     	; 0x232e <DIO_u8SetPortValue+0x7c>
    22f0:	2c 81       	ldd	r18, Y+4	; 0x04
    22f2:	3d 81       	ldd	r19, Y+5	; 0x05
    22f4:	22 30       	cpi	r18, 0x02	; 2
    22f6:	31 05       	cpc	r19, r1
    22f8:	81 f0       	breq	.+32     	; 0x231a <DIO_u8SetPortValue+0x68>
    22fa:	8c 81       	ldd	r24, Y+4	; 0x04
    22fc:	9d 81       	ldd	r25, Y+5	; 0x05
    22fe:	83 30       	cpi	r24, 0x03	; 3
    2300:	91 05       	cpc	r25, r1
    2302:	81 f0       	breq	.+32     	; 0x2324 <DIO_u8SetPortValue+0x72>
    2304:	14 c0       	rjmp	.+40     	; 0x232e <DIO_u8SetPortValue+0x7c>
{
	case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8PortValue ; break ;
    2306:	eb e3       	ldi	r30, 0x3B	; 59
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	80 83       	st	Z, r24
    230e:	10 c0       	rjmp	.+32     	; 0x2330 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8PortValue ; break ;
    2310:	e8 e3       	ldi	r30, 0x38	; 56
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	80 83       	st	Z, r24
    2318:	0b c0       	rjmp	.+22     	; 0x2330 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTC:DIO_u8_PORTC_REG =Copy_u8PortValue ; break ;
    231a:	e5 e3       	ldi	r30, 0x35	; 53
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	80 83       	st	Z, r24
    2322:	06 c0       	rjmp	.+12     	; 0x2330 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTD:DIO_u8_PORTD_REG =Copy_u8PortValue ; break ;
    2324:	e2 e3       	ldi	r30, 0x32	; 50
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	80 83       	st	Z, r24
    232c:	01 c0       	rjmp	.+2      	; 0x2330 <DIO_u8SetPortValue+0x7e>
	default :Local_u8Errorstate = STD_TYPES_NOTOK;
    232e:	19 82       	std	Y+1, r1	; 0x01
}
return Local_u8Errorstate  ;
    2330:	89 81       	ldd	r24, Y+1	; 0x01
}
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <DIO_u8GetPortValue>:
/*********************************************/

u8 DIO_u8GetPortValue (u8 Copy_u8PortId ,u8 *Copy_pu8ReturndPortValue )
{
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	00 d0       	rcall	.+0      	; 0x2348 <DIO_u8GetPortValue+0x6>
    2348:	00 d0       	rcall	.+0      	; 0x234a <DIO_u8GetPortValue+0x8>
    234a:	00 d0       	rcall	.+0      	; 0x234c <DIO_u8GetPortValue+0xa>
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	8a 83       	std	Y+2, r24	; 0x02
    2352:	7c 83       	std	Y+4, r23	; 0x04
    2354:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Errorstate = STD_TYPES_OK ;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pu8ReturndPortValue!= NULL)
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	9c 81       	ldd	r25, Y+4	; 0x04
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	e9 f1       	breq	.+122    	; 0x23dc <DIO_u8GetPortValue+0x9a>
{
	switch (Copy_u8PortId)
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	3e 83       	std	Y+6, r19	; 0x06
    236a:	2d 83       	std	Y+5, r18	; 0x05
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	9e 81       	ldd	r25, Y+6	; 0x06
    2370:	81 30       	cpi	r24, 0x01	; 1
    2372:	91 05       	cpc	r25, r1
    2374:	e1 f0       	breq	.+56     	; 0x23ae <DIO_u8GetPortValue+0x6c>
    2376:	2d 81       	ldd	r18, Y+5	; 0x05
    2378:	3e 81       	ldd	r19, Y+6	; 0x06
    237a:	22 30       	cpi	r18, 0x02	; 2
    237c:	31 05       	cpc	r19, r1
    237e:	2c f4       	brge	.+10     	; 0x238a <DIO_u8GetPortValue+0x48>
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	61 f0       	breq	.+24     	; 0x23a0 <DIO_u8GetPortValue+0x5e>
    2388:	27 c0       	rjmp	.+78     	; 0x23d8 <DIO_u8GetPortValue+0x96>
    238a:	2d 81       	ldd	r18, Y+5	; 0x05
    238c:	3e 81       	ldd	r19, Y+6	; 0x06
    238e:	22 30       	cpi	r18, 0x02	; 2
    2390:	31 05       	cpc	r19, r1
    2392:	a1 f0       	breq	.+40     	; 0x23bc <DIO_u8GetPortValue+0x7a>
    2394:	8d 81       	ldd	r24, Y+5	; 0x05
    2396:	9e 81       	ldd	r25, Y+6	; 0x06
    2398:	83 30       	cpi	r24, 0x03	; 3
    239a:	91 05       	cpc	r25, r1
    239c:	b1 f0       	breq	.+44     	; 0x23ca <DIO_u8GetPortValue+0x88>
    239e:	1c c0       	rjmp	.+56     	; 0x23d8 <DIO_u8GetPortValue+0x96>
	{
		case DIO_u8_PORTA:*Copy_pu8ReturndPortValue = DIO_u8_PORTA_REG  ; break ;
    23a0:	eb e3       	ldi	r30, 0x3B	; 59
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	eb 81       	ldd	r30, Y+3	; 0x03
    23a8:	fc 81       	ldd	r31, Y+4	; 0x04
    23aa:	80 83       	st	Z, r24
    23ac:	18 c0       	rjmp	.+48     	; 0x23de <DIO_u8GetPortValue+0x9c>
		case DIO_u8_PORTB:*Copy_pu8ReturndPortValue = DIO_u8_PORTB_REG  ; break ;
    23ae:	e8 e3       	ldi	r30, 0x38	; 56
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	eb 81       	ldd	r30, Y+3	; 0x03
    23b6:	fc 81       	ldd	r31, Y+4	; 0x04
    23b8:	80 83       	st	Z, r24
    23ba:	11 c0       	rjmp	.+34     	; 0x23de <DIO_u8GetPortValue+0x9c>
		case DIO_u8_PORTC:*Copy_pu8ReturndPortValue = DIO_u8_PORTC_REG  ; break ;
    23bc:	e5 e3       	ldi	r30, 0x35	; 53
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	eb 81       	ldd	r30, Y+3	; 0x03
    23c4:	fc 81       	ldd	r31, Y+4	; 0x04
    23c6:	80 83       	st	Z, r24
    23c8:	0a c0       	rjmp	.+20     	; 0x23de <DIO_u8GetPortValue+0x9c>
		case DIO_u8_PORTD:*Copy_pu8ReturndPortValue = DIO_u8_PORTD_REG  ; break ;
    23ca:	e2 e3       	ldi	r30, 0x32	; 50
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	eb 81       	ldd	r30, Y+3	; 0x03
    23d2:	fc 81       	ldd	r31, Y+4	; 0x04
    23d4:	80 83       	st	Z, r24
    23d6:	03 c0       	rjmp	.+6      	; 0x23de <DIO_u8GetPortValue+0x9c>
		default :Local_u8Errorstate = STD_TYPES_NOTOK;
    23d8:	19 82       	std	Y+1, r1	; 0x01
    23da:	01 c0       	rjmp	.+2      	; 0x23de <DIO_u8GetPortValue+0x9c>
}
}
else {
Local_u8Errorstate = STD_TYPES_NOTOK;
    23dc:	19 82       	std	Y+1, r1	; 0x01
}
return Local_u8Errorstate  ;
    23de:	89 81       	ldd	r24, Y+1	; 0x01
} 
    23e0:	26 96       	adiw	r28, 0x06	; 6
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	cd bf       	out	0x3d, r28	; 61
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <__prologue_saves__>:
    23f2:	2f 92       	push	r2
    23f4:	3f 92       	push	r3
    23f6:	4f 92       	push	r4
    23f8:	5f 92       	push	r5
    23fa:	6f 92       	push	r6
    23fc:	7f 92       	push	r7
    23fe:	8f 92       	push	r8
    2400:	9f 92       	push	r9
    2402:	af 92       	push	r10
    2404:	bf 92       	push	r11
    2406:	cf 92       	push	r12
    2408:	df 92       	push	r13
    240a:	ef 92       	push	r14
    240c:	ff 92       	push	r15
    240e:	0f 93       	push	r16
    2410:	1f 93       	push	r17
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	ca 1b       	sub	r28, r26
    241c:	db 0b       	sbc	r29, r27
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	de bf       	out	0x3e, r29	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	cd bf       	out	0x3d, r28	; 61
    2428:	09 94       	ijmp

0000242a <__epilogue_restores__>:
    242a:	2a 88       	ldd	r2, Y+18	; 0x12
    242c:	39 88       	ldd	r3, Y+17	; 0x11
    242e:	48 88       	ldd	r4, Y+16	; 0x10
    2430:	5f 84       	ldd	r5, Y+15	; 0x0f
    2432:	6e 84       	ldd	r6, Y+14	; 0x0e
    2434:	7d 84       	ldd	r7, Y+13	; 0x0d
    2436:	8c 84       	ldd	r8, Y+12	; 0x0c
    2438:	9b 84       	ldd	r9, Y+11	; 0x0b
    243a:	aa 84       	ldd	r10, Y+10	; 0x0a
    243c:	b9 84       	ldd	r11, Y+9	; 0x09
    243e:	c8 84       	ldd	r12, Y+8	; 0x08
    2440:	df 80       	ldd	r13, Y+7	; 0x07
    2442:	ee 80       	ldd	r14, Y+6	; 0x06
    2444:	fd 80       	ldd	r15, Y+5	; 0x05
    2446:	0c 81       	ldd	r16, Y+4	; 0x04
    2448:	1b 81       	ldd	r17, Y+3	; 0x03
    244a:	aa 81       	ldd	r26, Y+2	; 0x02
    244c:	b9 81       	ldd	r27, Y+1	; 0x01
    244e:	ce 0f       	add	r28, r30
    2450:	d1 1d       	adc	r29, r1
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	cd bf       	out	0x3d, r28	; 61
    245c:	ed 01       	movw	r28, r26
    245e:	08 95       	ret

00002460 <_exit>:
    2460:	f8 94       	cli

00002462 <__stop_program>:
    2462:	ff cf       	rjmp	.-2      	; 0x2462 <__stop_program>
